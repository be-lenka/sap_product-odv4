<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductPlantSupplyPlanning_Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fixed_lot_size_quantity' => '\BeLenka\SAP\ProductODV4\Model\FixedLotSize',
        'maximum_lot_size_quantity' => '\BeLenka\SAP\ProductODV4\Model\MaximumLotSize',
        'minimum_lot_size_quantity' => '\BeLenka\SAP\ProductODV4\Model\MinimumLotSize',
        'lot_size_rounding_quantity' => '\BeLenka\SAP\ProductODV4\Model\RoundingValue',
        'lot_sizing_procedure' => 'string',
        'mrp_type' => 'string',
        'mrp_responsible' => 'string',
        'safety_stock_quantity' => '\BeLenka\SAP\ProductODV4\Model\SafetyStock',
        'minimum_safety_stock_quantity' => '\BeLenka\SAP\ProductODV4\Model\MinSafStock',
        'planning_time_fence' => 'string',
        'consumption_value_category' => 'string',
        'maximum_stock_quantity' => '\BeLenka\SAP\ProductODV4\Model\MaximumStockLevel',
        'reorder_threshold_quantity' => '\BeLenka\SAP\ProductODV4\Model\ReorderPoint',
        'planned_delivery_duration_in_days' => '\BeLenka\SAP\ProductODV4\Model\PlannedDelivTime',
        'safety_supply_duration_in_days' => 'string',
        'planning_strategy_group' => 'string',
        'total_replenishment_lead_time' => '\BeLenka\SAP\ProductODV4\Model\TotReplLeadTime',
        'procurement_type' => 'string',
        'procurement_sub_type' => 'string',
        'assembly_scrap_percent' => '\BeLenka\SAP\ProductODV4\Model\AssemblyScrap',
        'availability_check_type' => 'string',
        'goods_receipt_duration' => '\BeLenka\SAP\ProductODV4\Model\GRProcessingTime',
        'plan_and_order_day_determination' => 'string',
        'rounding_profile' => 'string',
        'dflt_storage_location_ext_procmt' => 'string',
        'mrp_group' => 'string',
        'lot_size_independent_costs' => '\BeLenka\SAP\ProductODV4\Model\LSIndependentCosts',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => '\BeLenka\SAP\ProductODV4\Model\TaktTime',
        'mrp_planning_calendar' => 'string',
        'range_of_cvrg_prfl_code' => 'string',
        'product_safety_time_mrp_relevance' => 'string',
        'safety_time_period_profile' => 'string',
        'dependent_rqmt_mrp_relevance' => 'string',
        'product_service_level_in_percent' => '\BeLenka\SAP\ProductODV4\Model\ServiceLevel',
        'prod_inh_prodn_duration_in_work_days' => '\BeLenka\SAP\ProductODV4\Model\InHouseProduction',
        'mrp_availability_type' => 'string',
        'cross_project_product' => 'string',
        'storage_costs_percentage_code' => 'string',
        'follow_up_product' => 'string',
        'repetitive_manufacturing_is_allwd' => 'bool',
        'dependent_requirements_type' => 'string',
        'product_is_bulk_component' => 'bool',
        'repetitive_manufacturing_profile' => 'string',
        'backward_cnsmpn_period_in_work_days' => 'string',
        'fwd_consumption_period_in_work_days' => 'string',
        'prod_rqmts_consumption_mode' => 'string',
        'prod_fcst_requirements_split_code' => 'string',
        'effective_out_date' => '\DateTime',
        'scheduling_float_profile' => 'string',
        'component_scrap_in_percent' => '\BeLenka\SAP\ProductODV4\Model\ComponentScrap',
        'product_discontinuation_code' => 'string',
        'product_requirements_grouping' => 'string',
        'production_invtry_managed_loc' => 'string',
        'product_component_backflush_code' => 'string',
        'proposed_product_supply_area' => 'string',
        'mrp_safety_stock_method' => 'string',
        'jit_prodn_conf_profile' => 'string',
        'currency' => 'string',
        'base_unit' => 'string',
        'prodn_plng_and_control_calendar' => 'string',
        'base_iso_unit' => 'string',
        'consignment_control' => 'string',
        'atp_check_horizon_in_days' => '\BeLenka\SAP\ProductODV4\Model\AvailabilityCheckHorizon',
        'atp_check_horizon_factory_calendar' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageCreate[]',
        '_product' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate',
        '_product_plant' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fixed_lot_size_quantity' => null,
        'maximum_lot_size_quantity' => null,
        'minimum_lot_size_quantity' => null,
        'lot_size_rounding_quantity' => null,
        'lot_sizing_procedure' => null,
        'mrp_type' => null,
        'mrp_responsible' => null,
        'safety_stock_quantity' => null,
        'minimum_safety_stock_quantity' => null,
        'planning_time_fence' => null,
        'consumption_value_category' => null,
        'maximum_stock_quantity' => null,
        'reorder_threshold_quantity' => null,
        'planned_delivery_duration_in_days' => null,
        'safety_supply_duration_in_days' => null,
        'planning_strategy_group' => null,
        'total_replenishment_lead_time' => null,
        'procurement_type' => null,
        'procurement_sub_type' => null,
        'assembly_scrap_percent' => null,
        'availability_check_type' => null,
        'goods_receipt_duration' => null,
        'plan_and_order_day_determination' => null,
        'rounding_profile' => null,
        'dflt_storage_location_ext_procmt' => null,
        'mrp_group' => null,
        'lot_size_independent_costs' => null,
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => null,
        'mrp_planning_calendar' => null,
        'range_of_cvrg_prfl_code' => null,
        'product_safety_time_mrp_relevance' => null,
        'safety_time_period_profile' => null,
        'dependent_rqmt_mrp_relevance' => null,
        'product_service_level_in_percent' => null,
        'prod_inh_prodn_duration_in_work_days' => null,
        'mrp_availability_type' => null,
        'cross_project_product' => null,
        'storage_costs_percentage_code' => null,
        'follow_up_product' => null,
        'repetitive_manufacturing_is_allwd' => null,
        'dependent_requirements_type' => null,
        'product_is_bulk_component' => null,
        'repetitive_manufacturing_profile' => null,
        'backward_cnsmpn_period_in_work_days' => null,
        'fwd_consumption_period_in_work_days' => null,
        'prod_rqmts_consumption_mode' => null,
        'prod_fcst_requirements_split_code' => null,
        'effective_out_date' => 'date',
        'scheduling_float_profile' => null,
        'component_scrap_in_percent' => null,
        'product_discontinuation_code' => null,
        'product_requirements_grouping' => null,
        'production_invtry_managed_loc' => null,
        'product_component_backflush_code' => null,
        'proposed_product_supply_area' => null,
        'mrp_safety_stock_method' => null,
        'jit_prodn_conf_profile' => null,
        'currency' => null,
        'base_unit' => null,
        'prodn_plng_and_control_calendar' => null,
        'base_iso_unit' => null,
        'consignment_control' => null,
        'atp_check_horizon_in_days' => null,
        'atp_check_horizon_factory_calendar' => null,
        'sap__messages' => null,
        '_product' => null,
        '_product_plant' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fixed_lot_size_quantity' => false,
		'maximum_lot_size_quantity' => false,
		'minimum_lot_size_quantity' => false,
		'lot_size_rounding_quantity' => false,
		'lot_sizing_procedure' => false,
		'mrp_type' => false,
		'mrp_responsible' => false,
		'safety_stock_quantity' => false,
		'minimum_safety_stock_quantity' => false,
		'planning_time_fence' => false,
		'consumption_value_category' => false,
		'maximum_stock_quantity' => false,
		'reorder_threshold_quantity' => false,
		'planned_delivery_duration_in_days' => false,
		'safety_supply_duration_in_days' => false,
		'planning_strategy_group' => false,
		'total_replenishment_lead_time' => false,
		'procurement_type' => false,
		'procurement_sub_type' => false,
		'assembly_scrap_percent' => false,
		'availability_check_type' => false,
		'goods_receipt_duration' => false,
		'plan_and_order_day_determination' => false,
		'rounding_profile' => false,
		'dflt_storage_location_ext_procmt' => false,
		'mrp_group' => false,
		'lot_size_independent_costs' => false,
		'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => false,
		'mrp_planning_calendar' => false,
		'range_of_cvrg_prfl_code' => false,
		'product_safety_time_mrp_relevance' => false,
		'safety_time_period_profile' => false,
		'dependent_rqmt_mrp_relevance' => false,
		'product_service_level_in_percent' => false,
		'prod_inh_prodn_duration_in_work_days' => false,
		'mrp_availability_type' => false,
		'cross_project_product' => false,
		'storage_costs_percentage_code' => false,
		'follow_up_product' => false,
		'repetitive_manufacturing_is_allwd' => false,
		'dependent_requirements_type' => false,
		'product_is_bulk_component' => false,
		'repetitive_manufacturing_profile' => false,
		'backward_cnsmpn_period_in_work_days' => false,
		'fwd_consumption_period_in_work_days' => false,
		'prod_rqmts_consumption_mode' => false,
		'prod_fcst_requirements_split_code' => false,
		'effective_out_date' => true,
		'scheduling_float_profile' => false,
		'component_scrap_in_percent' => false,
		'product_discontinuation_code' => false,
		'product_requirements_grouping' => false,
		'production_invtry_managed_loc' => false,
		'product_component_backflush_code' => false,
		'proposed_product_supply_area' => false,
		'mrp_safety_stock_method' => false,
		'jit_prodn_conf_profile' => false,
		'currency' => false,
		'base_unit' => false,
		'prodn_plng_and_control_calendar' => false,
		'base_iso_unit' => false,
		'consignment_control' => false,
		'atp_check_horizon_in_days' => false,
		'atp_check_horizon_factory_calendar' => false,
		'sap__messages' => false,
		'_product' => false,
		'_product_plant' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fixed_lot_size_quantity' => 'FixedLotSizeQuantity',
        'maximum_lot_size_quantity' => 'MaximumLotSizeQuantity',
        'minimum_lot_size_quantity' => 'MinimumLotSizeQuantity',
        'lot_size_rounding_quantity' => 'LotSizeRoundingQuantity',
        'lot_sizing_procedure' => 'LotSizingProcedure',
        'mrp_type' => 'MRPType',
        'mrp_responsible' => 'MRPResponsible',
        'safety_stock_quantity' => 'SafetyStockQuantity',
        'minimum_safety_stock_quantity' => 'MinimumSafetyStockQuantity',
        'planning_time_fence' => 'PlanningTimeFence',
        'consumption_value_category' => 'ConsumptionValueCategory',
        'maximum_stock_quantity' => 'MaximumStockQuantity',
        'reorder_threshold_quantity' => 'ReorderThresholdQuantity',
        'planned_delivery_duration_in_days' => 'PlannedDeliveryDurationInDays',
        'safety_supply_duration_in_days' => 'SafetySupplyDurationInDays',
        'planning_strategy_group' => 'PlanningStrategyGroup',
        'total_replenishment_lead_time' => 'TotalReplenishmentLeadTime',
        'procurement_type' => 'ProcurementType',
        'procurement_sub_type' => 'ProcurementSubType',
        'assembly_scrap_percent' => 'AssemblyScrapPercent',
        'availability_check_type' => 'AvailabilityCheckType',
        'goods_receipt_duration' => 'GoodsReceiptDuration',
        'plan_and_order_day_determination' => 'PlanAndOrderDayDetermination',
        'rounding_profile' => 'RoundingProfile',
        'dflt_storage_location_ext_procmt' => 'DfltStorageLocationExtProcmt',
        'mrp_group' => 'MRPGroup',
        'lot_size_independent_costs' => 'LotSizeIndependentCosts',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => 'RqmtQtyRcptTaktTmeInWrkgDays',
        'mrp_planning_calendar' => 'MRPPlanningCalendar',
        'range_of_cvrg_prfl_code' => 'RangeOfCvrgPrflCode',
        'product_safety_time_mrp_relevance' => 'ProductSafetyTimeMRPRelevance',
        'safety_time_period_profile' => 'SafetyTimePeriodProfile',
        'dependent_rqmt_mrp_relevance' => 'DependentRqmtMRPRelevance',
        'product_service_level_in_percent' => 'ProductServiceLevelInPercent',
        'prod_inh_prodn_duration_in_work_days' => 'ProdInhProdnDurationInWorkDays',
        'mrp_availability_type' => 'MRPAvailabilityType',
        'cross_project_product' => 'CrossProjectProduct',
        'storage_costs_percentage_code' => 'StorageCostsPercentageCode',
        'follow_up_product' => 'FollowUpProduct',
        'repetitive_manufacturing_is_allwd' => 'RepetitiveManufacturingIsAllwd',
        'dependent_requirements_type' => 'DependentRequirementsType',
        'product_is_bulk_component' => 'ProductIsBulkComponent',
        'repetitive_manufacturing_profile' => 'RepetitiveManufacturingProfile',
        'backward_cnsmpn_period_in_work_days' => 'BackwardCnsmpnPeriodInWorkDays',
        'fwd_consumption_period_in_work_days' => 'FwdConsumptionPeriodInWorkDays',
        'prod_rqmts_consumption_mode' => 'ProdRqmtsConsumptionMode',
        'prod_fcst_requirements_split_code' => 'ProdFcstRequirementsSplitCode',
        'effective_out_date' => 'EffectiveOutDate',
        'scheduling_float_profile' => 'SchedulingFloatProfile',
        'component_scrap_in_percent' => 'ComponentScrapInPercent',
        'product_discontinuation_code' => 'ProductDiscontinuationCode',
        'product_requirements_grouping' => 'ProductRequirementsGrouping',
        'production_invtry_managed_loc' => 'ProductionInvtryManagedLoc',
        'product_component_backflush_code' => 'ProductComponentBackflushCode',
        'proposed_product_supply_area' => 'ProposedProductSupplyArea',
        'mrp_safety_stock_method' => 'MRPSafetyStockMethod',
        'jit_prodn_conf_profile' => 'JITProdnConfProfile',
        'currency' => 'Currency',
        'base_unit' => 'BaseUnit',
        'prodn_plng_and_control_calendar' => 'ProdnPlngAndControlCalendar',
        'base_iso_unit' => 'BaseISOUnit',
        'consignment_control' => 'ConsignmentControl',
        'atp_check_horizon_in_days' => 'ATPCheckHorizonInDays',
        'atp_check_horizon_factory_calendar' => 'ATPCheckHorizonFactoryCalendar',
        'sap__messages' => 'SAP__Messages',
        '_product' => '_Product',
        '_product_plant' => '_ProductPlant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fixed_lot_size_quantity' => 'setFixedLotSizeQuantity',
        'maximum_lot_size_quantity' => 'setMaximumLotSizeQuantity',
        'minimum_lot_size_quantity' => 'setMinimumLotSizeQuantity',
        'lot_size_rounding_quantity' => 'setLotSizeRoundingQuantity',
        'lot_sizing_procedure' => 'setLotSizingProcedure',
        'mrp_type' => 'setMrpType',
        'mrp_responsible' => 'setMrpResponsible',
        'safety_stock_quantity' => 'setSafetyStockQuantity',
        'minimum_safety_stock_quantity' => 'setMinimumSafetyStockQuantity',
        'planning_time_fence' => 'setPlanningTimeFence',
        'consumption_value_category' => 'setConsumptionValueCategory',
        'maximum_stock_quantity' => 'setMaximumStockQuantity',
        'reorder_threshold_quantity' => 'setReorderThresholdQuantity',
        'planned_delivery_duration_in_days' => 'setPlannedDeliveryDurationInDays',
        'safety_supply_duration_in_days' => 'setSafetySupplyDurationInDays',
        'planning_strategy_group' => 'setPlanningStrategyGroup',
        'total_replenishment_lead_time' => 'setTotalReplenishmentLeadTime',
        'procurement_type' => 'setProcurementType',
        'procurement_sub_type' => 'setProcurementSubType',
        'assembly_scrap_percent' => 'setAssemblyScrapPercent',
        'availability_check_type' => 'setAvailabilityCheckType',
        'goods_receipt_duration' => 'setGoodsReceiptDuration',
        'plan_and_order_day_determination' => 'setPlanAndOrderDayDetermination',
        'rounding_profile' => 'setRoundingProfile',
        'dflt_storage_location_ext_procmt' => 'setDfltStorageLocationExtProcmt',
        'mrp_group' => 'setMrpGroup',
        'lot_size_independent_costs' => 'setLotSizeIndependentCosts',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => 'setRqmtQtyRcptTaktTmeInWrkgDays',
        'mrp_planning_calendar' => 'setMrpPlanningCalendar',
        'range_of_cvrg_prfl_code' => 'setRangeOfCvrgPrflCode',
        'product_safety_time_mrp_relevance' => 'setProductSafetyTimeMrpRelevance',
        'safety_time_period_profile' => 'setSafetyTimePeriodProfile',
        'dependent_rqmt_mrp_relevance' => 'setDependentRqmtMrpRelevance',
        'product_service_level_in_percent' => 'setProductServiceLevelInPercent',
        'prod_inh_prodn_duration_in_work_days' => 'setProdInhProdnDurationInWorkDays',
        'mrp_availability_type' => 'setMrpAvailabilityType',
        'cross_project_product' => 'setCrossProjectProduct',
        'storage_costs_percentage_code' => 'setStorageCostsPercentageCode',
        'follow_up_product' => 'setFollowUpProduct',
        'repetitive_manufacturing_is_allwd' => 'setRepetitiveManufacturingIsAllwd',
        'dependent_requirements_type' => 'setDependentRequirementsType',
        'product_is_bulk_component' => 'setProductIsBulkComponent',
        'repetitive_manufacturing_profile' => 'setRepetitiveManufacturingProfile',
        'backward_cnsmpn_period_in_work_days' => 'setBackwardCnsmpnPeriodInWorkDays',
        'fwd_consumption_period_in_work_days' => 'setFwdConsumptionPeriodInWorkDays',
        'prod_rqmts_consumption_mode' => 'setProdRqmtsConsumptionMode',
        'prod_fcst_requirements_split_code' => 'setProdFcstRequirementsSplitCode',
        'effective_out_date' => 'setEffectiveOutDate',
        'scheduling_float_profile' => 'setSchedulingFloatProfile',
        'component_scrap_in_percent' => 'setComponentScrapInPercent',
        'product_discontinuation_code' => 'setProductDiscontinuationCode',
        'product_requirements_grouping' => 'setProductRequirementsGrouping',
        'production_invtry_managed_loc' => 'setProductionInvtryManagedLoc',
        'product_component_backflush_code' => 'setProductComponentBackflushCode',
        'proposed_product_supply_area' => 'setProposedProductSupplyArea',
        'mrp_safety_stock_method' => 'setMrpSafetyStockMethod',
        'jit_prodn_conf_profile' => 'setJitProdnConfProfile',
        'currency' => 'setCurrency',
        'base_unit' => 'setBaseUnit',
        'prodn_plng_and_control_calendar' => 'setProdnPlngAndControlCalendar',
        'base_iso_unit' => 'setBaseIsoUnit',
        'consignment_control' => 'setConsignmentControl',
        'atp_check_horizon_in_days' => 'setAtpCheckHorizonInDays',
        'atp_check_horizon_factory_calendar' => 'setAtpCheckHorizonFactoryCalendar',
        'sap__messages' => 'setSapMessages',
        '_product' => '_setProduct',
        '_product_plant' => '_setProductPlant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fixed_lot_size_quantity' => 'getFixedLotSizeQuantity',
        'maximum_lot_size_quantity' => 'getMaximumLotSizeQuantity',
        'minimum_lot_size_quantity' => 'getMinimumLotSizeQuantity',
        'lot_size_rounding_quantity' => 'getLotSizeRoundingQuantity',
        'lot_sizing_procedure' => 'getLotSizingProcedure',
        'mrp_type' => 'getMrpType',
        'mrp_responsible' => 'getMrpResponsible',
        'safety_stock_quantity' => 'getSafetyStockQuantity',
        'minimum_safety_stock_quantity' => 'getMinimumSafetyStockQuantity',
        'planning_time_fence' => 'getPlanningTimeFence',
        'consumption_value_category' => 'getConsumptionValueCategory',
        'maximum_stock_quantity' => 'getMaximumStockQuantity',
        'reorder_threshold_quantity' => 'getReorderThresholdQuantity',
        'planned_delivery_duration_in_days' => 'getPlannedDeliveryDurationInDays',
        'safety_supply_duration_in_days' => 'getSafetySupplyDurationInDays',
        'planning_strategy_group' => 'getPlanningStrategyGroup',
        'total_replenishment_lead_time' => 'getTotalReplenishmentLeadTime',
        'procurement_type' => 'getProcurementType',
        'procurement_sub_type' => 'getProcurementSubType',
        'assembly_scrap_percent' => 'getAssemblyScrapPercent',
        'availability_check_type' => 'getAvailabilityCheckType',
        'goods_receipt_duration' => 'getGoodsReceiptDuration',
        'plan_and_order_day_determination' => 'getPlanAndOrderDayDetermination',
        'rounding_profile' => 'getRoundingProfile',
        'dflt_storage_location_ext_procmt' => 'getDfltStorageLocationExtProcmt',
        'mrp_group' => 'getMrpGroup',
        'lot_size_independent_costs' => 'getLotSizeIndependentCosts',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => 'getRqmtQtyRcptTaktTmeInWrkgDays',
        'mrp_planning_calendar' => 'getMrpPlanningCalendar',
        'range_of_cvrg_prfl_code' => 'getRangeOfCvrgPrflCode',
        'product_safety_time_mrp_relevance' => 'getProductSafetyTimeMrpRelevance',
        'safety_time_period_profile' => 'getSafetyTimePeriodProfile',
        'dependent_rqmt_mrp_relevance' => 'getDependentRqmtMrpRelevance',
        'product_service_level_in_percent' => 'getProductServiceLevelInPercent',
        'prod_inh_prodn_duration_in_work_days' => 'getProdInhProdnDurationInWorkDays',
        'mrp_availability_type' => 'getMrpAvailabilityType',
        'cross_project_product' => 'getCrossProjectProduct',
        'storage_costs_percentage_code' => 'getStorageCostsPercentageCode',
        'follow_up_product' => 'getFollowUpProduct',
        'repetitive_manufacturing_is_allwd' => 'getRepetitiveManufacturingIsAllwd',
        'dependent_requirements_type' => 'getDependentRequirementsType',
        'product_is_bulk_component' => 'getProductIsBulkComponent',
        'repetitive_manufacturing_profile' => 'getRepetitiveManufacturingProfile',
        'backward_cnsmpn_period_in_work_days' => 'getBackwardCnsmpnPeriodInWorkDays',
        'fwd_consumption_period_in_work_days' => 'getFwdConsumptionPeriodInWorkDays',
        'prod_rqmts_consumption_mode' => 'getProdRqmtsConsumptionMode',
        'prod_fcst_requirements_split_code' => 'getProdFcstRequirementsSplitCode',
        'effective_out_date' => 'getEffectiveOutDate',
        'scheduling_float_profile' => 'getSchedulingFloatProfile',
        'component_scrap_in_percent' => 'getComponentScrapInPercent',
        'product_discontinuation_code' => 'getProductDiscontinuationCode',
        'product_requirements_grouping' => 'getProductRequirementsGrouping',
        'production_invtry_managed_loc' => 'getProductionInvtryManagedLoc',
        'product_component_backflush_code' => 'getProductComponentBackflushCode',
        'proposed_product_supply_area' => 'getProposedProductSupplyArea',
        'mrp_safety_stock_method' => 'getMrpSafetyStockMethod',
        'jit_prodn_conf_profile' => 'getJitProdnConfProfile',
        'currency' => 'getCurrency',
        'base_unit' => 'getBaseUnit',
        'prodn_plng_and_control_calendar' => 'getProdnPlngAndControlCalendar',
        'base_iso_unit' => 'getBaseIsoUnit',
        'consignment_control' => 'getConsignmentControl',
        'atp_check_horizon_in_days' => 'getAtpCheckHorizonInDays',
        'atp_check_horizon_factory_calendar' => 'getAtpCheckHorizonFactoryCalendar',
        'sap__messages' => 'getSapMessages',
        '_product' => '_getProduct',
        '_product_plant' => '_getProductPlant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fixed_lot_size_quantity', $data ?? [], null);
        $this->setIfExists('maximum_lot_size_quantity', $data ?? [], null);
        $this->setIfExists('minimum_lot_size_quantity', $data ?? [], null);
        $this->setIfExists('lot_size_rounding_quantity', $data ?? [], null);
        $this->setIfExists('lot_sizing_procedure', $data ?? [], null);
        $this->setIfExists('mrp_type', $data ?? [], null);
        $this->setIfExists('mrp_responsible', $data ?? [], null);
        $this->setIfExists('safety_stock_quantity', $data ?? [], null);
        $this->setIfExists('minimum_safety_stock_quantity', $data ?? [], null);
        $this->setIfExists('planning_time_fence', $data ?? [], null);
        $this->setIfExists('consumption_value_category', $data ?? [], null);
        $this->setIfExists('maximum_stock_quantity', $data ?? [], null);
        $this->setIfExists('reorder_threshold_quantity', $data ?? [], null);
        $this->setIfExists('planned_delivery_duration_in_days', $data ?? [], null);
        $this->setIfExists('safety_supply_duration_in_days', $data ?? [], null);
        $this->setIfExists('planning_strategy_group', $data ?? [], null);
        $this->setIfExists('total_replenishment_lead_time', $data ?? [], null);
        $this->setIfExists('procurement_type', $data ?? [], null);
        $this->setIfExists('procurement_sub_type', $data ?? [], null);
        $this->setIfExists('assembly_scrap_percent', $data ?? [], null);
        $this->setIfExists('availability_check_type', $data ?? [], null);
        $this->setIfExists('goods_receipt_duration', $data ?? [], null);
        $this->setIfExists('plan_and_order_day_determination', $data ?? [], null);
        $this->setIfExists('rounding_profile', $data ?? [], null);
        $this->setIfExists('dflt_storage_location_ext_procmt', $data ?? [], null);
        $this->setIfExists('mrp_group', $data ?? [], null);
        $this->setIfExists('lot_size_independent_costs', $data ?? [], null);
        $this->setIfExists('rqmt_qty_rcpt_takt_tme_in_wrkg_days', $data ?? [], null);
        $this->setIfExists('mrp_planning_calendar', $data ?? [], null);
        $this->setIfExists('range_of_cvrg_prfl_code', $data ?? [], null);
        $this->setIfExists('product_safety_time_mrp_relevance', $data ?? [], null);
        $this->setIfExists('safety_time_period_profile', $data ?? [], null);
        $this->setIfExists('dependent_rqmt_mrp_relevance', $data ?? [], null);
        $this->setIfExists('product_service_level_in_percent', $data ?? [], null);
        $this->setIfExists('prod_inh_prodn_duration_in_work_days', $data ?? [], null);
        $this->setIfExists('mrp_availability_type', $data ?? [], null);
        $this->setIfExists('cross_project_product', $data ?? [], null);
        $this->setIfExists('storage_costs_percentage_code', $data ?? [], null);
        $this->setIfExists('follow_up_product', $data ?? [], null);
        $this->setIfExists('repetitive_manufacturing_is_allwd', $data ?? [], null);
        $this->setIfExists('dependent_requirements_type', $data ?? [], null);
        $this->setIfExists('product_is_bulk_component', $data ?? [], null);
        $this->setIfExists('repetitive_manufacturing_profile', $data ?? [], null);
        $this->setIfExists('backward_cnsmpn_period_in_work_days', $data ?? [], null);
        $this->setIfExists('fwd_consumption_period_in_work_days', $data ?? [], null);
        $this->setIfExists('prod_rqmts_consumption_mode', $data ?? [], null);
        $this->setIfExists('prod_fcst_requirements_split_code', $data ?? [], null);
        $this->setIfExists('effective_out_date', $data ?? [], null);
        $this->setIfExists('scheduling_float_profile', $data ?? [], null);
        $this->setIfExists('component_scrap_in_percent', $data ?? [], null);
        $this->setIfExists('product_discontinuation_code', $data ?? [], null);
        $this->setIfExists('product_requirements_grouping', $data ?? [], null);
        $this->setIfExists('production_invtry_managed_loc', $data ?? [], null);
        $this->setIfExists('product_component_backflush_code', $data ?? [], null);
        $this->setIfExists('proposed_product_supply_area', $data ?? [], null);
        $this->setIfExists('mrp_safety_stock_method', $data ?? [], null);
        $this->setIfExists('jit_prodn_conf_profile', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('prodn_plng_and_control_calendar', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('consignment_control', $data ?? [], null);
        $this->setIfExists('atp_check_horizon_in_days', $data ?? [], null);
        $this->setIfExists('atp_check_horizon_factory_calendar', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_product', $data ?? [], null);
        $this->setIfExists('_product_plant', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['lot_sizing_procedure']) && (mb_strlen($this->container['lot_sizing_procedure']) > 2)) {
            $invalidProperties[] = "invalid value for 'lot_sizing_procedure', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mrp_type']) && (mb_strlen($this->container['mrp_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'mrp_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mrp_responsible']) && (mb_strlen($this->container['mrp_responsible']) > 3)) {
            $invalidProperties[] = "invalid value for 'mrp_responsible', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['planning_time_fence']) && (mb_strlen($this->container['planning_time_fence']) > 3)) {
            $invalidProperties[] = "invalid value for 'planning_time_fence', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['consumption_value_category']) && (mb_strlen($this->container['consumption_value_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'consumption_value_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['safety_supply_duration_in_days']) && (mb_strlen($this->container['safety_supply_duration_in_days']) > 2)) {
            $invalidProperties[] = "invalid value for 'safety_supply_duration_in_days', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['planning_strategy_group']) && (mb_strlen($this->container['planning_strategy_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'planning_strategy_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['procurement_type']) && (mb_strlen($this->container['procurement_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'procurement_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['procurement_sub_type']) && (mb_strlen($this->container['procurement_sub_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'procurement_sub_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['availability_check_type']) && (mb_strlen($this->container['availability_check_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'availability_check_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['plan_and_order_day_determination']) && (mb_strlen($this->container['plan_and_order_day_determination']) > 3)) {
            $invalidProperties[] = "invalid value for 'plan_and_order_day_determination', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['rounding_profile']) && (mb_strlen($this->container['rounding_profile']) > 4)) {
            $invalidProperties[] = "invalid value for 'rounding_profile', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['dflt_storage_location_ext_procmt']) && (mb_strlen($this->container['dflt_storage_location_ext_procmt']) > 4)) {
            $invalidProperties[] = "invalid value for 'dflt_storage_location_ext_procmt', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['mrp_group']) && (mb_strlen($this->container['mrp_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'mrp_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['mrp_planning_calendar']) && (mb_strlen($this->container['mrp_planning_calendar']) > 3)) {
            $invalidProperties[] = "invalid value for 'mrp_planning_calendar', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['range_of_cvrg_prfl_code']) && (mb_strlen($this->container['range_of_cvrg_prfl_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'range_of_cvrg_prfl_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_safety_time_mrp_relevance']) && (mb_strlen($this->container['product_safety_time_mrp_relevance']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_safety_time_mrp_relevance', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['safety_time_period_profile']) && (mb_strlen($this->container['safety_time_period_profile']) > 3)) {
            $invalidProperties[] = "invalid value for 'safety_time_period_profile', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['dependent_rqmt_mrp_relevance']) && (mb_strlen($this->container['dependent_rqmt_mrp_relevance']) > 1)) {
            $invalidProperties[] = "invalid value for 'dependent_rqmt_mrp_relevance', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['mrp_availability_type']) && (mb_strlen($this->container['mrp_availability_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'mrp_availability_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['cross_project_product']) && (mb_strlen($this->container['cross_project_product']) > 1)) {
            $invalidProperties[] = "invalid value for 'cross_project_product', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['storage_costs_percentage_code']) && (mb_strlen($this->container['storage_costs_percentage_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'storage_costs_percentage_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['follow_up_product']) && (mb_strlen($this->container['follow_up_product']) > 18)) {
            $invalidProperties[] = "invalid value for 'follow_up_product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['dependent_requirements_type']) && (mb_strlen($this->container['dependent_requirements_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'dependent_requirements_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['repetitive_manufacturing_profile']) && (mb_strlen($this->container['repetitive_manufacturing_profile']) > 4)) {
            $invalidProperties[] = "invalid value for 'repetitive_manufacturing_profile', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['backward_cnsmpn_period_in_work_days']) && (mb_strlen($this->container['backward_cnsmpn_period_in_work_days']) > 3)) {
            $invalidProperties[] = "invalid value for 'backward_cnsmpn_period_in_work_days', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['fwd_consumption_period_in_work_days']) && (mb_strlen($this->container['fwd_consumption_period_in_work_days']) > 3)) {
            $invalidProperties[] = "invalid value for 'fwd_consumption_period_in_work_days', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['prod_rqmts_consumption_mode']) && (mb_strlen($this->container['prod_rqmts_consumption_mode']) > 1)) {
            $invalidProperties[] = "invalid value for 'prod_rqmts_consumption_mode', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['prod_fcst_requirements_split_code']) && (mb_strlen($this->container['prod_fcst_requirements_split_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'prod_fcst_requirements_split_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['scheduling_float_profile']) && (mb_strlen($this->container['scheduling_float_profile']) > 3)) {
            $invalidProperties[] = "invalid value for 'scheduling_float_profile', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_discontinuation_code']) && (mb_strlen($this->container['product_discontinuation_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_discontinuation_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_requirements_grouping']) && (mb_strlen($this->container['product_requirements_grouping']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_requirements_grouping', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['production_invtry_managed_loc']) && (mb_strlen($this->container['production_invtry_managed_loc']) > 4)) {
            $invalidProperties[] = "invalid value for 'production_invtry_managed_loc', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['product_component_backflush_code']) && (mb_strlen($this->container['product_component_backflush_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_component_backflush_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['proposed_product_supply_area']) && (mb_strlen($this->container['proposed_product_supply_area']) > 10)) {
            $invalidProperties[] = "invalid value for 'proposed_product_supply_area', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['mrp_safety_stock_method']) && (mb_strlen($this->container['mrp_safety_stock_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'mrp_safety_stock_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['jit_prodn_conf_profile']) && (mb_strlen($this->container['jit_prodn_conf_profile']) > 4)) {
            $invalidProperties[] = "invalid value for 'jit_prodn_conf_profile', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['prodn_plng_and_control_calendar']) && (mb_strlen($this->container['prodn_plng_and_control_calendar']) > 3)) {
            $invalidProperties[] = "invalid value for 'prodn_plng_and_control_calendar', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['consignment_control']) && (mb_strlen($this->container['consignment_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'consignment_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['atp_check_horizon_factory_calendar']) && (mb_strlen($this->container['atp_check_horizon_factory_calendar']) > 2)) {
            $invalidProperties[] = "invalid value for 'atp_check_horizon_factory_calendar', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fixed_lot_size_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\FixedLotSize|null
     */
    public function getFixedLotSizeQuantity()
    {
        return $this->container['fixed_lot_size_quantity'];
    }

    /**
     * Sets fixed_lot_size_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\FixedLotSize|null $fixed_lot_size_quantity fixed_lot_size_quantity
     *
     * @return self
     */
    public function setFixedLotSizeQuantity($fixed_lot_size_quantity)
    {
        if (is_null($fixed_lot_size_quantity)) {
            throw new \InvalidArgumentException('non-nullable fixed_lot_size_quantity cannot be null');
        }
        $this->container['fixed_lot_size_quantity'] = $fixed_lot_size_quantity;

        return $this;
    }

    /**
     * Gets maximum_lot_size_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaximumLotSize|null
     */
    public function getMaximumLotSizeQuantity()
    {
        return $this->container['maximum_lot_size_quantity'];
    }

    /**
     * Sets maximum_lot_size_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaximumLotSize|null $maximum_lot_size_quantity maximum_lot_size_quantity
     *
     * @return self
     */
    public function setMaximumLotSizeQuantity($maximum_lot_size_quantity)
    {
        if (is_null($maximum_lot_size_quantity)) {
            throw new \InvalidArgumentException('non-nullable maximum_lot_size_quantity cannot be null');
        }
        $this->container['maximum_lot_size_quantity'] = $maximum_lot_size_quantity;

        return $this;
    }

    /**
     * Gets minimum_lot_size_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MinimumLotSize|null
     */
    public function getMinimumLotSizeQuantity()
    {
        return $this->container['minimum_lot_size_quantity'];
    }

    /**
     * Sets minimum_lot_size_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MinimumLotSize|null $minimum_lot_size_quantity minimum_lot_size_quantity
     *
     * @return self
     */
    public function setMinimumLotSizeQuantity($minimum_lot_size_quantity)
    {
        if (is_null($minimum_lot_size_quantity)) {
            throw new \InvalidArgumentException('non-nullable minimum_lot_size_quantity cannot be null');
        }
        $this->container['minimum_lot_size_quantity'] = $minimum_lot_size_quantity;

        return $this;
    }

    /**
     * Gets lot_size_rounding_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\RoundingValue|null
     */
    public function getLotSizeRoundingQuantity()
    {
        return $this->container['lot_size_rounding_quantity'];
    }

    /**
     * Sets lot_size_rounding_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\RoundingValue|null $lot_size_rounding_quantity lot_size_rounding_quantity
     *
     * @return self
     */
    public function setLotSizeRoundingQuantity($lot_size_rounding_quantity)
    {
        if (is_null($lot_size_rounding_quantity)) {
            throw new \InvalidArgumentException('non-nullable lot_size_rounding_quantity cannot be null');
        }
        $this->container['lot_size_rounding_quantity'] = $lot_size_rounding_quantity;

        return $this;
    }

    /**
     * Gets lot_sizing_procedure
     *
     * @return string|null
     */
    public function getLotSizingProcedure()
    {
        return $this->container['lot_sizing_procedure'];
    }

    /**
     * Sets lot_sizing_procedure
     *
     * @param string|null $lot_sizing_procedure Lot Sizing Procedure in Materials Planning
     *
     * @return self
     */
    public function setLotSizingProcedure($lot_sizing_procedure)
    {
        if (is_null($lot_sizing_procedure)) {
            throw new \InvalidArgumentException('non-nullable lot_sizing_procedure cannot be null');
        }
        if ((mb_strlen($lot_sizing_procedure) > 2)) {
            throw new \InvalidArgumentException('invalid length for $lot_sizing_procedure when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['lot_sizing_procedure'] = $lot_sizing_procedure;

        return $this;
    }

    /**
     * Gets mrp_type
     *
     * @return string|null
     */
    public function getMrpType()
    {
        return $this->container['mrp_type'];
    }

    /**
     * Sets mrp_type
     *
     * @param string|null $mrp_type mrp_type
     *
     * @return self
     */
    public function setMrpType($mrp_type)
    {
        if (is_null($mrp_type)) {
            throw new \InvalidArgumentException('non-nullable mrp_type cannot be null');
        }
        if ((mb_strlen($mrp_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mrp_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['mrp_type'] = $mrp_type;

        return $this;
    }

    /**
     * Gets mrp_responsible
     *
     * @return string|null
     */
    public function getMrpResponsible()
    {
        return $this->container['mrp_responsible'];
    }

    /**
     * Sets mrp_responsible
     *
     * @param string|null $mrp_responsible mrp_responsible
     *
     * @return self
     */
    public function setMrpResponsible($mrp_responsible)
    {
        if (is_null($mrp_responsible)) {
            throw new \InvalidArgumentException('non-nullable mrp_responsible cannot be null');
        }
        if ((mb_strlen($mrp_responsible) > 3)) {
            throw new \InvalidArgumentException('invalid length for $mrp_responsible when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['mrp_responsible'] = $mrp_responsible;

        return $this;
    }

    /**
     * Gets safety_stock_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\SafetyStock|null
     */
    public function getSafetyStockQuantity()
    {
        return $this->container['safety_stock_quantity'];
    }

    /**
     * Sets safety_stock_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\SafetyStock|null $safety_stock_quantity safety_stock_quantity
     *
     * @return self
     */
    public function setSafetyStockQuantity($safety_stock_quantity)
    {
        if (is_null($safety_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable safety_stock_quantity cannot be null');
        }
        $this->container['safety_stock_quantity'] = $safety_stock_quantity;

        return $this;
    }

    /**
     * Gets minimum_safety_stock_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MinSafStock|null
     */
    public function getMinimumSafetyStockQuantity()
    {
        return $this->container['minimum_safety_stock_quantity'];
    }

    /**
     * Sets minimum_safety_stock_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MinSafStock|null $minimum_safety_stock_quantity minimum_safety_stock_quantity
     *
     * @return self
     */
    public function setMinimumSafetyStockQuantity($minimum_safety_stock_quantity)
    {
        if (is_null($minimum_safety_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable minimum_safety_stock_quantity cannot be null');
        }
        $this->container['minimum_safety_stock_quantity'] = $minimum_safety_stock_quantity;

        return $this;
    }

    /**
     * Gets planning_time_fence
     *
     * @return string|null
     */
    public function getPlanningTimeFence()
    {
        return $this->container['planning_time_fence'];
    }

    /**
     * Sets planning_time_fence
     *
     * @param string|null $planning_time_fence planning_time_fence
     *
     * @return self
     */
    public function setPlanningTimeFence($planning_time_fence)
    {
        if (is_null($planning_time_fence)) {
            throw new \InvalidArgumentException('non-nullable planning_time_fence cannot be null');
        }
        if ((mb_strlen($planning_time_fence) > 3)) {
            throw new \InvalidArgumentException('invalid length for $planning_time_fence when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['planning_time_fence'] = $planning_time_fence;

        return $this;
    }

    /**
     * Gets consumption_value_category
     *
     * @return string|null
     */
    public function getConsumptionValueCategory()
    {
        return $this->container['consumption_value_category'];
    }

    /**
     * Sets consumption_value_category
     *
     * @param string|null $consumption_value_category consumption_value_category
     *
     * @return self
     */
    public function setConsumptionValueCategory($consumption_value_category)
    {
        if (is_null($consumption_value_category)) {
            throw new \InvalidArgumentException('non-nullable consumption_value_category cannot be null');
        }
        if ((mb_strlen($consumption_value_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $consumption_value_category when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['consumption_value_category'] = $consumption_value_category;

        return $this;
    }

    /**
     * Gets maximum_stock_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaximumStockLevel|null
     */
    public function getMaximumStockQuantity()
    {
        return $this->container['maximum_stock_quantity'];
    }

    /**
     * Sets maximum_stock_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaximumStockLevel|null $maximum_stock_quantity maximum_stock_quantity
     *
     * @return self
     */
    public function setMaximumStockQuantity($maximum_stock_quantity)
    {
        if (is_null($maximum_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable maximum_stock_quantity cannot be null');
        }
        $this->container['maximum_stock_quantity'] = $maximum_stock_quantity;

        return $this;
    }

    /**
     * Gets reorder_threshold_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ReorderPoint|null
     */
    public function getReorderThresholdQuantity()
    {
        return $this->container['reorder_threshold_quantity'];
    }

    /**
     * Sets reorder_threshold_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ReorderPoint|null $reorder_threshold_quantity reorder_threshold_quantity
     *
     * @return self
     */
    public function setReorderThresholdQuantity($reorder_threshold_quantity)
    {
        if (is_null($reorder_threshold_quantity)) {
            throw new \InvalidArgumentException('non-nullable reorder_threshold_quantity cannot be null');
        }
        $this->container['reorder_threshold_quantity'] = $reorder_threshold_quantity;

        return $this;
    }

    /**
     * Gets planned_delivery_duration_in_days
     *
     * @return \BeLenka\SAP\ProductODV4\Model\PlannedDelivTime|null
     */
    public function getPlannedDeliveryDurationInDays()
    {
        return $this->container['planned_delivery_duration_in_days'];
    }

    /**
     * Sets planned_delivery_duration_in_days
     *
     * @param \BeLenka\SAP\ProductODV4\Model\PlannedDelivTime|null $planned_delivery_duration_in_days planned_delivery_duration_in_days
     *
     * @return self
     */
    public function setPlannedDeliveryDurationInDays($planned_delivery_duration_in_days)
    {
        if (is_null($planned_delivery_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable planned_delivery_duration_in_days cannot be null');
        }
        $this->container['planned_delivery_duration_in_days'] = $planned_delivery_duration_in_days;

        return $this;
    }

    /**
     * Gets safety_supply_duration_in_days
     *
     * @return string|null
     */
    public function getSafetySupplyDurationInDays()
    {
        return $this->container['safety_supply_duration_in_days'];
    }

    /**
     * Sets safety_supply_duration_in_days
     *
     * @param string|null $safety_supply_duration_in_days Safety Time (in Workdays)
     *
     * @return self
     */
    public function setSafetySupplyDurationInDays($safety_supply_duration_in_days)
    {
        if (is_null($safety_supply_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable safety_supply_duration_in_days cannot be null');
        }
        if ((mb_strlen($safety_supply_duration_in_days) > 2)) {
            throw new \InvalidArgumentException('invalid length for $safety_supply_duration_in_days when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['safety_supply_duration_in_days'] = $safety_supply_duration_in_days;

        return $this;
    }

    /**
     * Gets planning_strategy_group
     *
     * @return string|null
     */
    public function getPlanningStrategyGroup()
    {
        return $this->container['planning_strategy_group'];
    }

    /**
     * Sets planning_strategy_group
     *
     * @param string|null $planning_strategy_group Planning Strategy Group
     *
     * @return self
     */
    public function setPlanningStrategyGroup($planning_strategy_group)
    {
        if (is_null($planning_strategy_group)) {
            throw new \InvalidArgumentException('non-nullable planning_strategy_group cannot be null');
        }
        if ((mb_strlen($planning_strategy_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $planning_strategy_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['planning_strategy_group'] = $planning_strategy_group;

        return $this;
    }

    /**
     * Gets total_replenishment_lead_time
     *
     * @return \BeLenka\SAP\ProductODV4\Model\TotReplLeadTime|null
     */
    public function getTotalReplenishmentLeadTime()
    {
        return $this->container['total_replenishment_lead_time'];
    }

    /**
     * Sets total_replenishment_lead_time
     *
     * @param \BeLenka\SAP\ProductODV4\Model\TotReplLeadTime|null $total_replenishment_lead_time total_replenishment_lead_time
     *
     * @return self
     */
    public function setTotalReplenishmentLeadTime($total_replenishment_lead_time)
    {
        if (is_null($total_replenishment_lead_time)) {
            throw new \InvalidArgumentException('non-nullable total_replenishment_lead_time cannot be null');
        }
        $this->container['total_replenishment_lead_time'] = $total_replenishment_lead_time;

        return $this;
    }

    /**
     * Gets procurement_type
     *
     * @return string|null
     */
    public function getProcurementType()
    {
        return $this->container['procurement_type'];
    }

    /**
     * Sets procurement_type
     *
     * @param string|null $procurement_type procurement_type
     *
     * @return self
     */
    public function setProcurementType($procurement_type)
    {
        if (is_null($procurement_type)) {
            throw new \InvalidArgumentException('non-nullable procurement_type cannot be null');
        }
        if ((mb_strlen($procurement_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $procurement_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['procurement_type'] = $procurement_type;

        return $this;
    }

    /**
     * Gets procurement_sub_type
     *
     * @return string|null
     */
    public function getProcurementSubType()
    {
        return $this->container['procurement_sub_type'];
    }

    /**
     * Sets procurement_sub_type
     *
     * @param string|null $procurement_sub_type Special Procurement Type
     *
     * @return self
     */
    public function setProcurementSubType($procurement_sub_type)
    {
        if (is_null($procurement_sub_type)) {
            throw new \InvalidArgumentException('non-nullable procurement_sub_type cannot be null');
        }
        if ((mb_strlen($procurement_sub_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $procurement_sub_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['procurement_sub_type'] = $procurement_sub_type;

        return $this;
    }

    /**
     * Gets assembly_scrap_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\AssemblyScrap|null
     */
    public function getAssemblyScrapPercent()
    {
        return $this->container['assembly_scrap_percent'];
    }

    /**
     * Sets assembly_scrap_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\AssemblyScrap|null $assembly_scrap_percent assembly_scrap_percent
     *
     * @return self
     */
    public function setAssemblyScrapPercent($assembly_scrap_percent)
    {
        if (is_null($assembly_scrap_percent)) {
            throw new \InvalidArgumentException('non-nullable assembly_scrap_percent cannot be null');
        }
        $this->container['assembly_scrap_percent'] = $assembly_scrap_percent;

        return $this;
    }

    /**
     * Gets availability_check_type
     *
     * @return string|null
     */
    public function getAvailabilityCheckType()
    {
        return $this->container['availability_check_type'];
    }

    /**
     * Sets availability_check_type
     *
     * @param string|null $availability_check_type Checking Group for Availability Check
     *
     * @return self
     */
    public function setAvailabilityCheckType($availability_check_type)
    {
        if (is_null($availability_check_type)) {
            throw new \InvalidArgumentException('non-nullable availability_check_type cannot be null');
        }
        if ((mb_strlen($availability_check_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $availability_check_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['availability_check_type'] = $availability_check_type;

        return $this;
    }

    /**
     * Gets goods_receipt_duration
     *
     * @return \BeLenka\SAP\ProductODV4\Model\GRProcessingTime|null
     */
    public function getGoodsReceiptDuration()
    {
        return $this->container['goods_receipt_duration'];
    }

    /**
     * Sets goods_receipt_duration
     *
     * @param \BeLenka\SAP\ProductODV4\Model\GRProcessingTime|null $goods_receipt_duration goods_receipt_duration
     *
     * @return self
     */
    public function setGoodsReceiptDuration($goods_receipt_duration)
    {
        if (is_null($goods_receipt_duration)) {
            throw new \InvalidArgumentException('non-nullable goods_receipt_duration cannot be null');
        }
        $this->container['goods_receipt_duration'] = $goods_receipt_duration;

        return $this;
    }

    /**
     * Gets plan_and_order_day_determination
     *
     * @return string|null
     */
    public function getPlanAndOrderDayDetermination()
    {
        return $this->container['plan_and_order_day_determination'];
    }

    /**
     * Sets plan_and_order_day_determination
     *
     * @param string|null $plan_and_order_day_determination plan_and_order_day_determination
     *
     * @return self
     */
    public function setPlanAndOrderDayDetermination($plan_and_order_day_determination)
    {
        if (is_null($plan_and_order_day_determination)) {
            throw new \InvalidArgumentException('non-nullable plan_and_order_day_determination cannot be null');
        }
        if ((mb_strlen($plan_and_order_day_determination) > 3)) {
            throw new \InvalidArgumentException('invalid length for $plan_and_order_day_determination when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['plan_and_order_day_determination'] = $plan_and_order_day_determination;

        return $this;
    }

    /**
     * Gets rounding_profile
     *
     * @return string|null
     */
    public function getRoundingProfile()
    {
        return $this->container['rounding_profile'];
    }

    /**
     * Sets rounding_profile
     *
     * @param string|null $rounding_profile rounding_profile
     *
     * @return self
     */
    public function setRoundingProfile($rounding_profile)
    {
        if (is_null($rounding_profile)) {
            throw new \InvalidArgumentException('non-nullable rounding_profile cannot be null');
        }
        if ((mb_strlen($rounding_profile) > 4)) {
            throw new \InvalidArgumentException('invalid length for $rounding_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['rounding_profile'] = $rounding_profile;

        return $this;
    }

    /**
     * Gets dflt_storage_location_ext_procmt
     *
     * @return string|null
     */
    public function getDfltStorageLocationExtProcmt()
    {
        return $this->container['dflt_storage_location_ext_procmt'];
    }

    /**
     * Sets dflt_storage_location_ext_procmt
     *
     * @param string|null $dflt_storage_location_ext_procmt Default Storage Location for External Procurement
     *
     * @return self
     */
    public function setDfltStorageLocationExtProcmt($dflt_storage_location_ext_procmt)
    {
        if (is_null($dflt_storage_location_ext_procmt)) {
            throw new \InvalidArgumentException('non-nullable dflt_storage_location_ext_procmt cannot be null');
        }
        if ((mb_strlen($dflt_storage_location_ext_procmt) > 4)) {
            throw new \InvalidArgumentException('invalid length for $dflt_storage_location_ext_procmt when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['dflt_storage_location_ext_procmt'] = $dflt_storage_location_ext_procmt;

        return $this;
    }

    /**
     * Gets mrp_group
     *
     * @return string|null
     */
    public function getMrpGroup()
    {
        return $this->container['mrp_group'];
    }

    /**
     * Sets mrp_group
     *
     * @param string|null $mrp_group mrp_group
     *
     * @return self
     */
    public function setMrpGroup($mrp_group)
    {
        if (is_null($mrp_group)) {
            throw new \InvalidArgumentException('non-nullable mrp_group cannot be null');
        }
        if ((mb_strlen($mrp_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $mrp_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['mrp_group'] = $mrp_group;

        return $this;
    }

    /**
     * Gets lot_size_independent_costs
     *
     * @return \BeLenka\SAP\ProductODV4\Model\LSIndependentCosts|null
     */
    public function getLotSizeIndependentCosts()
    {
        return $this->container['lot_size_independent_costs'];
    }

    /**
     * Sets lot_size_independent_costs
     *
     * @param \BeLenka\SAP\ProductODV4\Model\LSIndependentCosts|null $lot_size_independent_costs lot_size_independent_costs
     *
     * @return self
     */
    public function setLotSizeIndependentCosts($lot_size_independent_costs)
    {
        if (is_null($lot_size_independent_costs)) {
            throw new \InvalidArgumentException('non-nullable lot_size_independent_costs cannot be null');
        }
        $this->container['lot_size_independent_costs'] = $lot_size_independent_costs;

        return $this;
    }

    /**
     * Gets rqmt_qty_rcpt_takt_tme_in_wrkg_days
     *
     * @return \BeLenka\SAP\ProductODV4\Model\TaktTime|null
     */
    public function getRqmtQtyRcptTaktTmeInWrkgDays()
    {
        return $this->container['rqmt_qty_rcpt_takt_tme_in_wrkg_days'];
    }

    /**
     * Sets rqmt_qty_rcpt_takt_tme_in_wrkg_days
     *
     * @param \BeLenka\SAP\ProductODV4\Model\TaktTime|null $rqmt_qty_rcpt_takt_tme_in_wrkg_days rqmt_qty_rcpt_takt_tme_in_wrkg_days
     *
     * @return self
     */
    public function setRqmtQtyRcptTaktTmeInWrkgDays($rqmt_qty_rcpt_takt_tme_in_wrkg_days)
    {
        if (is_null($rqmt_qty_rcpt_takt_tme_in_wrkg_days)) {
            throw new \InvalidArgumentException('non-nullable rqmt_qty_rcpt_takt_tme_in_wrkg_days cannot be null');
        }
        $this->container['rqmt_qty_rcpt_takt_tme_in_wrkg_days'] = $rqmt_qty_rcpt_takt_tme_in_wrkg_days;

        return $this;
    }

    /**
     * Gets mrp_planning_calendar
     *
     * @return string|null
     */
    public function getMrpPlanningCalendar()
    {
        return $this->container['mrp_planning_calendar'];
    }

    /**
     * Sets mrp_planning_calendar
     *
     * @param string|null $mrp_planning_calendar mrp_planning_calendar
     *
     * @return self
     */
    public function setMrpPlanningCalendar($mrp_planning_calendar)
    {
        if (is_null($mrp_planning_calendar)) {
            throw new \InvalidArgumentException('non-nullable mrp_planning_calendar cannot be null');
        }
        if ((mb_strlen($mrp_planning_calendar) > 3)) {
            throw new \InvalidArgumentException('invalid length for $mrp_planning_calendar when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['mrp_planning_calendar'] = $mrp_planning_calendar;

        return $this;
    }

    /**
     * Gets range_of_cvrg_prfl_code
     *
     * @return string|null
     */
    public function getRangeOfCvrgPrflCode()
    {
        return $this->container['range_of_cvrg_prfl_code'];
    }

    /**
     * Sets range_of_cvrg_prfl_code
     *
     * @param string|null $range_of_cvrg_prfl_code Range-of-Coverage Profile
     *
     * @return self
     */
    public function setRangeOfCvrgPrflCode($range_of_cvrg_prfl_code)
    {
        if (is_null($range_of_cvrg_prfl_code)) {
            throw new \InvalidArgumentException('non-nullable range_of_cvrg_prfl_code cannot be null');
        }
        if ((mb_strlen($range_of_cvrg_prfl_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $range_of_cvrg_prfl_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['range_of_cvrg_prfl_code'] = $range_of_cvrg_prfl_code;

        return $this;
    }

    /**
     * Gets product_safety_time_mrp_relevance
     *
     * @return string|null
     */
    public function getProductSafetyTimeMrpRelevance()
    {
        return $this->container['product_safety_time_mrp_relevance'];
    }

    /**
     * Sets product_safety_time_mrp_relevance
     *
     * @param string|null $product_safety_time_mrp_relevance Safety Time Indicator (with or Without Safety Time)
     *
     * @return self
     */
    public function setProductSafetyTimeMrpRelevance($product_safety_time_mrp_relevance)
    {
        if (is_null($product_safety_time_mrp_relevance)) {
            throw new \InvalidArgumentException('non-nullable product_safety_time_mrp_relevance cannot be null');
        }
        if ((mb_strlen($product_safety_time_mrp_relevance) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_safety_time_mrp_relevance when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_safety_time_mrp_relevance'] = $product_safety_time_mrp_relevance;

        return $this;
    }

    /**
     * Gets safety_time_period_profile
     *
     * @return string|null
     */
    public function getSafetyTimePeriodProfile()
    {
        return $this->container['safety_time_period_profile'];
    }

    /**
     * Sets safety_time_period_profile
     *
     * @param string|null $safety_time_period_profile Period Profile for Safety Time
     *
     * @return self
     */
    public function setSafetyTimePeriodProfile($safety_time_period_profile)
    {
        if (is_null($safety_time_period_profile)) {
            throw new \InvalidArgumentException('non-nullable safety_time_period_profile cannot be null');
        }
        if ((mb_strlen($safety_time_period_profile) > 3)) {
            throw new \InvalidArgumentException('invalid length for $safety_time_period_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['safety_time_period_profile'] = $safety_time_period_profile;

        return $this;
    }

    /**
     * Gets dependent_rqmt_mrp_relevance
     *
     * @return string|null
     */
    public function getDependentRqmtMrpRelevance()
    {
        return $this->container['dependent_rqmt_mrp_relevance'];
    }

    /**
     * Sets dependent_rqmt_mrp_relevance
     *
     * @param string|null $dependent_rqmt_mrp_relevance MRP relevancy for dependent requirements
     *
     * @return self
     */
    public function setDependentRqmtMrpRelevance($dependent_rqmt_mrp_relevance)
    {
        if (is_null($dependent_rqmt_mrp_relevance)) {
            throw new \InvalidArgumentException('non-nullable dependent_rqmt_mrp_relevance cannot be null');
        }
        if ((mb_strlen($dependent_rqmt_mrp_relevance) > 1)) {
            throw new \InvalidArgumentException('invalid length for $dependent_rqmt_mrp_relevance when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['dependent_rqmt_mrp_relevance'] = $dependent_rqmt_mrp_relevance;

        return $this;
    }

    /**
     * Gets product_service_level_in_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ServiceLevel|null
     */
    public function getProductServiceLevelInPercent()
    {
        return $this->container['product_service_level_in_percent'];
    }

    /**
     * Sets product_service_level_in_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ServiceLevel|null $product_service_level_in_percent product_service_level_in_percent
     *
     * @return self
     */
    public function setProductServiceLevelInPercent($product_service_level_in_percent)
    {
        if (is_null($product_service_level_in_percent)) {
            throw new \InvalidArgumentException('non-nullable product_service_level_in_percent cannot be null');
        }
        $this->container['product_service_level_in_percent'] = $product_service_level_in_percent;

        return $this;
    }

    /**
     * Gets prod_inh_prodn_duration_in_work_days
     *
     * @return \BeLenka\SAP\ProductODV4\Model\InHouseProduction|null
     */
    public function getProdInhProdnDurationInWorkDays()
    {
        return $this->container['prod_inh_prodn_duration_in_work_days'];
    }

    /**
     * Sets prod_inh_prodn_duration_in_work_days
     *
     * @param \BeLenka\SAP\ProductODV4\Model\InHouseProduction|null $prod_inh_prodn_duration_in_work_days prod_inh_prodn_duration_in_work_days
     *
     * @return self
     */
    public function setProdInhProdnDurationInWorkDays($prod_inh_prodn_duration_in_work_days)
    {
        if (is_null($prod_inh_prodn_duration_in_work_days)) {
            throw new \InvalidArgumentException('non-nullable prod_inh_prodn_duration_in_work_days cannot be null');
        }
        $this->container['prod_inh_prodn_duration_in_work_days'] = $prod_inh_prodn_duration_in_work_days;

        return $this;
    }

    /**
     * Gets mrp_availability_type
     *
     * @return string|null
     */
    public function getMrpAvailabilityType()
    {
        return $this->container['mrp_availability_type'];
    }

    /**
     * Sets mrp_availability_type
     *
     * @param string|null $mrp_availability_type Mixed MRP indicator
     *
     * @return self
     */
    public function setMrpAvailabilityType($mrp_availability_type)
    {
        if (is_null($mrp_availability_type)) {
            throw new \InvalidArgumentException('non-nullable mrp_availability_type cannot be null');
        }
        if ((mb_strlen($mrp_availability_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $mrp_availability_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['mrp_availability_type'] = $mrp_availability_type;

        return $this;
    }

    /**
     * Gets cross_project_product
     *
     * @return string|null
     */
    public function getCrossProjectProduct()
    {
        return $this->container['cross_project_product'];
    }

    /**
     * Sets cross_project_product
     *
     * @param string|null $cross_project_product Indicator for Cross-Project Material
     *
     * @return self
     */
    public function setCrossProjectProduct($cross_project_product)
    {
        if (is_null($cross_project_product)) {
            throw new \InvalidArgumentException('non-nullable cross_project_product cannot be null');
        }
        if ((mb_strlen($cross_project_product) > 1)) {
            throw new \InvalidArgumentException('invalid length for $cross_project_product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['cross_project_product'] = $cross_project_product;

        return $this;
    }

    /**
     * Gets storage_costs_percentage_code
     *
     * @return string|null
     */
    public function getStorageCostsPercentageCode()
    {
        return $this->container['storage_costs_percentage_code'];
    }

    /**
     * Sets storage_costs_percentage_code
     *
     * @param string|null $storage_costs_percentage_code Storage Costs Percentage Code
     *
     * @return self
     */
    public function setStorageCostsPercentageCode($storage_costs_percentage_code)
    {
        if (is_null($storage_costs_percentage_code)) {
            throw new \InvalidArgumentException('non-nullable storage_costs_percentage_code cannot be null');
        }
        if ((mb_strlen($storage_costs_percentage_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $storage_costs_percentage_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['storage_costs_percentage_code'] = $storage_costs_percentage_code;

        return $this;
    }

    /**
     * Gets follow_up_product
     *
     * @return string|null
     */
    public function getFollowUpProduct()
    {
        return $this->container['follow_up_product'];
    }

    /**
     * Sets follow_up_product
     *
     * @param string|null $follow_up_product follow_up_product
     *
     * @return self
     */
    public function setFollowUpProduct($follow_up_product)
    {
        if (is_null($follow_up_product)) {
            throw new \InvalidArgumentException('non-nullable follow_up_product cannot be null');
        }
        if ((mb_strlen($follow_up_product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $follow_up_product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 18.');
        }

        $this->container['follow_up_product'] = $follow_up_product;

        return $this;
    }

    /**
     * Gets repetitive_manufacturing_is_allwd
     *
     * @return bool|null
     */
    public function getRepetitiveManufacturingIsAllwd()
    {
        return $this->container['repetitive_manufacturing_is_allwd'];
    }

    /**
     * Sets repetitive_manufacturing_is_allwd
     *
     * @param bool|null $repetitive_manufacturing_is_allwd repetitive_manufacturing_is_allwd
     *
     * @return self
     */
    public function setRepetitiveManufacturingIsAllwd($repetitive_manufacturing_is_allwd)
    {
        if (is_null($repetitive_manufacturing_is_allwd)) {
            throw new \InvalidArgumentException('non-nullable repetitive_manufacturing_is_allwd cannot be null');
        }
        $this->container['repetitive_manufacturing_is_allwd'] = $repetitive_manufacturing_is_allwd;

        return $this;
    }

    /**
     * Gets dependent_requirements_type
     *
     * @return string|null
     */
    public function getDependentRequirementsType()
    {
        return $this->container['dependent_requirements_type'];
    }

    /**
     * Sets dependent_requirements_type
     *
     * @param string|null $dependent_requirements_type Indicator for Individual and Collective Requirements
     *
     * @return self
     */
    public function setDependentRequirementsType($dependent_requirements_type)
    {
        if (is_null($dependent_requirements_type)) {
            throw new \InvalidArgumentException('non-nullable dependent_requirements_type cannot be null');
        }
        if ((mb_strlen($dependent_requirements_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $dependent_requirements_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['dependent_requirements_type'] = $dependent_requirements_type;

        return $this;
    }

    /**
     * Gets product_is_bulk_component
     *
     * @return bool|null
     */
    public function getProductIsBulkComponent()
    {
        return $this->container['product_is_bulk_component'];
    }

    /**
     * Sets product_is_bulk_component
     *
     * @param bool|null $product_is_bulk_component Indicator: Bulk Material
     *
     * @return self
     */
    public function setProductIsBulkComponent($product_is_bulk_component)
    {
        if (is_null($product_is_bulk_component)) {
            throw new \InvalidArgumentException('non-nullable product_is_bulk_component cannot be null');
        }
        $this->container['product_is_bulk_component'] = $product_is_bulk_component;

        return $this;
    }

    /**
     * Gets repetitive_manufacturing_profile
     *
     * @return string|null
     */
    public function getRepetitiveManufacturingProfile()
    {
        return $this->container['repetitive_manufacturing_profile'];
    }

    /**
     * Sets repetitive_manufacturing_profile
     *
     * @param string|null $repetitive_manufacturing_profile repetitive_manufacturing_profile
     *
     * @return self
     */
    public function setRepetitiveManufacturingProfile($repetitive_manufacturing_profile)
    {
        if (is_null($repetitive_manufacturing_profile)) {
            throw new \InvalidArgumentException('non-nullable repetitive_manufacturing_profile cannot be null');
        }
        if ((mb_strlen($repetitive_manufacturing_profile) > 4)) {
            throw new \InvalidArgumentException('invalid length for $repetitive_manufacturing_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['repetitive_manufacturing_profile'] = $repetitive_manufacturing_profile;

        return $this;
    }

    /**
     * Gets backward_cnsmpn_period_in_work_days
     *
     * @return string|null
     */
    public function getBackwardCnsmpnPeriodInWorkDays()
    {
        return $this->container['backward_cnsmpn_period_in_work_days'];
    }

    /**
     * Sets backward_cnsmpn_period_in_work_days
     *
     * @param string|null $backward_cnsmpn_period_in_work_days Consumption Period: Backward
     *
     * @return self
     */
    public function setBackwardCnsmpnPeriodInWorkDays($backward_cnsmpn_period_in_work_days)
    {
        if (is_null($backward_cnsmpn_period_in_work_days)) {
            throw new \InvalidArgumentException('non-nullable backward_cnsmpn_period_in_work_days cannot be null');
        }
        if ((mb_strlen($backward_cnsmpn_period_in_work_days) > 3)) {
            throw new \InvalidArgumentException('invalid length for $backward_cnsmpn_period_in_work_days when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['backward_cnsmpn_period_in_work_days'] = $backward_cnsmpn_period_in_work_days;

        return $this;
    }

    /**
     * Gets fwd_consumption_period_in_work_days
     *
     * @return string|null
     */
    public function getFwdConsumptionPeriodInWorkDays()
    {
        return $this->container['fwd_consumption_period_in_work_days'];
    }

    /**
     * Sets fwd_consumption_period_in_work_days
     *
     * @param string|null $fwd_consumption_period_in_work_days Consumption period: Forward
     *
     * @return self
     */
    public function setFwdConsumptionPeriodInWorkDays($fwd_consumption_period_in_work_days)
    {
        if (is_null($fwd_consumption_period_in_work_days)) {
            throw new \InvalidArgumentException('non-nullable fwd_consumption_period_in_work_days cannot be null');
        }
        if ((mb_strlen($fwd_consumption_period_in_work_days) > 3)) {
            throw new \InvalidArgumentException('invalid length for $fwd_consumption_period_in_work_days when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['fwd_consumption_period_in_work_days'] = $fwd_consumption_period_in_work_days;

        return $this;
    }

    /**
     * Gets prod_rqmts_consumption_mode
     *
     * @return string|null
     */
    public function getProdRqmtsConsumptionMode()
    {
        return $this->container['prod_rqmts_consumption_mode'];
    }

    /**
     * Sets prod_rqmts_consumption_mode
     *
     * @param string|null $prod_rqmts_consumption_mode prod_rqmts_consumption_mode
     *
     * @return self
     */
    public function setProdRqmtsConsumptionMode($prod_rqmts_consumption_mode)
    {
        if (is_null($prod_rqmts_consumption_mode)) {
            throw new \InvalidArgumentException('non-nullable prod_rqmts_consumption_mode cannot be null');
        }
        if ((mb_strlen($prod_rqmts_consumption_mode) > 1)) {
            throw new \InvalidArgumentException('invalid length for $prod_rqmts_consumption_mode when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['prod_rqmts_consumption_mode'] = $prod_rqmts_consumption_mode;

        return $this;
    }

    /**
     * Gets prod_fcst_requirements_split_code
     *
     * @return string|null
     */
    public function getProdFcstRequirementsSplitCode()
    {
        return $this->container['prod_fcst_requirements_split_code'];
    }

    /**
     * Sets prod_fcst_requirements_split_code
     *
     * @param string|null $prod_fcst_requirements_split_code prod_fcst_requirements_split_code
     *
     * @return self
     */
    public function setProdFcstRequirementsSplitCode($prod_fcst_requirements_split_code)
    {
        if (is_null($prod_fcst_requirements_split_code)) {
            throw new \InvalidArgumentException('non-nullable prod_fcst_requirements_split_code cannot be null');
        }
        if ((mb_strlen($prod_fcst_requirements_split_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $prod_fcst_requirements_split_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['prod_fcst_requirements_split_code'] = $prod_fcst_requirements_split_code;

        return $this;
    }

    /**
     * Gets effective_out_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveOutDate()
    {
        return $this->container['effective_out_date'];
    }

    /**
     * Sets effective_out_date
     *
     * @param \DateTime|null $effective_out_date effective_out_date
     *
     * @return self
     */
    public function setEffectiveOutDate($effective_out_date)
    {
        if (is_null($effective_out_date)) {
            array_push($this->openAPINullablesSetToNull, 'effective_out_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effective_out_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effective_out_date'] = $effective_out_date;

        return $this;
    }

    /**
     * Gets scheduling_float_profile
     *
     * @return string|null
     */
    public function getSchedulingFloatProfile()
    {
        return $this->container['scheduling_float_profile'];
    }

    /**
     * Sets scheduling_float_profile
     *
     * @param string|null $scheduling_float_profile Scheduling Profile for Floats
     *
     * @return self
     */
    public function setSchedulingFloatProfile($scheduling_float_profile)
    {
        if (is_null($scheduling_float_profile)) {
            throw new \InvalidArgumentException('non-nullable scheduling_float_profile cannot be null');
        }
        if ((mb_strlen($scheduling_float_profile) > 3)) {
            throw new \InvalidArgumentException('invalid length for $scheduling_float_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['scheduling_float_profile'] = $scheduling_float_profile;

        return $this;
    }

    /**
     * Gets component_scrap_in_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComponentScrap|null
     */
    public function getComponentScrapInPercent()
    {
        return $this->container['component_scrap_in_percent'];
    }

    /**
     * Sets component_scrap_in_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComponentScrap|null $component_scrap_in_percent component_scrap_in_percent
     *
     * @return self
     */
    public function setComponentScrapInPercent($component_scrap_in_percent)
    {
        if (is_null($component_scrap_in_percent)) {
            throw new \InvalidArgumentException('non-nullable component_scrap_in_percent cannot be null');
        }
        $this->container['component_scrap_in_percent'] = $component_scrap_in_percent;

        return $this;
    }

    /**
     * Gets product_discontinuation_code
     *
     * @return string|null
     */
    public function getProductDiscontinuationCode()
    {
        return $this->container['product_discontinuation_code'];
    }

    /**
     * Sets product_discontinuation_code
     *
     * @param string|null $product_discontinuation_code Discontinuation indicator
     *
     * @return self
     */
    public function setProductDiscontinuationCode($product_discontinuation_code)
    {
        if (is_null($product_discontinuation_code)) {
            throw new \InvalidArgumentException('non-nullable product_discontinuation_code cannot be null');
        }
        if ((mb_strlen($product_discontinuation_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_discontinuation_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_discontinuation_code'] = $product_discontinuation_code;

        return $this;
    }

    /**
     * Gets product_requirements_grouping
     *
     * @return string|null
     */
    public function getProductRequirementsGrouping()
    {
        return $this->container['product_requirements_grouping'];
    }

    /**
     * Sets product_requirements_grouping
     *
     * @param string|null $product_requirements_grouping Indicator for Requirements Grouping
     *
     * @return self
     */
    public function setProductRequirementsGrouping($product_requirements_grouping)
    {
        if (is_null($product_requirements_grouping)) {
            throw new \InvalidArgumentException('non-nullable product_requirements_grouping cannot be null');
        }
        if ((mb_strlen($product_requirements_grouping) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_requirements_grouping when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_requirements_grouping'] = $product_requirements_grouping;

        return $this;
    }

    /**
     * Gets production_invtry_managed_loc
     *
     * @return string|null
     */
    public function getProductionInvtryManagedLoc()
    {
        return $this->container['production_invtry_managed_loc'];
    }

    /**
     * Sets production_invtry_managed_loc
     *
     * @param string|null $production_invtry_managed_loc Issue Storage Location
     *
     * @return self
     */
    public function setProductionInvtryManagedLoc($production_invtry_managed_loc)
    {
        if (is_null($production_invtry_managed_loc)) {
            throw new \InvalidArgumentException('non-nullable production_invtry_managed_loc cannot be null');
        }
        if ((mb_strlen($production_invtry_managed_loc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $production_invtry_managed_loc when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['production_invtry_managed_loc'] = $production_invtry_managed_loc;

        return $this;
    }

    /**
     * Gets product_component_backflush_code
     *
     * @return string|null
     */
    public function getProductComponentBackflushCode()
    {
        return $this->container['product_component_backflush_code'];
    }

    /**
     * Sets product_component_backflush_code
     *
     * @param string|null $product_component_backflush_code Indicator: Backflush
     *
     * @return self
     */
    public function setProductComponentBackflushCode($product_component_backflush_code)
    {
        if (is_null($product_component_backflush_code)) {
            throw new \InvalidArgumentException('non-nullable product_component_backflush_code cannot be null');
        }
        if ((mb_strlen($product_component_backflush_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_component_backflush_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_component_backflush_code'] = $product_component_backflush_code;

        return $this;
    }

    /**
     * Gets proposed_product_supply_area
     *
     * @return string|null
     */
    public function getProposedProductSupplyArea()
    {
        return $this->container['proposed_product_supply_area'];
    }

    /**
     * Sets proposed_product_supply_area
     *
     * @param string|null $proposed_product_supply_area Proposed Supply Area in Material Master Record
     *
     * @return self
     */
    public function setProposedProductSupplyArea($proposed_product_supply_area)
    {
        if (is_null($proposed_product_supply_area)) {
            throw new \InvalidArgumentException('non-nullable proposed_product_supply_area cannot be null');
        }
        if ((mb_strlen($proposed_product_supply_area) > 10)) {
            throw new \InvalidArgumentException('invalid length for $proposed_product_supply_area when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['proposed_product_supply_area'] = $proposed_product_supply_area;

        return $this;
    }

    /**
     * Gets mrp_safety_stock_method
     *
     * @return string|null
     */
    public function getMrpSafetyStockMethod()
    {
        return $this->container['mrp_safety_stock_method'];
    }

    /**
     * Sets mrp_safety_stock_method
     *
     * @param string|null $mrp_safety_stock_method MRP Safety Stock Method
     *
     * @return self
     */
    public function setMrpSafetyStockMethod($mrp_safety_stock_method)
    {
        if (is_null($mrp_safety_stock_method)) {
            throw new \InvalidArgumentException('non-nullable mrp_safety_stock_method cannot be null');
        }
        if ((mb_strlen($mrp_safety_stock_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mrp_safety_stock_method when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['mrp_safety_stock_method'] = $mrp_safety_stock_method;

        return $this;
    }

    /**
     * Gets jit_prodn_conf_profile
     *
     * @return string|null
     */
    public function getJitProdnConfProfile()
    {
        return $this->container['jit_prodn_conf_profile'];
    }

    /**
     * Sets jit_prodn_conf_profile
     *
     * @param string|null $jit_prodn_conf_profile jit_prodn_conf_profile
     *
     * @return self
     */
    public function setJitProdnConfProfile($jit_prodn_conf_profile)
    {
        if (is_null($jit_prodn_conf_profile)) {
            throw new \InvalidArgumentException('non-nullable jit_prodn_conf_profile cannot be null');
        }
        if ((mb_strlen($jit_prodn_conf_profile) > 4)) {
            throw new \InvalidArgumentException('invalid length for $jit_prodn_conf_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['jit_prodn_conf_profile'] = $jit_prodn_conf_profile;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency Key
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets prodn_plng_and_control_calendar
     *
     * @return string|null
     */
    public function getProdnPlngAndControlCalendar()
    {
        return $this->container['prodn_plng_and_control_calendar'];
    }

    /**
     * Sets prodn_plng_and_control_calendar
     *
     * @param string|null $prodn_plng_and_control_calendar prodn_plng_and_control_calendar
     *
     * @return self
     */
    public function setProdnPlngAndControlCalendar($prodn_plng_and_control_calendar)
    {
        if (is_null($prodn_plng_and_control_calendar)) {
            throw new \InvalidArgumentException('non-nullable prodn_plng_and_control_calendar cannot be null');
        }
        if ((mb_strlen($prodn_plng_and_control_calendar) > 3)) {
            throw new \InvalidArgumentException('invalid length for $prodn_plng_and_control_calendar when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['prodn_plng_and_control_calendar'] = $prodn_plng_and_control_calendar;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets consignment_control
     *
     * @return string|null
     */
    public function getConsignmentControl()
    {
        return $this->container['consignment_control'];
    }

    /**
     * Sets consignment_control
     *
     * @param string|null $consignment_control Consignment Control
     *
     * @return self
     */
    public function setConsignmentControl($consignment_control)
    {
        if (is_null($consignment_control)) {
            throw new \InvalidArgumentException('non-nullable consignment_control cannot be null');
        }
        if ((mb_strlen($consignment_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $consignment_control when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['consignment_control'] = $consignment_control;

        return $this;
    }

    /**
     * Gets atp_check_horizon_in_days
     *
     * @return \BeLenka\SAP\ProductODV4\Model\AvailabilityCheckHorizon|null
     */
    public function getAtpCheckHorizonInDays()
    {
        return $this->container['atp_check_horizon_in_days'];
    }

    /**
     * Sets atp_check_horizon_in_days
     *
     * @param \BeLenka\SAP\ProductODV4\Model\AvailabilityCheckHorizon|null $atp_check_horizon_in_days atp_check_horizon_in_days
     *
     * @return self
     */
    public function setAtpCheckHorizonInDays($atp_check_horizon_in_days)
    {
        if (is_null($atp_check_horizon_in_days)) {
            throw new \InvalidArgumentException('non-nullable atp_check_horizon_in_days cannot be null');
        }
        $this->container['atp_check_horizon_in_days'] = $atp_check_horizon_in_days;

        return $this;
    }

    /**
     * Gets atp_check_horizon_factory_calendar
     *
     * @return string|null
     */
    public function getAtpCheckHorizonFactoryCalendar()
    {
        return $this->container['atp_check_horizon_factory_calendar'];
    }

    /**
     * Sets atp_check_horizon_factory_calendar
     *
     * @param string|null $atp_check_horizon_factory_calendar Calendar for Validating Availability Check Horizon
     *
     * @return self
     */
    public function setAtpCheckHorizonFactoryCalendar($atp_check_horizon_factory_calendar)
    {
        if (is_null($atp_check_horizon_factory_calendar)) {
            throw new \InvalidArgumentException('non-nullable atp_check_horizon_factory_calendar cannot be null');
        }
        if ((mb_strlen($atp_check_horizon_factory_calendar) > 2)) {
            throw new \InvalidArgumentException('invalid length for $atp_check_horizon_factory_calendar when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantSupplyPlanningTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['atp_check_horizon_factory_calendar'] = $atp_check_horizon_factory_calendar;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageCreate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageCreate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _product
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate|null
     */
    public function _getProduct()
    {
    return $this->container['_product'];
    }

    /**
     * Sets _product
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate|null $_product _product
     *
     * @return self
     */
    public function _setProduct($_product)
    {
        if (is_null($_product)) {
            throw new \InvalidArgumentException('non-nullable _product cannot be null');
        }
        $this->container['_product'] = $_product;

        return $this;
    }

    /**
     * Gets _product_plant
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate|null
     */
    public function _getProductPlant()
    {
    return $this->container['_product_plant'];
    }

    /**
     * Sets _product_plant
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate|null $_product_plant _product_plant
     *
     * @return self
     */
    public function _setProductPlant($_product_plant)
    {
        if (is_null($_product_plant)) {
            throw new \InvalidArgumentException('non-nullable _product_plant cannot be null');
        }
        $this->container['_product_plant'] = $_product_plant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


