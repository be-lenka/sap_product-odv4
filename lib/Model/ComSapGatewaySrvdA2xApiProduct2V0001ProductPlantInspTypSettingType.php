<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductPlantInspTypSetting_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inspection_lot_type' => 'string',
        'product' => 'string',
        'plant' => 'string',
        'insp_lot_is_task_list_required' => 'bool',
        'insp_lot_has_material_spec' => 'bool',
        'insp_lot_has_confign_specification' => 'bool',
        'insp_lot_has_batch_charc' => 'bool',
        'insp_lot_has_autom_spec_assgmt' => 'bool',
        'insp_lot_has_charc' => 'bool',
        'has_post_to_inspection_stock' => 'bool',
        'insp_lot_is_autom_usge_dcsn_possible' => 'bool',
        'sampling_procedure' => 'string',
        'insp_lot_dynamic_rule' => 'string',
        'insp_lot_sample_quantity_in_percent' => '\BeLenka\SAP\ProductODV4\Model\InspPercentage',
        'inspection_lot_is_full_inspection' => 'bool',
        'insp_lot_skip_is_allowed' => 'bool',
        'insp_lot_has_manual_sample_size' => 'bool',
        'insp_lot_is_smpl_calc_mnl_triggered' => 'bool',
        'insp_lot_is_serial_nmbr_possible' => 'bool',
        'insp_lot_duration_in_days' => '\BeLenka\SAP\ProductODV4\Model\AvgInspDuration',
        'insp_lot_summary_control' => 'string',
        'insp_quality_score_procedure' => 'string',
        'insp_lot_accepted_scrap_ratio_in_pct' => '\BeLenka\SAP\ProductODV4\Model\AllowedScrapShare',
        'inspection_lot_has_appraisal_costs' => 'bool',
        'quality_cost_collector' => 'string',
        'prod_insp_type_setting_is_active' => 'bool',
        'insp_type_is_prfrd' => 'bool',
        'insp_lot_has_handling_unit' => 'bool',
        'insp_lot_has_multiple_spec' => 'bool',
        'insp_lot_of_ewm_summary_control' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]',
        '_product' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
        '_product_plant' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inspection_lot_type' => null,
        'product' => null,
        'plant' => null,
        'insp_lot_is_task_list_required' => null,
        'insp_lot_has_material_spec' => null,
        'insp_lot_has_confign_specification' => null,
        'insp_lot_has_batch_charc' => null,
        'insp_lot_has_autom_spec_assgmt' => null,
        'insp_lot_has_charc' => null,
        'has_post_to_inspection_stock' => null,
        'insp_lot_is_autom_usge_dcsn_possible' => null,
        'sampling_procedure' => null,
        'insp_lot_dynamic_rule' => null,
        'insp_lot_sample_quantity_in_percent' => null,
        'inspection_lot_is_full_inspection' => null,
        'insp_lot_skip_is_allowed' => null,
        'insp_lot_has_manual_sample_size' => null,
        'insp_lot_is_smpl_calc_mnl_triggered' => null,
        'insp_lot_is_serial_nmbr_possible' => null,
        'insp_lot_duration_in_days' => null,
        'insp_lot_summary_control' => null,
        'insp_quality_score_procedure' => null,
        'insp_lot_accepted_scrap_ratio_in_pct' => null,
        'inspection_lot_has_appraisal_costs' => null,
        'quality_cost_collector' => null,
        'prod_insp_type_setting_is_active' => null,
        'insp_type_is_prfrd' => null,
        'insp_lot_has_handling_unit' => null,
        'insp_lot_has_multiple_spec' => null,
        'insp_lot_of_ewm_summary_control' => null,
        'sap__messages' => null,
        '_product' => null,
        '_product_plant' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inspection_lot_type' => false,
		'product' => false,
		'plant' => false,
		'insp_lot_is_task_list_required' => false,
		'insp_lot_has_material_spec' => false,
		'insp_lot_has_confign_specification' => false,
		'insp_lot_has_batch_charc' => false,
		'insp_lot_has_autom_spec_assgmt' => false,
		'insp_lot_has_charc' => false,
		'has_post_to_inspection_stock' => false,
		'insp_lot_is_autom_usge_dcsn_possible' => false,
		'sampling_procedure' => false,
		'insp_lot_dynamic_rule' => false,
		'insp_lot_sample_quantity_in_percent' => false,
		'inspection_lot_is_full_inspection' => false,
		'insp_lot_skip_is_allowed' => false,
		'insp_lot_has_manual_sample_size' => false,
		'insp_lot_is_smpl_calc_mnl_triggered' => false,
		'insp_lot_is_serial_nmbr_possible' => false,
		'insp_lot_duration_in_days' => false,
		'insp_lot_summary_control' => false,
		'insp_quality_score_procedure' => false,
		'insp_lot_accepted_scrap_ratio_in_pct' => false,
		'inspection_lot_has_appraisal_costs' => false,
		'quality_cost_collector' => false,
		'prod_insp_type_setting_is_active' => false,
		'insp_type_is_prfrd' => false,
		'insp_lot_has_handling_unit' => false,
		'insp_lot_has_multiple_spec' => false,
		'insp_lot_of_ewm_summary_control' => false,
		'sap__messages' => false,
		'_product' => false,
		'_product_plant' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inspection_lot_type' => 'InspectionLotType',
        'product' => 'Product',
        'plant' => 'Plant',
        'insp_lot_is_task_list_required' => 'InspLotIsTaskListRequired',
        'insp_lot_has_material_spec' => 'InspLotHasMaterialSpec',
        'insp_lot_has_confign_specification' => 'InspLotHasConfignSpecification',
        'insp_lot_has_batch_charc' => 'InspLotHasBatchCharc',
        'insp_lot_has_autom_spec_assgmt' => 'InspLotHasAutomSpecAssgmt',
        'insp_lot_has_charc' => 'InspLotHasCharc',
        'has_post_to_inspection_stock' => 'HasPostToInspectionStock',
        'insp_lot_is_autom_usge_dcsn_possible' => 'InspLotIsAutomUsgeDcsnPossible',
        'sampling_procedure' => 'SamplingProcedure',
        'insp_lot_dynamic_rule' => 'InspLotDynamicRule',
        'insp_lot_sample_quantity_in_percent' => 'InspLotSampleQuantityInPercent',
        'inspection_lot_is_full_inspection' => 'InspectionLotIsFullInspection',
        'insp_lot_skip_is_allowed' => 'InspLotSkipIsAllowed',
        'insp_lot_has_manual_sample_size' => 'InspLotHasManualSampleSize',
        'insp_lot_is_smpl_calc_mnl_triggered' => 'InspLotIsSmplCalcMnlTriggered',
        'insp_lot_is_serial_nmbr_possible' => 'InspLotIsSerialNmbrPossible',
        'insp_lot_duration_in_days' => 'InspLotDurationInDays',
        'insp_lot_summary_control' => 'InspLotSummaryControl',
        'insp_quality_score_procedure' => 'InspQualityScoreProcedure',
        'insp_lot_accepted_scrap_ratio_in_pct' => 'InspLotAcceptedScrapRatioInPct',
        'inspection_lot_has_appraisal_costs' => 'InspectionLotHasAppraisalCosts',
        'quality_cost_collector' => 'QualityCostCollector',
        'prod_insp_type_setting_is_active' => 'ProdInspTypeSettingIsActive',
        'insp_type_is_prfrd' => 'InspTypeIsPrfrd',
        'insp_lot_has_handling_unit' => 'InspLotHasHandlingUnit',
        'insp_lot_has_multiple_spec' => 'InspLotHasMultipleSpec',
        'insp_lot_of_ewm_summary_control' => 'InspLotOfEWMSummaryControl',
        'sap__messages' => 'SAP__Messages',
        '_product' => '_Product',
        '_product_plant' => '_ProductPlant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inspection_lot_type' => 'setInspectionLotType',
        'product' => 'setProduct',
        'plant' => 'setPlant',
        'insp_lot_is_task_list_required' => 'setInspLotIsTaskListRequired',
        'insp_lot_has_material_spec' => 'setInspLotHasMaterialSpec',
        'insp_lot_has_confign_specification' => 'setInspLotHasConfignSpecification',
        'insp_lot_has_batch_charc' => 'setInspLotHasBatchCharc',
        'insp_lot_has_autom_spec_assgmt' => 'setInspLotHasAutomSpecAssgmt',
        'insp_lot_has_charc' => 'setInspLotHasCharc',
        'has_post_to_inspection_stock' => 'setHasPostToInspectionStock',
        'insp_lot_is_autom_usge_dcsn_possible' => 'setInspLotIsAutomUsgeDcsnPossible',
        'sampling_procedure' => 'setSamplingProcedure',
        'insp_lot_dynamic_rule' => 'setInspLotDynamicRule',
        'insp_lot_sample_quantity_in_percent' => 'setInspLotSampleQuantityInPercent',
        'inspection_lot_is_full_inspection' => 'setInspectionLotIsFullInspection',
        'insp_lot_skip_is_allowed' => 'setInspLotSkipIsAllowed',
        'insp_lot_has_manual_sample_size' => 'setInspLotHasManualSampleSize',
        'insp_lot_is_smpl_calc_mnl_triggered' => 'setInspLotIsSmplCalcMnlTriggered',
        'insp_lot_is_serial_nmbr_possible' => 'setInspLotIsSerialNmbrPossible',
        'insp_lot_duration_in_days' => 'setInspLotDurationInDays',
        'insp_lot_summary_control' => 'setInspLotSummaryControl',
        'insp_quality_score_procedure' => 'setInspQualityScoreProcedure',
        'insp_lot_accepted_scrap_ratio_in_pct' => 'setInspLotAcceptedScrapRatioInPct',
        'inspection_lot_has_appraisal_costs' => 'setInspectionLotHasAppraisalCosts',
        'quality_cost_collector' => 'setQualityCostCollector',
        'prod_insp_type_setting_is_active' => 'setProdInspTypeSettingIsActive',
        'insp_type_is_prfrd' => 'setInspTypeIsPrfrd',
        'insp_lot_has_handling_unit' => 'setInspLotHasHandlingUnit',
        'insp_lot_has_multiple_spec' => 'setInspLotHasMultipleSpec',
        'insp_lot_of_ewm_summary_control' => 'setInspLotOfEwmSummaryControl',
        'sap__messages' => 'setSapMessages',
        '_product' => '_setProduct',
        '_product_plant' => '_setProductPlant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inspection_lot_type' => 'getInspectionLotType',
        'product' => 'getProduct',
        'plant' => 'getPlant',
        'insp_lot_is_task_list_required' => 'getInspLotIsTaskListRequired',
        'insp_lot_has_material_spec' => 'getInspLotHasMaterialSpec',
        'insp_lot_has_confign_specification' => 'getInspLotHasConfignSpecification',
        'insp_lot_has_batch_charc' => 'getInspLotHasBatchCharc',
        'insp_lot_has_autom_spec_assgmt' => 'getInspLotHasAutomSpecAssgmt',
        'insp_lot_has_charc' => 'getInspLotHasCharc',
        'has_post_to_inspection_stock' => 'getHasPostToInspectionStock',
        'insp_lot_is_autom_usge_dcsn_possible' => 'getInspLotIsAutomUsgeDcsnPossible',
        'sampling_procedure' => 'getSamplingProcedure',
        'insp_lot_dynamic_rule' => 'getInspLotDynamicRule',
        'insp_lot_sample_quantity_in_percent' => 'getInspLotSampleQuantityInPercent',
        'inspection_lot_is_full_inspection' => 'getInspectionLotIsFullInspection',
        'insp_lot_skip_is_allowed' => 'getInspLotSkipIsAllowed',
        'insp_lot_has_manual_sample_size' => 'getInspLotHasManualSampleSize',
        'insp_lot_is_smpl_calc_mnl_triggered' => 'getInspLotIsSmplCalcMnlTriggered',
        'insp_lot_is_serial_nmbr_possible' => 'getInspLotIsSerialNmbrPossible',
        'insp_lot_duration_in_days' => 'getInspLotDurationInDays',
        'insp_lot_summary_control' => 'getInspLotSummaryControl',
        'insp_quality_score_procedure' => 'getInspQualityScoreProcedure',
        'insp_lot_accepted_scrap_ratio_in_pct' => 'getInspLotAcceptedScrapRatioInPct',
        'inspection_lot_has_appraisal_costs' => 'getInspectionLotHasAppraisalCosts',
        'quality_cost_collector' => 'getQualityCostCollector',
        'prod_insp_type_setting_is_active' => 'getProdInspTypeSettingIsActive',
        'insp_type_is_prfrd' => 'getInspTypeIsPrfrd',
        'insp_lot_has_handling_unit' => 'getInspLotHasHandlingUnit',
        'insp_lot_has_multiple_spec' => 'getInspLotHasMultipleSpec',
        'insp_lot_of_ewm_summary_control' => 'getInspLotOfEwmSummaryControl',
        'sap__messages' => 'getSapMessages',
        '_product' => '_getProduct',
        '_product_plant' => '_getProductPlant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inspection_lot_type', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('insp_lot_is_task_list_required', $data ?? [], null);
        $this->setIfExists('insp_lot_has_material_spec', $data ?? [], null);
        $this->setIfExists('insp_lot_has_confign_specification', $data ?? [], null);
        $this->setIfExists('insp_lot_has_batch_charc', $data ?? [], null);
        $this->setIfExists('insp_lot_has_autom_spec_assgmt', $data ?? [], null);
        $this->setIfExists('insp_lot_has_charc', $data ?? [], null);
        $this->setIfExists('has_post_to_inspection_stock', $data ?? [], null);
        $this->setIfExists('insp_lot_is_autom_usge_dcsn_possible', $data ?? [], null);
        $this->setIfExists('sampling_procedure', $data ?? [], null);
        $this->setIfExists('insp_lot_dynamic_rule', $data ?? [], null);
        $this->setIfExists('insp_lot_sample_quantity_in_percent', $data ?? [], null);
        $this->setIfExists('inspection_lot_is_full_inspection', $data ?? [], null);
        $this->setIfExists('insp_lot_skip_is_allowed', $data ?? [], null);
        $this->setIfExists('insp_lot_has_manual_sample_size', $data ?? [], null);
        $this->setIfExists('insp_lot_is_smpl_calc_mnl_triggered', $data ?? [], null);
        $this->setIfExists('insp_lot_is_serial_nmbr_possible', $data ?? [], null);
        $this->setIfExists('insp_lot_duration_in_days', $data ?? [], null);
        $this->setIfExists('insp_lot_summary_control', $data ?? [], null);
        $this->setIfExists('insp_quality_score_procedure', $data ?? [], null);
        $this->setIfExists('insp_lot_accepted_scrap_ratio_in_pct', $data ?? [], null);
        $this->setIfExists('inspection_lot_has_appraisal_costs', $data ?? [], null);
        $this->setIfExists('quality_cost_collector', $data ?? [], null);
        $this->setIfExists('prod_insp_type_setting_is_active', $data ?? [], null);
        $this->setIfExists('insp_type_is_prfrd', $data ?? [], null);
        $this->setIfExists('insp_lot_has_handling_unit', $data ?? [], null);
        $this->setIfExists('insp_lot_has_multiple_spec', $data ?? [], null);
        $this->setIfExists('insp_lot_of_ewm_summary_control', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_product', $data ?? [], null);
        $this->setIfExists('_product_plant', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['inspection_lot_type']) && (mb_strlen($this->container['inspection_lot_type']) > 8)) {
            $invalidProperties[] = "invalid value for 'inspection_lot_type', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 18)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sampling_procedure']) && (mb_strlen($this->container['sampling_procedure']) > 8)) {
            $invalidProperties[] = "invalid value for 'sampling_procedure', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['insp_lot_dynamic_rule']) && (mb_strlen($this->container['insp_lot_dynamic_rule']) > 3)) {
            $invalidProperties[] = "invalid value for 'insp_lot_dynamic_rule', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['insp_lot_summary_control']) && (mb_strlen($this->container['insp_lot_summary_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'insp_lot_summary_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['insp_quality_score_procedure']) && (mb_strlen($this->container['insp_quality_score_procedure']) > 2)) {
            $invalidProperties[] = "invalid value for 'insp_quality_score_procedure', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['quality_cost_collector']) && (mb_strlen($this->container['quality_cost_collector']) > 12)) {
            $invalidProperties[] = "invalid value for 'quality_cost_collector', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['insp_lot_of_ewm_summary_control']) && (mb_strlen($this->container['insp_lot_of_ewm_summary_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'insp_lot_of_ewm_summary_control', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inspection_lot_type
     *
     * @return string|null
     */
    public function getInspectionLotType()
    {
        return $this->container['inspection_lot_type'];
    }

    /**
     * Sets inspection_lot_type
     *
     * @param string|null $inspection_lot_type inspection_lot_type
     *
     * @return self
     */
    public function setInspectionLotType($inspection_lot_type)
    {
        if (is_null($inspection_lot_type)) {
            throw new \InvalidArgumentException('non-nullable inspection_lot_type cannot be null');
        }
        if ((mb_strlen($inspection_lot_type) > 8)) {
            throw new \InvalidArgumentException('invalid length for $inspection_lot_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 8.');
        }

        $this->container['inspection_lot_type'] = $inspection_lot_type;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Material Number
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        if ((mb_strlen($product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 18.');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            throw new \InvalidArgumentException('non-nullable plant cannot be null');
        }
        if ((mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets insp_lot_is_task_list_required
     *
     * @return bool|null
     */
    public function getInspLotIsTaskListRequired()
    {
        return $this->container['insp_lot_is_task_list_required'];
    }

    /**
     * Sets insp_lot_is_task_list_required
     *
     * @param bool|null $insp_lot_is_task_list_required Inspection with Task List
     *
     * @return self
     */
    public function setInspLotIsTaskListRequired($insp_lot_is_task_list_required)
    {
        if (is_null($insp_lot_is_task_list_required)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_is_task_list_required cannot be null');
        }
        $this->container['insp_lot_is_task_list_required'] = $insp_lot_is_task_list_required;

        return $this;
    }

    /**
     * Gets insp_lot_has_material_spec
     *
     * @return bool|null
     */
    public function getInspLotHasMaterialSpec()
    {
        return $this->container['insp_lot_has_material_spec'];
    }

    /**
     * Sets insp_lot_has_material_spec
     *
     * @param bool|null $insp_lot_has_material_spec Inspect with Material Specification
     *
     * @return self
     */
    public function setInspLotHasMaterialSpec($insp_lot_has_material_spec)
    {
        if (is_null($insp_lot_has_material_spec)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_material_spec cannot be null');
        }
        $this->container['insp_lot_has_material_spec'] = $insp_lot_has_material_spec;

        return $this;
    }

    /**
     * Gets insp_lot_has_confign_specification
     *
     * @return bool|null
     */
    public function getInspLotHasConfignSpecification()
    {
        return $this->container['insp_lot_has_confign_specification'];
    }

    /**
     * Sets insp_lot_has_confign_specification
     *
     * @param bool|null $insp_lot_has_confign_specification Inspection Specifications from Configuration
     *
     * @return self
     */
    public function setInspLotHasConfignSpecification($insp_lot_has_confign_specification)
    {
        if (is_null($insp_lot_has_confign_specification)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_confign_specification cannot be null');
        }
        $this->container['insp_lot_has_confign_specification'] = $insp_lot_has_confign_specification;

        return $this;
    }

    /**
     * Gets insp_lot_has_batch_charc
     *
     * @return bool|null
     */
    public function getInspLotHasBatchCharc()
    {
        return $this->container['insp_lot_has_batch_charc'];
    }

    /**
     * Sets insp_lot_has_batch_charc
     *
     * @param bool|null $insp_lot_has_batch_charc Inspection Specifications from Batch Determination
     *
     * @return self
     */
    public function setInspLotHasBatchCharc($insp_lot_has_batch_charc)
    {
        if (is_null($insp_lot_has_batch_charc)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_batch_charc cannot be null');
        }
        $this->container['insp_lot_has_batch_charc'] = $insp_lot_has_batch_charc;

        return $this;
    }

    /**
     * Gets insp_lot_has_autom_spec_assgmt
     *
     * @return bool|null
     */
    public function getInspLotHasAutomSpecAssgmt()
    {
        return $this->container['insp_lot_has_autom_spec_assgmt'];
    }

    /**
     * Sets insp_lot_has_autom_spec_assgmt
     *
     * @param bool|null $insp_lot_has_autom_spec_assgmt Automatic Specification Assignment
     *
     * @return self
     */
    public function setInspLotHasAutomSpecAssgmt($insp_lot_has_autom_spec_assgmt)
    {
        if (is_null($insp_lot_has_autom_spec_assgmt)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_autom_spec_assgmt cannot be null');
        }
        $this->container['insp_lot_has_autom_spec_assgmt'] = $insp_lot_has_autom_spec_assgmt;

        return $this;
    }

    /**
     * Gets insp_lot_has_charc
     *
     * @return bool|null
     */
    public function getInspLotHasCharc()
    {
        return $this->container['insp_lot_has_charc'];
    }

    /**
     * Sets insp_lot_has_charc
     *
     * @param bool|null $insp_lot_has_charc Inspect by Characteristics
     *
     * @return self
     */
    public function setInspLotHasCharc($insp_lot_has_charc)
    {
        if (is_null($insp_lot_has_charc)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_charc cannot be null');
        }
        $this->container['insp_lot_has_charc'] = $insp_lot_has_charc;

        return $this;
    }

    /**
     * Gets has_post_to_inspection_stock
     *
     * @return bool|null
     */
    public function getHasPostToInspectionStock()
    {
        return $this->container['has_post_to_inspection_stock'];
    }

    /**
     * Sets has_post_to_inspection_stock
     *
     * @param bool|null $has_post_to_inspection_stock Post to Inspection Stock
     *
     * @return self
     */
    public function setHasPostToInspectionStock($has_post_to_inspection_stock)
    {
        if (is_null($has_post_to_inspection_stock)) {
            throw new \InvalidArgumentException('non-nullable has_post_to_inspection_stock cannot be null');
        }
        $this->container['has_post_to_inspection_stock'] = $has_post_to_inspection_stock;

        return $this;
    }

    /**
     * Gets insp_lot_is_autom_usge_dcsn_possible
     *
     * @return bool|null
     */
    public function getInspLotIsAutomUsgeDcsnPossible()
    {
        return $this->container['insp_lot_is_autom_usge_dcsn_possible'];
    }

    /**
     * Sets insp_lot_is_autom_usge_dcsn_possible
     *
     * @param bool|null $insp_lot_is_autom_usge_dcsn_possible Automatic Usage Decision Planned
     *
     * @return self
     */
    public function setInspLotIsAutomUsgeDcsnPossible($insp_lot_is_autom_usge_dcsn_possible)
    {
        if (is_null($insp_lot_is_autom_usge_dcsn_possible)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_is_autom_usge_dcsn_possible cannot be null');
        }
        $this->container['insp_lot_is_autom_usge_dcsn_possible'] = $insp_lot_is_autom_usge_dcsn_possible;

        return $this;
    }

    /**
     * Gets sampling_procedure
     *
     * @return string|null
     */
    public function getSamplingProcedure()
    {
        return $this->container['sampling_procedure'];
    }

    /**
     * Sets sampling_procedure
     *
     * @param string|null $sampling_procedure sampling_procedure
     *
     * @return self
     */
    public function setSamplingProcedure($sampling_procedure)
    {
        if (is_null($sampling_procedure)) {
            throw new \InvalidArgumentException('non-nullable sampling_procedure cannot be null');
        }
        if ((mb_strlen($sampling_procedure) > 8)) {
            throw new \InvalidArgumentException('invalid length for $sampling_procedure when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 8.');
        }

        $this->container['sampling_procedure'] = $sampling_procedure;

        return $this;
    }

    /**
     * Gets insp_lot_dynamic_rule
     *
     * @return string|null
     */
    public function getInspLotDynamicRule()
    {
        return $this->container['insp_lot_dynamic_rule'];
    }

    /**
     * Sets insp_lot_dynamic_rule
     *
     * @param string|null $insp_lot_dynamic_rule Dynamic Modification Rule
     *
     * @return self
     */
    public function setInspLotDynamicRule($insp_lot_dynamic_rule)
    {
        if (is_null($insp_lot_dynamic_rule)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_dynamic_rule cannot be null');
        }
        if ((mb_strlen($insp_lot_dynamic_rule) > 3)) {
            throw new \InvalidArgumentException('invalid length for $insp_lot_dynamic_rule when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 3.');
        }

        $this->container['insp_lot_dynamic_rule'] = $insp_lot_dynamic_rule;

        return $this;
    }

    /**
     * Gets insp_lot_sample_quantity_in_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\InspPercentage|null
     */
    public function getInspLotSampleQuantityInPercent()
    {
        return $this->container['insp_lot_sample_quantity_in_percent'];
    }

    /**
     * Sets insp_lot_sample_quantity_in_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\InspPercentage|null $insp_lot_sample_quantity_in_percent insp_lot_sample_quantity_in_percent
     *
     * @return self
     */
    public function setInspLotSampleQuantityInPercent($insp_lot_sample_quantity_in_percent)
    {
        if (is_null($insp_lot_sample_quantity_in_percent)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_sample_quantity_in_percent cannot be null');
        }
        $this->container['insp_lot_sample_quantity_in_percent'] = $insp_lot_sample_quantity_in_percent;

        return $this;
    }

    /**
     * Gets inspection_lot_is_full_inspection
     *
     * @return bool|null
     */
    public function getInspectionLotIsFullInspection()
    {
        return $this->container['inspection_lot_is_full_inspection'];
    }

    /**
     * Sets inspection_lot_is_full_inspection
     *
     * @param bool|null $inspection_lot_is_full_inspection inspection_lot_is_full_inspection
     *
     * @return self
     */
    public function setInspectionLotIsFullInspection($inspection_lot_is_full_inspection)
    {
        if (is_null($inspection_lot_is_full_inspection)) {
            throw new \InvalidArgumentException('non-nullable inspection_lot_is_full_inspection cannot be null');
        }
        $this->container['inspection_lot_is_full_inspection'] = $inspection_lot_is_full_inspection;

        return $this;
    }

    /**
     * Gets insp_lot_skip_is_allowed
     *
     * @return bool|null
     */
    public function getInspLotSkipIsAllowed()
    {
        return $this->container['insp_lot_skip_is_allowed'];
    }

    /**
     * Sets insp_lot_skip_is_allowed
     *
     * @param bool|null $insp_lot_skip_is_allowed insp_lot_skip_is_allowed
     *
     * @return self
     */
    public function setInspLotSkipIsAllowed($insp_lot_skip_is_allowed)
    {
        if (is_null($insp_lot_skip_is_allowed)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_skip_is_allowed cannot be null');
        }
        $this->container['insp_lot_skip_is_allowed'] = $insp_lot_skip_is_allowed;

        return $this;
    }

    /**
     * Gets insp_lot_has_manual_sample_size
     *
     * @return bool|null
     */
    public function getInspLotHasManualSampleSize()
    {
        return $this->container['insp_lot_has_manual_sample_size'];
    }

    /**
     * Sets insp_lot_has_manual_sample_size
     *
     * @param bool|null $insp_lot_has_manual_sample_size Enter Sample Manually
     *
     * @return self
     */
    public function setInspLotHasManualSampleSize($insp_lot_has_manual_sample_size)
    {
        if (is_null($insp_lot_has_manual_sample_size)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_manual_sample_size cannot be null');
        }
        $this->container['insp_lot_has_manual_sample_size'] = $insp_lot_has_manual_sample_size;

        return $this;
    }

    /**
     * Gets insp_lot_is_smpl_calc_mnl_triggered
     *
     * @return bool|null
     */
    public function getInspLotIsSmplCalcMnlTriggered()
    {
        return $this->container['insp_lot_is_smpl_calc_mnl_triggered'];
    }

    /**
     * Sets insp_lot_is_smpl_calc_mnl_triggered
     *
     * @param bool|null $insp_lot_is_smpl_calc_mnl_triggered Trigger Sample Calculation Manually
     *
     * @return self
     */
    public function setInspLotIsSmplCalcMnlTriggered($insp_lot_is_smpl_calc_mnl_triggered)
    {
        if (is_null($insp_lot_is_smpl_calc_mnl_triggered)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_is_smpl_calc_mnl_triggered cannot be null');
        }
        $this->container['insp_lot_is_smpl_calc_mnl_triggered'] = $insp_lot_is_smpl_calc_mnl_triggered;

        return $this;
    }

    /**
     * Gets insp_lot_is_serial_nmbr_possible
     *
     * @return bool|null
     */
    public function getInspLotIsSerialNmbrPossible()
    {
        return $this->container['insp_lot_is_serial_nmbr_possible'];
    }

    /**
     * Sets insp_lot_is_serial_nmbr_possible
     *
     * @param bool|null $insp_lot_is_serial_nmbr_possible Serial Numbers Possible for Inspection Lot
     *
     * @return self
     */
    public function setInspLotIsSerialNmbrPossible($insp_lot_is_serial_nmbr_possible)
    {
        if (is_null($insp_lot_is_serial_nmbr_possible)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_is_serial_nmbr_possible cannot be null');
        }
        $this->container['insp_lot_is_serial_nmbr_possible'] = $insp_lot_is_serial_nmbr_possible;

        return $this;
    }

    /**
     * Gets insp_lot_duration_in_days
     *
     * @return \BeLenka\SAP\ProductODV4\Model\AvgInspDuration|null
     */
    public function getInspLotDurationInDays()
    {
        return $this->container['insp_lot_duration_in_days'];
    }

    /**
     * Sets insp_lot_duration_in_days
     *
     * @param \BeLenka\SAP\ProductODV4\Model\AvgInspDuration|null $insp_lot_duration_in_days insp_lot_duration_in_days
     *
     * @return self
     */
    public function setInspLotDurationInDays($insp_lot_duration_in_days)
    {
        if (is_null($insp_lot_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_duration_in_days cannot be null');
        }
        $this->container['insp_lot_duration_in_days'] = $insp_lot_duration_in_days;

        return $this;
    }

    /**
     * Gets insp_lot_summary_control
     *
     * @return string|null
     */
    public function getInspLotSummaryControl()
    {
        return $this->container['insp_lot_summary_control'];
    }

    /**
     * Sets insp_lot_summary_control
     *
     * @param string|null $insp_lot_summary_control Control of Inspection Lot Creation (Lot Summary)
     *
     * @return self
     */
    public function setInspLotSummaryControl($insp_lot_summary_control)
    {
        if (is_null($insp_lot_summary_control)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_summary_control cannot be null');
        }
        if ((mb_strlen($insp_lot_summary_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $insp_lot_summary_control when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 1.');
        }

        $this->container['insp_lot_summary_control'] = $insp_lot_summary_control;

        return $this;
    }

    /**
     * Gets insp_quality_score_procedure
     *
     * @return string|null
     */
    public function getInspQualityScoreProcedure()
    {
        return $this->container['insp_quality_score_procedure'];
    }

    /**
     * Sets insp_quality_score_procedure
     *
     * @param string|null $insp_quality_score_procedure Procedure for Calculating Quality Score
     *
     * @return self
     */
    public function setInspQualityScoreProcedure($insp_quality_score_procedure)
    {
        if (is_null($insp_quality_score_procedure)) {
            throw new \InvalidArgumentException('non-nullable insp_quality_score_procedure cannot be null');
        }
        if ((mb_strlen($insp_quality_score_procedure) > 2)) {
            throw new \InvalidArgumentException('invalid length for $insp_quality_score_procedure when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 2.');
        }

        $this->container['insp_quality_score_procedure'] = $insp_quality_score_procedure;

        return $this;
    }

    /**
     * Gets insp_lot_accepted_scrap_ratio_in_pct
     *
     * @return \BeLenka\SAP\ProductODV4\Model\AllowedScrapShare|null
     */
    public function getInspLotAcceptedScrapRatioInPct()
    {
        return $this->container['insp_lot_accepted_scrap_ratio_in_pct'];
    }

    /**
     * Sets insp_lot_accepted_scrap_ratio_in_pct
     *
     * @param \BeLenka\SAP\ProductODV4\Model\AllowedScrapShare|null $insp_lot_accepted_scrap_ratio_in_pct insp_lot_accepted_scrap_ratio_in_pct
     *
     * @return self
     */
    public function setInspLotAcceptedScrapRatioInPct($insp_lot_accepted_scrap_ratio_in_pct)
    {
        if (is_null($insp_lot_accepted_scrap_ratio_in_pct)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_accepted_scrap_ratio_in_pct cannot be null');
        }
        $this->container['insp_lot_accepted_scrap_ratio_in_pct'] = $insp_lot_accepted_scrap_ratio_in_pct;

        return $this;
    }

    /**
     * Gets inspection_lot_has_appraisal_costs
     *
     * @return bool|null
     */
    public function getInspectionLotHasAppraisalCosts()
    {
        return $this->container['inspection_lot_has_appraisal_costs'];
    }

    /**
     * Sets inspection_lot_has_appraisal_costs
     *
     * @param bool|null $inspection_lot_has_appraisal_costs Record Appraisal Costs in Individual QM Order
     *
     * @return self
     */
    public function setInspectionLotHasAppraisalCosts($inspection_lot_has_appraisal_costs)
    {
        if (is_null($inspection_lot_has_appraisal_costs)) {
            throw new \InvalidArgumentException('non-nullable inspection_lot_has_appraisal_costs cannot be null');
        }
        $this->container['inspection_lot_has_appraisal_costs'] = $inspection_lot_has_appraisal_costs;

        return $this;
    }

    /**
     * Gets quality_cost_collector
     *
     * @return string|null
     */
    public function getQualityCostCollector()
    {
        return $this->container['quality_cost_collector'];
    }

    /**
     * Sets quality_cost_collector
     *
     * @param string|null $quality_cost_collector Order Number for Recording Appraisal Costs
     *
     * @return self
     */
    public function setQualityCostCollector($quality_cost_collector)
    {
        if (is_null($quality_cost_collector)) {
            throw new \InvalidArgumentException('non-nullable quality_cost_collector cannot be null');
        }
        if ((mb_strlen($quality_cost_collector) > 12)) {
            throw new \InvalidArgumentException('invalid length for $quality_cost_collector when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 12.');
        }

        $this->container['quality_cost_collector'] = $quality_cost_collector;

        return $this;
    }

    /**
     * Gets prod_insp_type_setting_is_active
     *
     * @return bool|null
     */
    public function getProdInspTypeSettingIsActive()
    {
        return $this->container['prod_insp_type_setting_is_active'];
    }

    /**
     * Sets prod_insp_type_setting_is_active
     *
     * @param bool|null $prod_insp_type_setting_is_active Inspection Type - Material Combination Is Active
     *
     * @return self
     */
    public function setProdInspTypeSettingIsActive($prod_insp_type_setting_is_active)
    {
        if (is_null($prod_insp_type_setting_is_active)) {
            throw new \InvalidArgumentException('non-nullable prod_insp_type_setting_is_active cannot be null');
        }
        $this->container['prod_insp_type_setting_is_active'] = $prod_insp_type_setting_is_active;

        return $this;
    }

    /**
     * Gets insp_type_is_prfrd
     *
     * @return bool|null
     */
    public function getInspTypeIsPrfrd()
    {
        return $this->container['insp_type_is_prfrd'];
    }

    /**
     * Sets insp_type_is_prfrd
     *
     * @param bool|null $insp_type_is_prfrd Preferred Inspection Type
     *
     * @return self
     */
    public function setInspTypeIsPrfrd($insp_type_is_prfrd)
    {
        if (is_null($insp_type_is_prfrd)) {
            throw new \InvalidArgumentException('non-nullable insp_type_is_prfrd cannot be null');
        }
        $this->container['insp_type_is_prfrd'] = $insp_type_is_prfrd;

        return $this;
    }

    /**
     * Gets insp_lot_has_handling_unit
     *
     * @return bool|null
     */
    public function getInspLotHasHandlingUnit()
    {
        return $this->container['insp_lot_has_handling_unit'];
    }

    /**
     * Sets insp_lot_has_handling_unit
     *
     * @param bool|null $insp_lot_has_handling_unit Inspection for Handling Unit
     *
     * @return self
     */
    public function setInspLotHasHandlingUnit($insp_lot_has_handling_unit)
    {
        if (is_null($insp_lot_has_handling_unit)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_handling_unit cannot be null');
        }
        $this->container['insp_lot_has_handling_unit'] = $insp_lot_has_handling_unit;

        return $this;
    }

    /**
     * Gets insp_lot_has_multiple_spec
     *
     * @return bool|null
     */
    public function getInspLotHasMultipleSpec()
    {
        return $this->container['insp_lot_has_multiple_spec'];
    }

    /**
     * Sets insp_lot_has_multiple_spec
     *
     * @param bool|null $insp_lot_has_multiple_spec Indicator: Multiple Specifications
     *
     * @return self
     */
    public function setInspLotHasMultipleSpec($insp_lot_has_multiple_spec)
    {
        if (is_null($insp_lot_has_multiple_spec)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_has_multiple_spec cannot be null');
        }
        $this->container['insp_lot_has_multiple_spec'] = $insp_lot_has_multiple_spec;

        return $this;
    }

    /**
     * Gets insp_lot_of_ewm_summary_control
     *
     * @return string|null
     */
    public function getInspLotOfEwmSummaryControl()
    {
        return $this->container['insp_lot_of_ewm_summary_control'];
    }

    /**
     * Sets insp_lot_of_ewm_summary_control
     *
     * @param string|null $insp_lot_of_ewm_summary_control Inspection Lot Summary (Warehouse-Managed Stock)
     *
     * @return self
     */
    public function setInspLotOfEwmSummaryControl($insp_lot_of_ewm_summary_control)
    {
        if (is_null($insp_lot_of_ewm_summary_control)) {
            throw new \InvalidArgumentException('non-nullable insp_lot_of_ewm_summary_control cannot be null');
        }
        if ((mb_strlen($insp_lot_of_ewm_summary_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $insp_lot_of_ewm_summary_control when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingType., must be smaller than or equal to 1.');
        }

        $this->container['insp_lot_of_ewm_summary_control'] = $insp_lot_of_ewm_summary_control;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _product
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null
     */
    public function _getProduct()
    {
    return $this->container['_product'];
    }

    /**
     * Sets _product
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null $_product _product
     *
     * @return self
     */
    public function _setProduct($_product)
    {
        if (is_null($_product)) {
            throw new \InvalidArgumentException('non-nullable _product cannot be null');
        }
        $this->container['_product'] = $_product;

        return $this;
    }

    /**
     * Gets _product_plant
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType|null
     */
    public function _getProductPlant()
    {
    return $this->container['_product_plant'];
    }

    /**
     * Sets _product_plant
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType|null $_product_plant _product_plant
     *
     * @return self
     */
    public function _setProductPlant($_product_plant)
    {
        if (is_null($_product_plant)) {
            throw new \InvalidArgumentException('non-nullable _product_plant cannot be null');
        }
        $this->container['_product_plant'] = $_product_plant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


