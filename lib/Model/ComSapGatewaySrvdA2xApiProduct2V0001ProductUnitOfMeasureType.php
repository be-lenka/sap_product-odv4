<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductUnitOfMeasure_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product' => 'string',
        'alternative_unit' => 'string',
        'alternative_sap_unit' => 'string',
        'alternative_iso_unit' => 'string',
        'quantity_numerator' => '\BeLenka\SAP\ProductODV4\Model\UnitsQuantityBaseUnitOfMeasure',
        'quantity_denominator' => '\BeLenka\SAP\ProductODV4\Model\UnitsQuantityAltUnitOfMeasure',
        'product_volume' => '\BeLenka\SAP\ProductODV4\Model\Volume',
        'volume_unit' => 'string',
        'volume_iso_unit' => 'string',
        'gross_weight' => '\BeLenka\SAP\ProductODV4\Model\GrossWeight',
        'weight_unit' => 'string',
        'weight_iso_unit' => 'string',
        'global_trade_item_number' => 'string',
        'global_trade_item_number_category' => 'string',
        'unit_specific_product_length' => '\BeLenka\SAP\ProductODV4\Model\Length',
        'unit_specific_product_width' => '\BeLenka\SAP\ProductODV4\Model\Width',
        'unit_specific_product_height' => '\BeLenka\SAP\ProductODV4\Model\Height',
        'product_measurement_unit' => 'string',
        'product_measurement_iso_unit' => 'string',
        'lower_level_packaging_unit' => 'string',
        'lower_level_packaging_iso_unit' => 'string',
        'maximum_stacking_factor' => 'int',
        'capacity_usage' => '\BeLenka\SAP\ProductODV4\Model\CapacityUsage',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]',
        '_product' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
        '_product_unit_of_measure_ean' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureEANType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product' => null,
        'alternative_unit' => null,
        'alternative_sap_unit' => null,
        'alternative_iso_unit' => null,
        'quantity_numerator' => null,
        'quantity_denominator' => null,
        'product_volume' => null,
        'volume_unit' => null,
        'volume_iso_unit' => null,
        'gross_weight' => null,
        'weight_unit' => null,
        'weight_iso_unit' => null,
        'global_trade_item_number' => null,
        'global_trade_item_number_category' => null,
        'unit_specific_product_length' => null,
        'unit_specific_product_width' => null,
        'unit_specific_product_height' => null,
        'product_measurement_unit' => null,
        'product_measurement_iso_unit' => null,
        'lower_level_packaging_unit' => null,
        'lower_level_packaging_iso_unit' => null,
        'maximum_stacking_factor' => 'uint8',
        'capacity_usage' => null,
        'base_unit' => null,
        'base_iso_unit' => null,
        'sap__messages' => null,
        '_product' => null,
        '_product_unit_of_measure_ean' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product' => false,
		'alternative_unit' => false,
		'alternative_sap_unit' => false,
		'alternative_iso_unit' => false,
		'quantity_numerator' => false,
		'quantity_denominator' => false,
		'product_volume' => false,
		'volume_unit' => false,
		'volume_iso_unit' => false,
		'gross_weight' => false,
		'weight_unit' => false,
		'weight_iso_unit' => false,
		'global_trade_item_number' => false,
		'global_trade_item_number_category' => false,
		'unit_specific_product_length' => false,
		'unit_specific_product_width' => false,
		'unit_specific_product_height' => false,
		'product_measurement_unit' => false,
		'product_measurement_iso_unit' => false,
		'lower_level_packaging_unit' => false,
		'lower_level_packaging_iso_unit' => false,
		'maximum_stacking_factor' => false,
		'capacity_usage' => false,
		'base_unit' => false,
		'base_iso_unit' => false,
		'sap__messages' => false,
		'_product' => false,
		'_product_unit_of_measure_ean' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'Product',
        'alternative_unit' => 'AlternativeUnit',
        'alternative_sap_unit' => 'AlternativeSAPUnit',
        'alternative_iso_unit' => 'AlternativeISOUnit',
        'quantity_numerator' => 'QuantityNumerator',
        'quantity_denominator' => 'QuantityDenominator',
        'product_volume' => 'ProductVolume',
        'volume_unit' => 'VolumeUnit',
        'volume_iso_unit' => 'VolumeISOUnit',
        'gross_weight' => 'GrossWeight',
        'weight_unit' => 'WeightUnit',
        'weight_iso_unit' => 'WeightISOUnit',
        'global_trade_item_number' => 'GlobalTradeItemNumber',
        'global_trade_item_number_category' => 'GlobalTradeItemNumberCategory',
        'unit_specific_product_length' => 'UnitSpecificProductLength',
        'unit_specific_product_width' => 'UnitSpecificProductWidth',
        'unit_specific_product_height' => 'UnitSpecificProductHeight',
        'product_measurement_unit' => 'ProductMeasurementUnit',
        'product_measurement_iso_unit' => 'ProductMeasurementISOUnit',
        'lower_level_packaging_unit' => 'LowerLevelPackagingUnit',
        'lower_level_packaging_iso_unit' => 'LowerLevelPackagingISOUnit',
        'maximum_stacking_factor' => 'MaximumStackingFactor',
        'capacity_usage' => 'CapacityUsage',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'sap__messages' => 'SAP__Messages',
        '_product' => '_Product',
        '_product_unit_of_measure_ean' => '_ProductUnitOfMeasureEAN'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'alternative_unit' => 'setAlternativeUnit',
        'alternative_sap_unit' => 'setAlternativeSapUnit',
        'alternative_iso_unit' => 'setAlternativeIsoUnit',
        'quantity_numerator' => 'setQuantityNumerator',
        'quantity_denominator' => 'setQuantityDenominator',
        'product_volume' => 'setProductVolume',
        'volume_unit' => 'setVolumeUnit',
        'volume_iso_unit' => 'setVolumeIsoUnit',
        'gross_weight' => 'setGrossWeight',
        'weight_unit' => 'setWeightUnit',
        'weight_iso_unit' => 'setWeightIsoUnit',
        'global_trade_item_number' => 'setGlobalTradeItemNumber',
        'global_trade_item_number_category' => 'setGlobalTradeItemNumberCategory',
        'unit_specific_product_length' => 'setUnitSpecificProductLength',
        'unit_specific_product_width' => 'setUnitSpecificProductWidth',
        'unit_specific_product_height' => 'setUnitSpecificProductHeight',
        'product_measurement_unit' => 'setProductMeasurementUnit',
        'product_measurement_iso_unit' => 'setProductMeasurementIsoUnit',
        'lower_level_packaging_unit' => 'setLowerLevelPackagingUnit',
        'lower_level_packaging_iso_unit' => 'setLowerLevelPackagingIsoUnit',
        'maximum_stacking_factor' => 'setMaximumStackingFactor',
        'capacity_usage' => 'setCapacityUsage',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'sap__messages' => 'setSapMessages',
        '_product' => '_setProduct',
        '_product_unit_of_measure_ean' => '_setProductUnitOfMeasureEan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'alternative_unit' => 'getAlternativeUnit',
        'alternative_sap_unit' => 'getAlternativeSapUnit',
        'alternative_iso_unit' => 'getAlternativeIsoUnit',
        'quantity_numerator' => 'getQuantityNumerator',
        'quantity_denominator' => 'getQuantityDenominator',
        'product_volume' => 'getProductVolume',
        'volume_unit' => 'getVolumeUnit',
        'volume_iso_unit' => 'getVolumeIsoUnit',
        'gross_weight' => 'getGrossWeight',
        'weight_unit' => 'getWeightUnit',
        'weight_iso_unit' => 'getWeightIsoUnit',
        'global_trade_item_number' => 'getGlobalTradeItemNumber',
        'global_trade_item_number_category' => 'getGlobalTradeItemNumberCategory',
        'unit_specific_product_length' => 'getUnitSpecificProductLength',
        'unit_specific_product_width' => 'getUnitSpecificProductWidth',
        'unit_specific_product_height' => 'getUnitSpecificProductHeight',
        'product_measurement_unit' => 'getProductMeasurementUnit',
        'product_measurement_iso_unit' => 'getProductMeasurementIsoUnit',
        'lower_level_packaging_unit' => 'getLowerLevelPackagingUnit',
        'lower_level_packaging_iso_unit' => 'getLowerLevelPackagingIsoUnit',
        'maximum_stacking_factor' => 'getMaximumStackingFactor',
        'capacity_usage' => 'getCapacityUsage',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'sap__messages' => 'getSapMessages',
        '_product' => '_getProduct',
        '_product_unit_of_measure_ean' => '_getProductUnitOfMeasureEan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('alternative_unit', $data ?? [], null);
        $this->setIfExists('alternative_sap_unit', $data ?? [], null);
        $this->setIfExists('alternative_iso_unit', $data ?? [], null);
        $this->setIfExists('quantity_numerator', $data ?? [], null);
        $this->setIfExists('quantity_denominator', $data ?? [], null);
        $this->setIfExists('product_volume', $data ?? [], null);
        $this->setIfExists('volume_unit', $data ?? [], null);
        $this->setIfExists('volume_iso_unit', $data ?? [], null);
        $this->setIfExists('gross_weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('weight_iso_unit', $data ?? [], null);
        $this->setIfExists('global_trade_item_number', $data ?? [], null);
        $this->setIfExists('global_trade_item_number_category', $data ?? [], null);
        $this->setIfExists('unit_specific_product_length', $data ?? [], null);
        $this->setIfExists('unit_specific_product_width', $data ?? [], null);
        $this->setIfExists('unit_specific_product_height', $data ?? [], null);
        $this->setIfExists('product_measurement_unit', $data ?? [], null);
        $this->setIfExists('product_measurement_iso_unit', $data ?? [], null);
        $this->setIfExists('lower_level_packaging_unit', $data ?? [], null);
        $this->setIfExists('lower_level_packaging_iso_unit', $data ?? [], null);
        $this->setIfExists('maximum_stacking_factor', $data ?? [], null);
        $this->setIfExists('capacity_usage', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_product', $data ?? [], null);
        $this->setIfExists('_product_unit_of_measure_ean', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 18)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['alternative_unit']) && (mb_strlen($this->container['alternative_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'alternative_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['alternative_sap_unit']) && (mb_strlen($this->container['alternative_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'alternative_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['alternative_iso_unit']) && (mb_strlen($this->container['alternative_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'alternative_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['volume_unit']) && (mb_strlen($this->container['volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['volume_iso_unit']) && (mb_strlen($this->container['volume_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'volume_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['weight_unit']) && (mb_strlen($this->container['weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['weight_iso_unit']) && (mb_strlen($this->container['weight_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'weight_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['global_trade_item_number']) && (mb_strlen($this->container['global_trade_item_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'global_trade_item_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['global_trade_item_number_category']) && (mb_strlen($this->container['global_trade_item_number_category']) > 2)) {
            $invalidProperties[] = "invalid value for 'global_trade_item_number_category', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['product_measurement_unit']) && (mb_strlen($this->container['product_measurement_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_measurement_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_measurement_iso_unit']) && (mb_strlen($this->container['product_measurement_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_measurement_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['lower_level_packaging_unit']) && (mb_strlen($this->container['lower_level_packaging_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'lower_level_packaging_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['lower_level_packaging_iso_unit']) && (mb_strlen($this->container['lower_level_packaging_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'lower_level_packaging_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product Number
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        if ((mb_strlen($product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 18.');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets alternative_unit
     *
     * @return string|null
     */
    public function getAlternativeUnit()
    {
        return $this->container['alternative_unit'];
    }

    /**
     * Sets alternative_unit
     *
     * @param string|null $alternative_unit Base Unit of Measure - No Conversion Routine
     *
     * @return self
     */
    public function setAlternativeUnit($alternative_unit)
    {
        if (is_null($alternative_unit)) {
            throw new \InvalidArgumentException('non-nullable alternative_unit cannot be null');
        }
        if ((mb_strlen($alternative_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $alternative_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['alternative_unit'] = $alternative_unit;

        return $this;
    }

    /**
     * Gets alternative_sap_unit
     *
     * @return string|null
     */
    public function getAlternativeSapUnit()
    {
        return $this->container['alternative_sap_unit'];
    }

    /**
     * Sets alternative_sap_unit
     *
     * @param string|null $alternative_sap_unit Base Unit of Measure - No Conversion Routine
     *
     * @return self
     */
    public function setAlternativeSapUnit($alternative_sap_unit)
    {
        if (is_null($alternative_sap_unit)) {
            throw new \InvalidArgumentException('non-nullable alternative_sap_unit cannot be null');
        }
        if ((mb_strlen($alternative_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $alternative_sap_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['alternative_sap_unit'] = $alternative_sap_unit;

        return $this;
    }

    /**
     * Gets alternative_iso_unit
     *
     * @return string|null
     */
    public function getAlternativeIsoUnit()
    {
        return $this->container['alternative_iso_unit'];
    }

    /**
     * Sets alternative_iso_unit
     *
     * @param string|null $alternative_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setAlternativeIsoUnit($alternative_iso_unit)
    {
        if (is_null($alternative_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable alternative_iso_unit cannot be null');
        }
        if ((mb_strlen($alternative_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $alternative_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['alternative_iso_unit'] = $alternative_iso_unit;

        return $this;
    }

    /**
     * Gets quantity_numerator
     *
     * @return \BeLenka\SAP\ProductODV4\Model\UnitsQuantityBaseUnitOfMeasure|null
     */
    public function getQuantityNumerator()
    {
        return $this->container['quantity_numerator'];
    }

    /**
     * Sets quantity_numerator
     *
     * @param \BeLenka\SAP\ProductODV4\Model\UnitsQuantityBaseUnitOfMeasure|null $quantity_numerator quantity_numerator
     *
     * @return self
     */
    public function setQuantityNumerator($quantity_numerator)
    {
        if (is_null($quantity_numerator)) {
            throw new \InvalidArgumentException('non-nullable quantity_numerator cannot be null');
        }
        $this->container['quantity_numerator'] = $quantity_numerator;

        return $this;
    }

    /**
     * Gets quantity_denominator
     *
     * @return \BeLenka\SAP\ProductODV4\Model\UnitsQuantityAltUnitOfMeasure|null
     */
    public function getQuantityDenominator()
    {
        return $this->container['quantity_denominator'];
    }

    /**
     * Sets quantity_denominator
     *
     * @param \BeLenka\SAP\ProductODV4\Model\UnitsQuantityAltUnitOfMeasure|null $quantity_denominator quantity_denominator
     *
     * @return self
     */
    public function setQuantityDenominator($quantity_denominator)
    {
        if (is_null($quantity_denominator)) {
            throw new \InvalidArgumentException('non-nullable quantity_denominator cannot be null');
        }
        $this->container['quantity_denominator'] = $quantity_denominator;

        return $this;
    }

    /**
     * Gets product_volume
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Volume|null
     */
    public function getProductVolume()
    {
        return $this->container['product_volume'];
    }

    /**
     * Sets product_volume
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Volume|null $product_volume product_volume
     *
     * @return self
     */
    public function setProductVolume($product_volume)
    {
        if (is_null($product_volume)) {
            throw new \InvalidArgumentException('non-nullable product_volume cannot be null');
        }
        $this->container['product_volume'] = $product_volume;

        return $this;
    }

    /**
     * Gets volume_unit
     *
     * @return string|null
     */
    public function getVolumeUnit()
    {
        return $this->container['volume_unit'];
    }

    /**
     * Sets volume_unit
     *
     * @param string|null $volume_unit volume_unit
     *
     * @return self
     */
    public function setVolumeUnit($volume_unit)
    {
        if (is_null($volume_unit)) {
            throw new \InvalidArgumentException('non-nullable volume_unit cannot be null');
        }
        if ((mb_strlen($volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $volume_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['volume_unit'] = $volume_unit;

        return $this;
    }

    /**
     * Gets volume_iso_unit
     *
     * @return string|null
     */
    public function getVolumeIsoUnit()
    {
        return $this->container['volume_iso_unit'];
    }

    /**
     * Sets volume_iso_unit
     *
     * @param string|null $volume_iso_unit Volume unit in ISO code
     *
     * @return self
     */
    public function setVolumeIsoUnit($volume_iso_unit)
    {
        if (is_null($volume_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable volume_iso_unit cannot be null');
        }
        if ((mb_strlen($volume_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $volume_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['volume_iso_unit'] = $volume_iso_unit;

        return $this;
    }

    /**
     * Gets gross_weight
     *
     * @return \BeLenka\SAP\ProductODV4\Model\GrossWeight|null
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     *
     * @param \BeLenka\SAP\ProductODV4\Model\GrossWeight|null $gross_weight gross_weight
     *
     * @return self
     */
    public function setGrossWeight($gross_weight)
    {
        if (is_null($gross_weight)) {
            throw new \InvalidArgumentException('non-nullable gross_weight cannot be null');
        }
        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        if ((mb_strlen($weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $weight_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets weight_iso_unit
     *
     * @return string|null
     */
    public function getWeightIsoUnit()
    {
        return $this->container['weight_iso_unit'];
    }

    /**
     * Sets weight_iso_unit
     *
     * @param string|null $weight_iso_unit Unit of weight in ISO code
     *
     * @return self
     */
    public function setWeightIsoUnit($weight_iso_unit)
    {
        if (is_null($weight_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_iso_unit cannot be null');
        }
        if ((mb_strlen($weight_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $weight_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['weight_iso_unit'] = $weight_iso_unit;

        return $this;
    }

    /**
     * Gets global_trade_item_number
     *
     * @return string|null
     */
    public function getGlobalTradeItemNumber()
    {
        return $this->container['global_trade_item_number'];
    }

    /**
     * Sets global_trade_item_number
     *
     * @param string|null $global_trade_item_number International Article Number (EAN/UPC)
     *
     * @return self
     */
    public function setGlobalTradeItemNumber($global_trade_item_number)
    {
        if (is_null($global_trade_item_number)) {
            throw new \InvalidArgumentException('non-nullable global_trade_item_number cannot be null');
        }
        if ((mb_strlen($global_trade_item_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $global_trade_item_number when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 18.');
        }

        $this->container['global_trade_item_number'] = $global_trade_item_number;

        return $this;
    }

    /**
     * Gets global_trade_item_number_category
     *
     * @return string|null
     */
    public function getGlobalTradeItemNumberCategory()
    {
        return $this->container['global_trade_item_number_category'];
    }

    /**
     * Sets global_trade_item_number_category
     *
     * @param string|null $global_trade_item_number_category Category of Global Trade Item Number (GTIN)
     *
     * @return self
     */
    public function setGlobalTradeItemNumberCategory($global_trade_item_number_category)
    {
        if (is_null($global_trade_item_number_category)) {
            throw new \InvalidArgumentException('non-nullable global_trade_item_number_category cannot be null');
        }
        if ((mb_strlen($global_trade_item_number_category) > 2)) {
            throw new \InvalidArgumentException('invalid length for $global_trade_item_number_category when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 2.');
        }

        $this->container['global_trade_item_number_category'] = $global_trade_item_number_category;

        return $this;
    }

    /**
     * Gets unit_specific_product_length
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Length|null
     */
    public function getUnitSpecificProductLength()
    {
        return $this->container['unit_specific_product_length'];
    }

    /**
     * Sets unit_specific_product_length
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Length|null $unit_specific_product_length unit_specific_product_length
     *
     * @return self
     */
    public function setUnitSpecificProductLength($unit_specific_product_length)
    {
        if (is_null($unit_specific_product_length)) {
            throw new \InvalidArgumentException('non-nullable unit_specific_product_length cannot be null');
        }
        $this->container['unit_specific_product_length'] = $unit_specific_product_length;

        return $this;
    }

    /**
     * Gets unit_specific_product_width
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Width|null
     */
    public function getUnitSpecificProductWidth()
    {
        return $this->container['unit_specific_product_width'];
    }

    /**
     * Sets unit_specific_product_width
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Width|null $unit_specific_product_width unit_specific_product_width
     *
     * @return self
     */
    public function setUnitSpecificProductWidth($unit_specific_product_width)
    {
        if (is_null($unit_specific_product_width)) {
            throw new \InvalidArgumentException('non-nullable unit_specific_product_width cannot be null');
        }
        $this->container['unit_specific_product_width'] = $unit_specific_product_width;

        return $this;
    }

    /**
     * Gets unit_specific_product_height
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Height|null
     */
    public function getUnitSpecificProductHeight()
    {
        return $this->container['unit_specific_product_height'];
    }

    /**
     * Sets unit_specific_product_height
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Height|null $unit_specific_product_height unit_specific_product_height
     *
     * @return self
     */
    public function setUnitSpecificProductHeight($unit_specific_product_height)
    {
        if (is_null($unit_specific_product_height)) {
            throw new \InvalidArgumentException('non-nullable unit_specific_product_height cannot be null');
        }
        $this->container['unit_specific_product_height'] = $unit_specific_product_height;

        return $this;
    }

    /**
     * Gets product_measurement_unit
     *
     * @return string|null
     */
    public function getProductMeasurementUnit()
    {
        return $this->container['product_measurement_unit'];
    }

    /**
     * Sets product_measurement_unit
     *
     * @param string|null $product_measurement_unit Unit of Dimension for Length/Width/Height
     *
     * @return self
     */
    public function setProductMeasurementUnit($product_measurement_unit)
    {
        if (is_null($product_measurement_unit)) {
            throw new \InvalidArgumentException('non-nullable product_measurement_unit cannot be null');
        }
        if ((mb_strlen($product_measurement_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_measurement_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['product_measurement_unit'] = $product_measurement_unit;

        return $this;
    }

    /**
     * Gets product_measurement_iso_unit
     *
     * @return string|null
     */
    public function getProductMeasurementIsoUnit()
    {
        return $this->container['product_measurement_iso_unit'];
    }

    /**
     * Sets product_measurement_iso_unit
     *
     * @param string|null $product_measurement_iso_unit Unit for length/breadth/height in ISO code
     *
     * @return self
     */
    public function setProductMeasurementIsoUnit($product_measurement_iso_unit)
    {
        if (is_null($product_measurement_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable product_measurement_iso_unit cannot be null');
        }
        if ((mb_strlen($product_measurement_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_measurement_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['product_measurement_iso_unit'] = $product_measurement_iso_unit;

        return $this;
    }

    /**
     * Gets lower_level_packaging_unit
     *
     * @return string|null
     */
    public function getLowerLevelPackagingUnit()
    {
        return $this->container['lower_level_packaging_unit'];
    }

    /**
     * Sets lower_level_packaging_unit
     *
     * @param string|null $lower_level_packaging_unit Base Unit of Measure - No Conversion Routine
     *
     * @return self
     */
    public function setLowerLevelPackagingUnit($lower_level_packaging_unit)
    {
        if (is_null($lower_level_packaging_unit)) {
            throw new \InvalidArgumentException('non-nullable lower_level_packaging_unit cannot be null');
        }
        if ((mb_strlen($lower_level_packaging_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $lower_level_packaging_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['lower_level_packaging_unit'] = $lower_level_packaging_unit;

        return $this;
    }

    /**
     * Gets lower_level_packaging_iso_unit
     *
     * @return string|null
     */
    public function getLowerLevelPackagingIsoUnit()
    {
        return $this->container['lower_level_packaging_iso_unit'];
    }

    /**
     * Sets lower_level_packaging_iso_unit
     *
     * @param string|null $lower_level_packaging_iso_unit Lower-Level Unit of Measure in ISO Code
     *
     * @return self
     */
    public function setLowerLevelPackagingIsoUnit($lower_level_packaging_iso_unit)
    {
        if (is_null($lower_level_packaging_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable lower_level_packaging_iso_unit cannot be null');
        }
        if ((mb_strlen($lower_level_packaging_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $lower_level_packaging_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['lower_level_packaging_iso_unit'] = $lower_level_packaging_iso_unit;

        return $this;
    }

    /**
     * Gets maximum_stacking_factor
     *
     * @return int|null
     */
    public function getMaximumStackingFactor()
    {
        return $this->container['maximum_stacking_factor'];
    }

    /**
     * Sets maximum_stacking_factor
     *
     * @param int|null $maximum_stacking_factor Maximum Stacking Factor
     *
     * @return self
     */
    public function setMaximumStackingFactor($maximum_stacking_factor)
    {
        if (is_null($maximum_stacking_factor)) {
            throw new \InvalidArgumentException('non-nullable maximum_stacking_factor cannot be null');
        }
        $this->container['maximum_stacking_factor'] = $maximum_stacking_factor;

        return $this;
    }

    /**
     * Gets capacity_usage
     *
     * @return \BeLenka\SAP\ProductODV4\Model\CapacityUsage|null
     */
    public function getCapacityUsage()
    {
        return $this->container['capacity_usage'];
    }

    /**
     * Sets capacity_usage
     *
     * @param \BeLenka\SAP\ProductODV4\Model\CapacityUsage|null $capacity_usage capacity_usage
     *
     * @return self
     */
    public function setCapacityUsage($capacity_usage)
    {
        if (is_null($capacity_usage)) {
            throw new \InvalidArgumentException('non-nullable capacity_usage cannot be null');
        }
        $this->container['capacity_usage'] = $capacity_usage;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _product
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null
     */
    public function _getProduct()
    {
    return $this->container['_product'];
    }

    /**
     * Sets _product
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null $_product _product
     *
     * @return self
     */
    public function _setProduct($_product)
    {
        if (is_null($_product)) {
            throw new \InvalidArgumentException('non-nullable _product cannot be null');
        }
        $this->container['_product'] = $_product;

        return $this;
    }

    /**
     * Gets _product_unit_of_measure_ean
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureEANType[]|null
     */
    public function _getProductUnitOfMeasureEan()
    {
    return $this->container['_product_unit_of_measure_ean'];
    }

    /**
     * Sets _product_unit_of_measure_ean
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureEANType[]|null $_product_unit_of_measure_ean _product_unit_of_measure_ean
     *
     * @return self
     */
    public function _setProductUnitOfMeasureEan($_product_unit_of_measure_ean)
    {
        if (is_null($_product_unit_of_measure_ean)) {
            throw new \InvalidArgumentException('non-nullable _product_unit_of_measure_ean cannot be null');
        }
        $this->container['_product_unit_of_measure_ean'] = $_product_unit_of_measure_ean;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


