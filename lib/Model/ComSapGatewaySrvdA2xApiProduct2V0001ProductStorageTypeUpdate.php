<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductStorage_Type-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'storage_conditions' => 'string',
        'prod_temperature_condition_code' => 'string',
        'hazardous_product' => 'string',
        'nmbr_of_gror_gi_slips_to_print_qty' => '\BeLenka\SAP\ProductODV4\Model\GRSlipsQuantity',
        'label_type' => 'string',
        'label_form' => 'string',
        'min_remaining_shelf_life' => '\BeLenka\SAP\ProductODV4\Model\MinRemShelfLife',
        'product_expiration_date_type' => 'string',
        'storage_bin_instruction' => 'string',
        'shelf_life_expiration_date_period' => 'string',
        'shelf_life_exprtn_date_rndng_rule' => 'string',
        'total_shelf_life_storage_percent' => '\BeLenka\SAP\ProductODV4\Model\StoragePercentage',
        'total_shelf_life' => '\BeLenka\SAP\ProductODV4\Model\TotalShelfLife',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'storage_conditions' => null,
        'prod_temperature_condition_code' => null,
        'hazardous_product' => null,
        'nmbr_of_gror_gi_slips_to_print_qty' => null,
        'label_type' => null,
        'label_form' => null,
        'min_remaining_shelf_life' => null,
        'product_expiration_date_type' => null,
        'storage_bin_instruction' => null,
        'shelf_life_expiration_date_period' => null,
        'shelf_life_exprtn_date_rndng_rule' => null,
        'total_shelf_life_storage_percent' => null,
        'total_shelf_life' => null,
        'base_unit' => null,
        'base_iso_unit' => null,
        'sap__messages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'storage_conditions' => false,
		'prod_temperature_condition_code' => false,
		'hazardous_product' => false,
		'nmbr_of_gror_gi_slips_to_print_qty' => false,
		'label_type' => false,
		'label_form' => false,
		'min_remaining_shelf_life' => false,
		'product_expiration_date_type' => false,
		'storage_bin_instruction' => false,
		'shelf_life_expiration_date_period' => false,
		'shelf_life_exprtn_date_rndng_rule' => false,
		'total_shelf_life_storage_percent' => false,
		'total_shelf_life' => false,
		'base_unit' => false,
		'base_iso_unit' => false,
		'sap__messages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storage_conditions' => 'StorageConditions',
        'prod_temperature_condition_code' => 'ProdTemperatureConditionCode',
        'hazardous_product' => 'HazardousProduct',
        'nmbr_of_gror_gi_slips_to_print_qty' => 'NmbrOfGROrGISlipsToPrintQty',
        'label_type' => 'LabelType',
        'label_form' => 'LabelForm',
        'min_remaining_shelf_life' => 'MinRemainingShelfLife',
        'product_expiration_date_type' => 'ProductExpirationDateType',
        'storage_bin_instruction' => 'StorageBinInstruction',
        'shelf_life_expiration_date_period' => 'ShelfLifeExpirationDatePeriod',
        'shelf_life_exprtn_date_rndng_rule' => 'ShelfLifeExprtnDateRndngRule',
        'total_shelf_life_storage_percent' => 'TotalShelfLifeStoragePercent',
        'total_shelf_life' => 'TotalShelfLife',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'sap__messages' => 'SAP__Messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storage_conditions' => 'setStorageConditions',
        'prod_temperature_condition_code' => 'setProdTemperatureConditionCode',
        'hazardous_product' => 'setHazardousProduct',
        'nmbr_of_gror_gi_slips_to_print_qty' => 'setNmbrOfGrorGiSlipsToPrintQty',
        'label_type' => 'setLabelType',
        'label_form' => 'setLabelForm',
        'min_remaining_shelf_life' => 'setMinRemainingShelfLife',
        'product_expiration_date_type' => 'setProductExpirationDateType',
        'storage_bin_instruction' => 'setStorageBinInstruction',
        'shelf_life_expiration_date_period' => 'setShelfLifeExpirationDatePeriod',
        'shelf_life_exprtn_date_rndng_rule' => 'setShelfLifeExprtnDateRndngRule',
        'total_shelf_life_storage_percent' => 'setTotalShelfLifeStoragePercent',
        'total_shelf_life' => 'setTotalShelfLife',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'sap__messages' => 'setSapMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storage_conditions' => 'getStorageConditions',
        'prod_temperature_condition_code' => 'getProdTemperatureConditionCode',
        'hazardous_product' => 'getHazardousProduct',
        'nmbr_of_gror_gi_slips_to_print_qty' => 'getNmbrOfGrorGiSlipsToPrintQty',
        'label_type' => 'getLabelType',
        'label_form' => 'getLabelForm',
        'min_remaining_shelf_life' => 'getMinRemainingShelfLife',
        'product_expiration_date_type' => 'getProductExpirationDateType',
        'storage_bin_instruction' => 'getStorageBinInstruction',
        'shelf_life_expiration_date_period' => 'getShelfLifeExpirationDatePeriod',
        'shelf_life_exprtn_date_rndng_rule' => 'getShelfLifeExprtnDateRndngRule',
        'total_shelf_life_storage_percent' => 'getTotalShelfLifeStoragePercent',
        'total_shelf_life' => 'getTotalShelfLife',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'sap__messages' => 'getSapMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('storage_conditions', $data ?? [], null);
        $this->setIfExists('prod_temperature_condition_code', $data ?? [], null);
        $this->setIfExists('hazardous_product', $data ?? [], null);
        $this->setIfExists('nmbr_of_gror_gi_slips_to_print_qty', $data ?? [], null);
        $this->setIfExists('label_type', $data ?? [], null);
        $this->setIfExists('label_form', $data ?? [], null);
        $this->setIfExists('min_remaining_shelf_life', $data ?? [], null);
        $this->setIfExists('product_expiration_date_type', $data ?? [], null);
        $this->setIfExists('storage_bin_instruction', $data ?? [], null);
        $this->setIfExists('shelf_life_expiration_date_period', $data ?? [], null);
        $this->setIfExists('shelf_life_exprtn_date_rndng_rule', $data ?? [], null);
        $this->setIfExists('total_shelf_life_storage_percent', $data ?? [], null);
        $this->setIfExists('total_shelf_life', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['storage_conditions']) && (mb_strlen($this->container['storage_conditions']) > 2)) {
            $invalidProperties[] = "invalid value for 'storage_conditions', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['prod_temperature_condition_code']) && (mb_strlen($this->container['prod_temperature_condition_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'prod_temperature_condition_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['hazardous_product']) && (mb_strlen($this->container['hazardous_product']) > 18)) {
            $invalidProperties[] = "invalid value for 'hazardous_product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['label_type']) && (mb_strlen($this->container['label_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'label_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['label_form']) && (mb_strlen($this->container['label_form']) > 2)) {
            $invalidProperties[] = "invalid value for 'label_form', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['product_expiration_date_type']) && (mb_strlen($this->container['product_expiration_date_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_expiration_date_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['storage_bin_instruction']) && (mb_strlen($this->container['storage_bin_instruction']) > 2)) {
            $invalidProperties[] = "invalid value for 'storage_bin_instruction', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shelf_life_expiration_date_period']) && (mb_strlen($this->container['shelf_life_expiration_date_period']) > 1)) {
            $invalidProperties[] = "invalid value for 'shelf_life_expiration_date_period', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['shelf_life_exprtn_date_rndng_rule']) && (mb_strlen($this->container['shelf_life_exprtn_date_rndng_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'shelf_life_exprtn_date_rndng_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets storage_conditions
     *
     * @return string|null
     */
    public function getStorageConditions()
    {
        return $this->container['storage_conditions'];
    }

    /**
     * Sets storage_conditions
     *
     * @param string|null $storage_conditions storage_conditions
     *
     * @return self
     */
    public function setStorageConditions($storage_conditions)
    {
        if (is_null($storage_conditions)) {
            throw new \InvalidArgumentException('non-nullable storage_conditions cannot be null');
        }
        if ((mb_strlen($storage_conditions) > 2)) {
            throw new \InvalidArgumentException('invalid length for $storage_conditions when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['storage_conditions'] = $storage_conditions;

        return $this;
    }

    /**
     * Gets prod_temperature_condition_code
     *
     * @return string|null
     */
    public function getProdTemperatureConditionCode()
    {
        return $this->container['prod_temperature_condition_code'];
    }

    /**
     * Sets prod_temperature_condition_code
     *
     * @param string|null $prod_temperature_condition_code Temperature conditions indicator
     *
     * @return self
     */
    public function setProdTemperatureConditionCode($prod_temperature_condition_code)
    {
        if (is_null($prod_temperature_condition_code)) {
            throw new \InvalidArgumentException('non-nullable prod_temperature_condition_code cannot be null');
        }
        if ((mb_strlen($prod_temperature_condition_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $prod_temperature_condition_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['prod_temperature_condition_code'] = $prod_temperature_condition_code;

        return $this;
    }

    /**
     * Gets hazardous_product
     *
     * @return string|null
     */
    public function getHazardousProduct()
    {
        return $this->container['hazardous_product'];
    }

    /**
     * Sets hazardous_product
     *
     * @param string|null $hazardous_product Hazardous material number
     *
     * @return self
     */
    public function setHazardousProduct($hazardous_product)
    {
        if (is_null($hazardous_product)) {
            throw new \InvalidArgumentException('non-nullable hazardous_product cannot be null');
        }
        if ((mb_strlen($hazardous_product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $hazardous_product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['hazardous_product'] = $hazardous_product;

        return $this;
    }

    /**
     * Gets nmbr_of_gror_gi_slips_to_print_qty
     *
     * @return \BeLenka\SAP\ProductODV4\Model\GRSlipsQuantity|null
     */
    public function getNmbrOfGrorGiSlipsToPrintQty()
    {
        return $this->container['nmbr_of_gror_gi_slips_to_print_qty'];
    }

    /**
     * Sets nmbr_of_gror_gi_slips_to_print_qty
     *
     * @param \BeLenka\SAP\ProductODV4\Model\GRSlipsQuantity|null $nmbr_of_gror_gi_slips_to_print_qty nmbr_of_gror_gi_slips_to_print_qty
     *
     * @return self
     */
    public function setNmbrOfGrorGiSlipsToPrintQty($nmbr_of_gror_gi_slips_to_print_qty)
    {
        if (is_null($nmbr_of_gror_gi_slips_to_print_qty)) {
            throw new \InvalidArgumentException('non-nullable nmbr_of_gror_gi_slips_to_print_qty cannot be null');
        }
        $this->container['nmbr_of_gror_gi_slips_to_print_qty'] = $nmbr_of_gror_gi_slips_to_print_qty;

        return $this;
    }

    /**
     * Gets label_type
     *
     * @return string|null
     */
    public function getLabelType()
    {
        return $this->container['label_type'];
    }

    /**
     * Sets label_type
     *
     * @param string|null $label_type label_type
     *
     * @return self
     */
    public function setLabelType($label_type)
    {
        if (is_null($label_type)) {
            throw new \InvalidArgumentException('non-nullable label_type cannot be null');
        }
        if ((mb_strlen($label_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $label_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['label_type'] = $label_type;

        return $this;
    }

    /**
     * Gets label_form
     *
     * @return string|null
     */
    public function getLabelForm()
    {
        return $this->container['label_form'];
    }

    /**
     * Sets label_form
     *
     * @param string|null $label_form label_form
     *
     * @return self
     */
    public function setLabelForm($label_form)
    {
        if (is_null($label_form)) {
            throw new \InvalidArgumentException('non-nullable label_form cannot be null');
        }
        if ((mb_strlen($label_form) > 2)) {
            throw new \InvalidArgumentException('invalid length for $label_form when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['label_form'] = $label_form;

        return $this;
    }

    /**
     * Gets min_remaining_shelf_life
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MinRemShelfLife|null
     */
    public function getMinRemainingShelfLife()
    {
        return $this->container['min_remaining_shelf_life'];
    }

    /**
     * Sets min_remaining_shelf_life
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MinRemShelfLife|null $min_remaining_shelf_life min_remaining_shelf_life
     *
     * @return self
     */
    public function setMinRemainingShelfLife($min_remaining_shelf_life)
    {
        if (is_null($min_remaining_shelf_life)) {
            throw new \InvalidArgumentException('non-nullable min_remaining_shelf_life cannot be null');
        }
        $this->container['min_remaining_shelf_life'] = $min_remaining_shelf_life;

        return $this;
    }

    /**
     * Gets product_expiration_date_type
     *
     * @return string|null
     */
    public function getProductExpirationDateType()
    {
        return $this->container['product_expiration_date_type'];
    }

    /**
     * Sets product_expiration_date_type
     *
     * @param string|null $product_expiration_date_type product_expiration_date_type
     *
     * @return self
     */
    public function setProductExpirationDateType($product_expiration_date_type)
    {
        if (is_null($product_expiration_date_type)) {
            throw new \InvalidArgumentException('non-nullable product_expiration_date_type cannot be null');
        }
        if ((mb_strlen($product_expiration_date_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_expiration_date_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_expiration_date_type'] = $product_expiration_date_type;

        return $this;
    }

    /**
     * Gets storage_bin_instruction
     *
     * @return string|null
     */
    public function getStorageBinInstruction()
    {
        return $this->container['storage_bin_instruction'];
    }

    /**
     * Sets storage_bin_instruction
     *
     * @param string|null $storage_bin_instruction Container requirements
     *
     * @return self
     */
    public function setStorageBinInstruction($storage_bin_instruction)
    {
        if (is_null($storage_bin_instruction)) {
            throw new \InvalidArgumentException('non-nullable storage_bin_instruction cannot be null');
        }
        if ((mb_strlen($storage_bin_instruction) > 2)) {
            throw new \InvalidArgumentException('invalid length for $storage_bin_instruction when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['storage_bin_instruction'] = $storage_bin_instruction;

        return $this;
    }

    /**
     * Gets shelf_life_expiration_date_period
     *
     * @return string|null
     */
    public function getShelfLifeExpirationDatePeriod()
    {
        return $this->container['shelf_life_expiration_date_period'];
    }

    /**
     * Sets shelf_life_expiration_date_period
     *
     * @param string|null $shelf_life_expiration_date_period Period Indicator for Shelf Life Expiration Date
     *
     * @return self
     */
    public function setShelfLifeExpirationDatePeriod($shelf_life_expiration_date_period)
    {
        if (is_null($shelf_life_expiration_date_period)) {
            throw new \InvalidArgumentException('non-nullable shelf_life_expiration_date_period cannot be null');
        }
        if ((mb_strlen($shelf_life_expiration_date_period) > 1)) {
            throw new \InvalidArgumentException('invalid length for $shelf_life_expiration_date_period when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['shelf_life_expiration_date_period'] = $shelf_life_expiration_date_period;

        return $this;
    }

    /**
     * Gets shelf_life_exprtn_date_rndng_rule
     *
     * @return string|null
     */
    public function getShelfLifeExprtnDateRndngRule()
    {
        return $this->container['shelf_life_exprtn_date_rndng_rule'];
    }

    /**
     * Sets shelf_life_exprtn_date_rndng_rule
     *
     * @param string|null $shelf_life_exprtn_date_rndng_rule Rounding rule for calculation of SLED
     *
     * @return self
     */
    public function setShelfLifeExprtnDateRndngRule($shelf_life_exprtn_date_rndng_rule)
    {
        if (is_null($shelf_life_exprtn_date_rndng_rule)) {
            throw new \InvalidArgumentException('non-nullable shelf_life_exprtn_date_rndng_rule cannot be null');
        }
        if ((mb_strlen($shelf_life_exprtn_date_rndng_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $shelf_life_exprtn_date_rndng_rule when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['shelf_life_exprtn_date_rndng_rule'] = $shelf_life_exprtn_date_rndng_rule;

        return $this;
    }

    /**
     * Gets total_shelf_life_storage_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\StoragePercentage|null
     */
    public function getTotalShelfLifeStoragePercent()
    {
        return $this->container['total_shelf_life_storage_percent'];
    }

    /**
     * Sets total_shelf_life_storage_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\StoragePercentage|null $total_shelf_life_storage_percent total_shelf_life_storage_percent
     *
     * @return self
     */
    public function setTotalShelfLifeStoragePercent($total_shelf_life_storage_percent)
    {
        if (is_null($total_shelf_life_storage_percent)) {
            throw new \InvalidArgumentException('non-nullable total_shelf_life_storage_percent cannot be null');
        }
        $this->container['total_shelf_life_storage_percent'] = $total_shelf_life_storage_percent;

        return $this;
    }

    /**
     * Gets total_shelf_life
     *
     * @return \BeLenka\SAP\ProductODV4\Model\TotalShelfLife|null
     */
    public function getTotalShelfLife()
    {
        return $this->container['total_shelf_life'];
    }

    /**
     * Sets total_shelf_life
     *
     * @param \BeLenka\SAP\ProductODV4\Model\TotalShelfLife|null $total_shelf_life total_shelf_life
     *
     * @return self
     */
    public function setTotalShelfLife($total_shelf_life)
    {
        if (is_null($total_shelf_life)) {
            throw new \InvalidArgumentException('non-nullable total_shelf_life cannot be null');
        }
        $this->container['total_shelf_life'] = $total_shelf_life;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


