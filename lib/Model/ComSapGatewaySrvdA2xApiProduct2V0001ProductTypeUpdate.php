<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.Product_Type-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_type' => 'string',
        'creation_date_time' => '\DateTime',
        'is_marked_for_deletion' => 'bool',
        'cross_plant_status' => 'string',
        'cross_plant_status_validity_date' => '\DateTime',
        'product_old_id' => 'string',
        'gross_weight' => '\BeLenka\SAP\ProductODV4\Model\GrossWeight',
        'weight_unit' => 'string',
        'weight_iso_unit' => 'string',
        'product_group' => 'string',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'item_category_group' => 'string',
        'net_weight' => '\BeLenka\SAP\ProductODV4\Model\NetWeight',
        'division' => 'string',
        'volume_unit' => 'string',
        'volume_iso_unit' => 'string',
        'product_volume' => '\BeLenka\SAP\ProductODV4\Model\Volume',
        'authorization_group' => 'string',
        'anp_code' => 'string',
        'size_or_dimension_text' => 'string',
        'industry_standard_name' => 'string',
        'product_standard_id' => 'string',
        'international_article_number_cat' => 'string',
        'product_is_configurable' => 'bool',
        'is_batch_management_required' => 'bool',
        'external_product_group' => 'string',
        'cross_plant_configurable_product' => 'string',
        'serial_no_explicitness_level' => 'string',
        'is_approved_batch_record_reqd' => 'bool',
        'handling_indicator' => 'string',
        'warehouse_product_group' => 'string',
        'warehouse_storage_condition' => 'string',
        'standard_handling_unit_type' => 'string',
        'serial_number_profile' => 'string',
        'is_pilferable' => 'bool',
        'is_relevant_for_hzds_substances' => 'bool',
        'quarantine_period' => '\BeLenka\SAP\ProductODV4\Model\QuarantPer',
        'time_unit_for_quarantine_period' => 'string',
        'quarantine_period_iso_unit' => 'string',
        'quality_inspection_group' => 'string',
        'handling_unit_type' => 'string',
        'has_variable_tare_weight' => 'bool',
        'maximum_packaging_length' => '\BeLenka\SAP\ProductODV4\Model\MaxPackLength',
        'maximum_packaging_width' => '\BeLenka\SAP\ProductODV4\Model\MaxPackWidth',
        'maximum_packaging_height' => '\BeLenka\SAP\ProductODV4\Model\MaxPackHeight',
        'maximum_capacity' => '\BeLenka\SAP\ProductODV4\Model\MaximumCapacity',
        'overcapacity_tolerance' => '\BeLenka\SAP\ProductODV4\Model\OvercapacityToler',
        'unit_for_max_packaging_dimensions' => 'string',
        'max_packgg_dimension_iso_unit' => 'string',
        'base_unit_specific_product_length' => '\BeLenka\SAP\ProductODV4\Model\Length',
        'base_unit_specific_product_width' => '\BeLenka\SAP\ProductODV4\Model\Width',
        'base_unit_specific_product_height' => '\BeLenka\SAP\ProductODV4\Model\Height',
        'product_measurement_unit' => 'string',
        'product_measurement_iso_unit' => 'string',
        'article_category' => 'string',
        'industry_sector' => 'string',
        'dangerous_goods_ind_profile' => 'string',
        'product_document_change_number' => 'string',
        'product_document_page_count' => 'string',
        'product_document_page_number' => 'string',
        'document_is_created_by_cad' => 'bool',
        'production_or_inspection_memo_txt' => 'string',
        'production_memo_page_format' => 'string',
        'product_is_highly_viscous' => 'bool',
        'transport_is_in_bulk' => 'bool',
        'prod_effcty_param_vals_are_assigned' => 'bool',
        'prod_is_environmentally_relevant' => 'bool',
        'laboratory_or_design_office' => 'string',
        'packaging_product_group' => 'string',
        'packing_reference_product' => 'string',
        'basic_product' => 'string',
        'product_document_number' => 'string',
        'product_document_version' => 'string',
        'product_document_type' => 'string',
        'product_document_page_format' => 'string',
        'prod_chml_cmplnc_relevance_code' => 'string',
        'discount_in_kind_eligibility' => 'string',
        'product_manufacturer_number' => 'string',
        'manufacturer_number' => 'string',
        'manufacturer_part_profile' => 'string',
        'own_inventory_managed_product' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_type' => null,
        'creation_date_time' => 'date-time',
        'is_marked_for_deletion' => null,
        'cross_plant_status' => null,
        'cross_plant_status_validity_date' => 'date',
        'product_old_id' => null,
        'gross_weight' => null,
        'weight_unit' => null,
        'weight_iso_unit' => null,
        'product_group' => null,
        'base_unit' => null,
        'base_iso_unit' => null,
        'item_category_group' => null,
        'net_weight' => null,
        'division' => null,
        'volume_unit' => null,
        'volume_iso_unit' => null,
        'product_volume' => null,
        'authorization_group' => null,
        'anp_code' => null,
        'size_or_dimension_text' => null,
        'industry_standard_name' => null,
        'product_standard_id' => null,
        'international_article_number_cat' => null,
        'product_is_configurable' => null,
        'is_batch_management_required' => null,
        'external_product_group' => null,
        'cross_plant_configurable_product' => null,
        'serial_no_explicitness_level' => null,
        'is_approved_batch_record_reqd' => null,
        'handling_indicator' => null,
        'warehouse_product_group' => null,
        'warehouse_storage_condition' => null,
        'standard_handling_unit_type' => null,
        'serial_number_profile' => null,
        'is_pilferable' => null,
        'is_relevant_for_hzds_substances' => null,
        'quarantine_period' => null,
        'time_unit_for_quarantine_period' => null,
        'quarantine_period_iso_unit' => null,
        'quality_inspection_group' => null,
        'handling_unit_type' => null,
        'has_variable_tare_weight' => null,
        'maximum_packaging_length' => null,
        'maximum_packaging_width' => null,
        'maximum_packaging_height' => null,
        'maximum_capacity' => null,
        'overcapacity_tolerance' => null,
        'unit_for_max_packaging_dimensions' => null,
        'max_packgg_dimension_iso_unit' => null,
        'base_unit_specific_product_length' => null,
        'base_unit_specific_product_width' => null,
        'base_unit_specific_product_height' => null,
        'product_measurement_unit' => null,
        'product_measurement_iso_unit' => null,
        'article_category' => null,
        'industry_sector' => null,
        'dangerous_goods_ind_profile' => null,
        'product_document_change_number' => null,
        'product_document_page_count' => null,
        'product_document_page_number' => null,
        'document_is_created_by_cad' => null,
        'production_or_inspection_memo_txt' => null,
        'production_memo_page_format' => null,
        'product_is_highly_viscous' => null,
        'transport_is_in_bulk' => null,
        'prod_effcty_param_vals_are_assigned' => null,
        'prod_is_environmentally_relevant' => null,
        'laboratory_or_design_office' => null,
        'packaging_product_group' => null,
        'packing_reference_product' => null,
        'basic_product' => null,
        'product_document_number' => null,
        'product_document_version' => null,
        'product_document_type' => null,
        'product_document_page_format' => null,
        'prod_chml_cmplnc_relevance_code' => null,
        'discount_in_kind_eligibility' => null,
        'product_manufacturer_number' => null,
        'manufacturer_number' => null,
        'manufacturer_part_profile' => null,
        'own_inventory_managed_product' => null,
        'sap__messages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_type' => false,
		'creation_date_time' => true,
		'is_marked_for_deletion' => false,
		'cross_plant_status' => false,
		'cross_plant_status_validity_date' => true,
		'product_old_id' => false,
		'gross_weight' => false,
		'weight_unit' => false,
		'weight_iso_unit' => false,
		'product_group' => false,
		'base_unit' => false,
		'base_iso_unit' => false,
		'item_category_group' => false,
		'net_weight' => false,
		'division' => false,
		'volume_unit' => false,
		'volume_iso_unit' => false,
		'product_volume' => false,
		'authorization_group' => false,
		'anp_code' => false,
		'size_or_dimension_text' => false,
		'industry_standard_name' => false,
		'product_standard_id' => false,
		'international_article_number_cat' => false,
		'product_is_configurable' => false,
		'is_batch_management_required' => false,
		'external_product_group' => false,
		'cross_plant_configurable_product' => false,
		'serial_no_explicitness_level' => false,
		'is_approved_batch_record_reqd' => false,
		'handling_indicator' => false,
		'warehouse_product_group' => false,
		'warehouse_storage_condition' => false,
		'standard_handling_unit_type' => false,
		'serial_number_profile' => false,
		'is_pilferable' => false,
		'is_relevant_for_hzds_substances' => false,
		'quarantine_period' => false,
		'time_unit_for_quarantine_period' => false,
		'quarantine_period_iso_unit' => false,
		'quality_inspection_group' => false,
		'handling_unit_type' => false,
		'has_variable_tare_weight' => false,
		'maximum_packaging_length' => false,
		'maximum_packaging_width' => false,
		'maximum_packaging_height' => false,
		'maximum_capacity' => false,
		'overcapacity_tolerance' => false,
		'unit_for_max_packaging_dimensions' => false,
		'max_packgg_dimension_iso_unit' => false,
		'base_unit_specific_product_length' => false,
		'base_unit_specific_product_width' => false,
		'base_unit_specific_product_height' => false,
		'product_measurement_unit' => false,
		'product_measurement_iso_unit' => false,
		'article_category' => false,
		'industry_sector' => false,
		'dangerous_goods_ind_profile' => false,
		'product_document_change_number' => false,
		'product_document_page_count' => false,
		'product_document_page_number' => false,
		'document_is_created_by_cad' => false,
		'production_or_inspection_memo_txt' => false,
		'production_memo_page_format' => false,
		'product_is_highly_viscous' => false,
		'transport_is_in_bulk' => false,
		'prod_effcty_param_vals_are_assigned' => false,
		'prod_is_environmentally_relevant' => false,
		'laboratory_or_design_office' => false,
		'packaging_product_group' => false,
		'packing_reference_product' => false,
		'basic_product' => false,
		'product_document_number' => false,
		'product_document_version' => false,
		'product_document_type' => false,
		'product_document_page_format' => false,
		'prod_chml_cmplnc_relevance_code' => false,
		'discount_in_kind_eligibility' => false,
		'product_manufacturer_number' => false,
		'manufacturer_number' => false,
		'manufacturer_part_profile' => false,
		'own_inventory_managed_product' => false,
		'sap__messages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_type' => 'ProductType',
        'creation_date_time' => 'CreationDateTime',
        'is_marked_for_deletion' => 'IsMarkedForDeletion',
        'cross_plant_status' => 'CrossPlantStatus',
        'cross_plant_status_validity_date' => 'CrossPlantStatusValidityDate',
        'product_old_id' => 'ProductOldID',
        'gross_weight' => 'GrossWeight',
        'weight_unit' => 'WeightUnit',
        'weight_iso_unit' => 'WeightISOUnit',
        'product_group' => 'ProductGroup',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'item_category_group' => 'ItemCategoryGroup',
        'net_weight' => 'NetWeight',
        'division' => 'Division',
        'volume_unit' => 'VolumeUnit',
        'volume_iso_unit' => 'VolumeISOUnit',
        'product_volume' => 'ProductVolume',
        'authorization_group' => 'AuthorizationGroup',
        'anp_code' => 'ANPCode',
        'size_or_dimension_text' => 'SizeOrDimensionText',
        'industry_standard_name' => 'IndustryStandardName',
        'product_standard_id' => 'ProductStandardID',
        'international_article_number_cat' => 'InternationalArticleNumberCat',
        'product_is_configurable' => 'ProductIsConfigurable',
        'is_batch_management_required' => 'IsBatchManagementRequired',
        'external_product_group' => 'ExternalProductGroup',
        'cross_plant_configurable_product' => 'CrossPlantConfigurableProduct',
        'serial_no_explicitness_level' => 'SerialNoExplicitnessLevel',
        'is_approved_batch_record_reqd' => 'IsApprovedBatchRecordReqd',
        'handling_indicator' => 'HandlingIndicator',
        'warehouse_product_group' => 'WarehouseProductGroup',
        'warehouse_storage_condition' => 'WarehouseStorageCondition',
        'standard_handling_unit_type' => 'StandardHandlingUnitType',
        'serial_number_profile' => 'SerialNumberProfile',
        'is_pilferable' => 'IsPilferable',
        'is_relevant_for_hzds_substances' => 'IsRelevantForHzdsSubstances',
        'quarantine_period' => 'QuarantinePeriod',
        'time_unit_for_quarantine_period' => 'TimeUnitForQuarantinePeriod',
        'quarantine_period_iso_unit' => 'QuarantinePeriodISOUnit',
        'quality_inspection_group' => 'QualityInspectionGroup',
        'handling_unit_type' => 'HandlingUnitType',
        'has_variable_tare_weight' => 'HasVariableTareWeight',
        'maximum_packaging_length' => 'MaximumPackagingLength',
        'maximum_packaging_width' => 'MaximumPackagingWidth',
        'maximum_packaging_height' => 'MaximumPackagingHeight',
        'maximum_capacity' => 'MaximumCapacity',
        'overcapacity_tolerance' => 'OvercapacityTolerance',
        'unit_for_max_packaging_dimensions' => 'UnitForMaxPackagingDimensions',
        'max_packgg_dimension_iso_unit' => 'MaxPackggDimensionISOUnit',
        'base_unit_specific_product_length' => 'BaseUnitSpecificProductLength',
        'base_unit_specific_product_width' => 'BaseUnitSpecificProductWidth',
        'base_unit_specific_product_height' => 'BaseUnitSpecificProductHeight',
        'product_measurement_unit' => 'ProductMeasurementUnit',
        'product_measurement_iso_unit' => 'ProductMeasurementISOUnit',
        'article_category' => 'ArticleCategory',
        'industry_sector' => 'IndustrySector',
        'dangerous_goods_ind_profile' => 'DangerousGoodsIndProfile',
        'product_document_change_number' => 'ProductDocumentChangeNumber',
        'product_document_page_count' => 'ProductDocumentPageCount',
        'product_document_page_number' => 'ProductDocumentPageNumber',
        'document_is_created_by_cad' => 'DocumentIsCreatedByCAD',
        'production_or_inspection_memo_txt' => 'ProductionOrInspectionMemoTxt',
        'production_memo_page_format' => 'ProductionMemoPageFormat',
        'product_is_highly_viscous' => 'ProductIsHighlyViscous',
        'transport_is_in_bulk' => 'TransportIsInBulk',
        'prod_effcty_param_vals_are_assigned' => 'ProdEffctyParamValsAreAssigned',
        'prod_is_environmentally_relevant' => 'ProdIsEnvironmentallyRelevant',
        'laboratory_or_design_office' => 'LaboratoryOrDesignOffice',
        'packaging_product_group' => 'PackagingProductGroup',
        'packing_reference_product' => 'PackingReferenceProduct',
        'basic_product' => 'BasicProduct',
        'product_document_number' => 'ProductDocumentNumber',
        'product_document_version' => 'ProductDocumentVersion',
        'product_document_type' => 'ProductDocumentType',
        'product_document_page_format' => 'ProductDocumentPageFormat',
        'prod_chml_cmplnc_relevance_code' => 'ProdChmlCmplncRelevanceCode',
        'discount_in_kind_eligibility' => 'DiscountInKindEligibility',
        'product_manufacturer_number' => 'ProductManufacturerNumber',
        'manufacturer_number' => 'ManufacturerNumber',
        'manufacturer_part_profile' => 'ManufacturerPartProfile',
        'own_inventory_managed_product' => 'OwnInventoryManagedProduct',
        'sap__messages' => 'SAP__Messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_type' => 'setProductType',
        'creation_date_time' => 'setCreationDateTime',
        'is_marked_for_deletion' => 'setIsMarkedForDeletion',
        'cross_plant_status' => 'setCrossPlantStatus',
        'cross_plant_status_validity_date' => 'setCrossPlantStatusValidityDate',
        'product_old_id' => 'setProductOldId',
        'gross_weight' => 'setGrossWeight',
        'weight_unit' => 'setWeightUnit',
        'weight_iso_unit' => 'setWeightIsoUnit',
        'product_group' => 'setProductGroup',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'item_category_group' => 'setItemCategoryGroup',
        'net_weight' => 'setNetWeight',
        'division' => 'setDivision',
        'volume_unit' => 'setVolumeUnit',
        'volume_iso_unit' => 'setVolumeIsoUnit',
        'product_volume' => 'setProductVolume',
        'authorization_group' => 'setAuthorizationGroup',
        'anp_code' => 'setAnpCode',
        'size_or_dimension_text' => 'setSizeOrDimensionText',
        'industry_standard_name' => 'setIndustryStandardName',
        'product_standard_id' => 'setProductStandardId',
        'international_article_number_cat' => 'setInternationalArticleNumberCat',
        'product_is_configurable' => 'setProductIsConfigurable',
        'is_batch_management_required' => 'setIsBatchManagementRequired',
        'external_product_group' => 'setExternalProductGroup',
        'cross_plant_configurable_product' => 'setCrossPlantConfigurableProduct',
        'serial_no_explicitness_level' => 'setSerialNoExplicitnessLevel',
        'is_approved_batch_record_reqd' => 'setIsApprovedBatchRecordReqd',
        'handling_indicator' => 'setHandlingIndicator',
        'warehouse_product_group' => 'setWarehouseProductGroup',
        'warehouse_storage_condition' => 'setWarehouseStorageCondition',
        'standard_handling_unit_type' => 'setStandardHandlingUnitType',
        'serial_number_profile' => 'setSerialNumberProfile',
        'is_pilferable' => 'setIsPilferable',
        'is_relevant_for_hzds_substances' => 'setIsRelevantForHzdsSubstances',
        'quarantine_period' => 'setQuarantinePeriod',
        'time_unit_for_quarantine_period' => 'setTimeUnitForQuarantinePeriod',
        'quarantine_period_iso_unit' => 'setQuarantinePeriodIsoUnit',
        'quality_inspection_group' => 'setQualityInspectionGroup',
        'handling_unit_type' => 'setHandlingUnitType',
        'has_variable_tare_weight' => 'setHasVariableTareWeight',
        'maximum_packaging_length' => 'setMaximumPackagingLength',
        'maximum_packaging_width' => 'setMaximumPackagingWidth',
        'maximum_packaging_height' => 'setMaximumPackagingHeight',
        'maximum_capacity' => 'setMaximumCapacity',
        'overcapacity_tolerance' => 'setOvercapacityTolerance',
        'unit_for_max_packaging_dimensions' => 'setUnitForMaxPackagingDimensions',
        'max_packgg_dimension_iso_unit' => 'setMaxPackggDimensionIsoUnit',
        'base_unit_specific_product_length' => 'setBaseUnitSpecificProductLength',
        'base_unit_specific_product_width' => 'setBaseUnitSpecificProductWidth',
        'base_unit_specific_product_height' => 'setBaseUnitSpecificProductHeight',
        'product_measurement_unit' => 'setProductMeasurementUnit',
        'product_measurement_iso_unit' => 'setProductMeasurementIsoUnit',
        'article_category' => 'setArticleCategory',
        'industry_sector' => 'setIndustrySector',
        'dangerous_goods_ind_profile' => 'setDangerousGoodsIndProfile',
        'product_document_change_number' => 'setProductDocumentChangeNumber',
        'product_document_page_count' => 'setProductDocumentPageCount',
        'product_document_page_number' => 'setProductDocumentPageNumber',
        'document_is_created_by_cad' => 'setDocumentIsCreatedByCad',
        'production_or_inspection_memo_txt' => 'setProductionOrInspectionMemoTxt',
        'production_memo_page_format' => 'setProductionMemoPageFormat',
        'product_is_highly_viscous' => 'setProductIsHighlyViscous',
        'transport_is_in_bulk' => 'setTransportIsInBulk',
        'prod_effcty_param_vals_are_assigned' => 'setProdEffctyParamValsAreAssigned',
        'prod_is_environmentally_relevant' => 'setProdIsEnvironmentallyRelevant',
        'laboratory_or_design_office' => 'setLaboratoryOrDesignOffice',
        'packaging_product_group' => 'setPackagingProductGroup',
        'packing_reference_product' => 'setPackingReferenceProduct',
        'basic_product' => 'setBasicProduct',
        'product_document_number' => 'setProductDocumentNumber',
        'product_document_version' => 'setProductDocumentVersion',
        'product_document_type' => 'setProductDocumentType',
        'product_document_page_format' => 'setProductDocumentPageFormat',
        'prod_chml_cmplnc_relevance_code' => 'setProdChmlCmplncRelevanceCode',
        'discount_in_kind_eligibility' => 'setDiscountInKindEligibility',
        'product_manufacturer_number' => 'setProductManufacturerNumber',
        'manufacturer_number' => 'setManufacturerNumber',
        'manufacturer_part_profile' => 'setManufacturerPartProfile',
        'own_inventory_managed_product' => 'setOwnInventoryManagedProduct',
        'sap__messages' => 'setSapMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_type' => 'getProductType',
        'creation_date_time' => 'getCreationDateTime',
        'is_marked_for_deletion' => 'getIsMarkedForDeletion',
        'cross_plant_status' => 'getCrossPlantStatus',
        'cross_plant_status_validity_date' => 'getCrossPlantStatusValidityDate',
        'product_old_id' => 'getProductOldId',
        'gross_weight' => 'getGrossWeight',
        'weight_unit' => 'getWeightUnit',
        'weight_iso_unit' => 'getWeightIsoUnit',
        'product_group' => 'getProductGroup',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'item_category_group' => 'getItemCategoryGroup',
        'net_weight' => 'getNetWeight',
        'division' => 'getDivision',
        'volume_unit' => 'getVolumeUnit',
        'volume_iso_unit' => 'getVolumeIsoUnit',
        'product_volume' => 'getProductVolume',
        'authorization_group' => 'getAuthorizationGroup',
        'anp_code' => 'getAnpCode',
        'size_or_dimension_text' => 'getSizeOrDimensionText',
        'industry_standard_name' => 'getIndustryStandardName',
        'product_standard_id' => 'getProductStandardId',
        'international_article_number_cat' => 'getInternationalArticleNumberCat',
        'product_is_configurable' => 'getProductIsConfigurable',
        'is_batch_management_required' => 'getIsBatchManagementRequired',
        'external_product_group' => 'getExternalProductGroup',
        'cross_plant_configurable_product' => 'getCrossPlantConfigurableProduct',
        'serial_no_explicitness_level' => 'getSerialNoExplicitnessLevel',
        'is_approved_batch_record_reqd' => 'getIsApprovedBatchRecordReqd',
        'handling_indicator' => 'getHandlingIndicator',
        'warehouse_product_group' => 'getWarehouseProductGroup',
        'warehouse_storage_condition' => 'getWarehouseStorageCondition',
        'standard_handling_unit_type' => 'getStandardHandlingUnitType',
        'serial_number_profile' => 'getSerialNumberProfile',
        'is_pilferable' => 'getIsPilferable',
        'is_relevant_for_hzds_substances' => 'getIsRelevantForHzdsSubstances',
        'quarantine_period' => 'getQuarantinePeriod',
        'time_unit_for_quarantine_period' => 'getTimeUnitForQuarantinePeriod',
        'quarantine_period_iso_unit' => 'getQuarantinePeriodIsoUnit',
        'quality_inspection_group' => 'getQualityInspectionGroup',
        'handling_unit_type' => 'getHandlingUnitType',
        'has_variable_tare_weight' => 'getHasVariableTareWeight',
        'maximum_packaging_length' => 'getMaximumPackagingLength',
        'maximum_packaging_width' => 'getMaximumPackagingWidth',
        'maximum_packaging_height' => 'getMaximumPackagingHeight',
        'maximum_capacity' => 'getMaximumCapacity',
        'overcapacity_tolerance' => 'getOvercapacityTolerance',
        'unit_for_max_packaging_dimensions' => 'getUnitForMaxPackagingDimensions',
        'max_packgg_dimension_iso_unit' => 'getMaxPackggDimensionIsoUnit',
        'base_unit_specific_product_length' => 'getBaseUnitSpecificProductLength',
        'base_unit_specific_product_width' => 'getBaseUnitSpecificProductWidth',
        'base_unit_specific_product_height' => 'getBaseUnitSpecificProductHeight',
        'product_measurement_unit' => 'getProductMeasurementUnit',
        'product_measurement_iso_unit' => 'getProductMeasurementIsoUnit',
        'article_category' => 'getArticleCategory',
        'industry_sector' => 'getIndustrySector',
        'dangerous_goods_ind_profile' => 'getDangerousGoodsIndProfile',
        'product_document_change_number' => 'getProductDocumentChangeNumber',
        'product_document_page_count' => 'getProductDocumentPageCount',
        'product_document_page_number' => 'getProductDocumentPageNumber',
        'document_is_created_by_cad' => 'getDocumentIsCreatedByCad',
        'production_or_inspection_memo_txt' => 'getProductionOrInspectionMemoTxt',
        'production_memo_page_format' => 'getProductionMemoPageFormat',
        'product_is_highly_viscous' => 'getProductIsHighlyViscous',
        'transport_is_in_bulk' => 'getTransportIsInBulk',
        'prod_effcty_param_vals_are_assigned' => 'getProdEffctyParamValsAreAssigned',
        'prod_is_environmentally_relevant' => 'getProdIsEnvironmentallyRelevant',
        'laboratory_or_design_office' => 'getLaboratoryOrDesignOffice',
        'packaging_product_group' => 'getPackagingProductGroup',
        'packing_reference_product' => 'getPackingReferenceProduct',
        'basic_product' => 'getBasicProduct',
        'product_document_number' => 'getProductDocumentNumber',
        'product_document_version' => 'getProductDocumentVersion',
        'product_document_type' => 'getProductDocumentType',
        'product_document_page_format' => 'getProductDocumentPageFormat',
        'prod_chml_cmplnc_relevance_code' => 'getProdChmlCmplncRelevanceCode',
        'discount_in_kind_eligibility' => 'getDiscountInKindEligibility',
        'product_manufacturer_number' => 'getProductManufacturerNumber',
        'manufacturer_number' => 'getManufacturerNumber',
        'manufacturer_part_profile' => 'getManufacturerPartProfile',
        'own_inventory_managed_product' => 'getOwnInventoryManagedProduct',
        'sap__messages' => 'getSapMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product_type', $data ?? [], null);
        $this->setIfExists('creation_date_time', $data ?? [], null);
        $this->setIfExists('is_marked_for_deletion', $data ?? [], null);
        $this->setIfExists('cross_plant_status', $data ?? [], null);
        $this->setIfExists('cross_plant_status_validity_date', $data ?? [], null);
        $this->setIfExists('product_old_id', $data ?? [], null);
        $this->setIfExists('gross_weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('weight_iso_unit', $data ?? [], null);
        $this->setIfExists('product_group', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('item_category_group', $data ?? [], null);
        $this->setIfExists('net_weight', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('volume_unit', $data ?? [], null);
        $this->setIfExists('volume_iso_unit', $data ?? [], null);
        $this->setIfExists('product_volume', $data ?? [], null);
        $this->setIfExists('authorization_group', $data ?? [], null);
        $this->setIfExists('anp_code', $data ?? [], null);
        $this->setIfExists('size_or_dimension_text', $data ?? [], null);
        $this->setIfExists('industry_standard_name', $data ?? [], null);
        $this->setIfExists('product_standard_id', $data ?? [], null);
        $this->setIfExists('international_article_number_cat', $data ?? [], null);
        $this->setIfExists('product_is_configurable', $data ?? [], null);
        $this->setIfExists('is_batch_management_required', $data ?? [], null);
        $this->setIfExists('external_product_group', $data ?? [], null);
        $this->setIfExists('cross_plant_configurable_product', $data ?? [], null);
        $this->setIfExists('serial_no_explicitness_level', $data ?? [], null);
        $this->setIfExists('is_approved_batch_record_reqd', $data ?? [], null);
        $this->setIfExists('handling_indicator', $data ?? [], null);
        $this->setIfExists('warehouse_product_group', $data ?? [], null);
        $this->setIfExists('warehouse_storage_condition', $data ?? [], null);
        $this->setIfExists('standard_handling_unit_type', $data ?? [], null);
        $this->setIfExists('serial_number_profile', $data ?? [], null);
        $this->setIfExists('is_pilferable', $data ?? [], null);
        $this->setIfExists('is_relevant_for_hzds_substances', $data ?? [], null);
        $this->setIfExists('quarantine_period', $data ?? [], null);
        $this->setIfExists('time_unit_for_quarantine_period', $data ?? [], null);
        $this->setIfExists('quarantine_period_iso_unit', $data ?? [], null);
        $this->setIfExists('quality_inspection_group', $data ?? [], null);
        $this->setIfExists('handling_unit_type', $data ?? [], null);
        $this->setIfExists('has_variable_tare_weight', $data ?? [], null);
        $this->setIfExists('maximum_packaging_length', $data ?? [], null);
        $this->setIfExists('maximum_packaging_width', $data ?? [], null);
        $this->setIfExists('maximum_packaging_height', $data ?? [], null);
        $this->setIfExists('maximum_capacity', $data ?? [], null);
        $this->setIfExists('overcapacity_tolerance', $data ?? [], null);
        $this->setIfExists('unit_for_max_packaging_dimensions', $data ?? [], null);
        $this->setIfExists('max_packgg_dimension_iso_unit', $data ?? [], null);
        $this->setIfExists('base_unit_specific_product_length', $data ?? [], null);
        $this->setIfExists('base_unit_specific_product_width', $data ?? [], null);
        $this->setIfExists('base_unit_specific_product_height', $data ?? [], null);
        $this->setIfExists('product_measurement_unit', $data ?? [], null);
        $this->setIfExists('product_measurement_iso_unit', $data ?? [], null);
        $this->setIfExists('article_category', $data ?? [], null);
        $this->setIfExists('industry_sector', $data ?? [], null);
        $this->setIfExists('dangerous_goods_ind_profile', $data ?? [], null);
        $this->setIfExists('product_document_change_number', $data ?? [], null);
        $this->setIfExists('product_document_page_count', $data ?? [], null);
        $this->setIfExists('product_document_page_number', $data ?? [], null);
        $this->setIfExists('document_is_created_by_cad', $data ?? [], null);
        $this->setIfExists('production_or_inspection_memo_txt', $data ?? [], null);
        $this->setIfExists('production_memo_page_format', $data ?? [], null);
        $this->setIfExists('product_is_highly_viscous', $data ?? [], null);
        $this->setIfExists('transport_is_in_bulk', $data ?? [], null);
        $this->setIfExists('prod_effcty_param_vals_are_assigned', $data ?? [], null);
        $this->setIfExists('prod_is_environmentally_relevant', $data ?? [], null);
        $this->setIfExists('laboratory_or_design_office', $data ?? [], null);
        $this->setIfExists('packaging_product_group', $data ?? [], null);
        $this->setIfExists('packing_reference_product', $data ?? [], null);
        $this->setIfExists('basic_product', $data ?? [], null);
        $this->setIfExists('product_document_number', $data ?? [], null);
        $this->setIfExists('product_document_version', $data ?? [], null);
        $this->setIfExists('product_document_type', $data ?? [], null);
        $this->setIfExists('product_document_page_format', $data ?? [], null);
        $this->setIfExists('prod_chml_cmplnc_relevance_code', $data ?? [], null);
        $this->setIfExists('discount_in_kind_eligibility', $data ?? [], null);
        $this->setIfExists('product_manufacturer_number', $data ?? [], null);
        $this->setIfExists('manufacturer_number', $data ?? [], null);
        $this->setIfExists('manufacturer_part_profile', $data ?? [], null);
        $this->setIfExists('own_inventory_managed_product', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['product_type']) && (mb_strlen($this->container['product_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'product_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['cross_plant_status']) && (mb_strlen($this->container['cross_plant_status']) > 2)) {
            $invalidProperties[] = "invalid value for 'cross_plant_status', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['product_old_id']) && (mb_strlen($this->container['product_old_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'product_old_id', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['weight_unit']) && (mb_strlen($this->container['weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['weight_iso_unit']) && (mb_strlen($this->container['weight_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'weight_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_group']) && (mb_strlen($this->container['product_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'product_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_category_group']) && (mb_strlen($this->container['item_category_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'item_category_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 2)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['volume_unit']) && (mb_strlen($this->container['volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['volume_iso_unit']) && (mb_strlen($this->container['volume_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'volume_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['anp_code']) && (mb_strlen($this->container['anp_code']) > 9)) {
            $invalidProperties[] = "invalid value for 'anp_code', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['size_or_dimension_text']) && (mb_strlen($this->container['size_or_dimension_text']) > 32)) {
            $invalidProperties[] = "invalid value for 'size_or_dimension_text', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['industry_standard_name']) && (mb_strlen($this->container['industry_standard_name']) > 18)) {
            $invalidProperties[] = "invalid value for 'industry_standard_name', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['product_standard_id']) && (mb_strlen($this->container['product_standard_id']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_standard_id', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['international_article_number_cat']) && (mb_strlen($this->container['international_article_number_cat']) > 2)) {
            $invalidProperties[] = "invalid value for 'international_article_number_cat', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['external_product_group']) && (mb_strlen($this->container['external_product_group']) > 18)) {
            $invalidProperties[] = "invalid value for 'external_product_group', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['cross_plant_configurable_product']) && (mb_strlen($this->container['cross_plant_configurable_product']) > 18)) {
            $invalidProperties[] = "invalid value for 'cross_plant_configurable_product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['serial_no_explicitness_level']) && (mb_strlen($this->container['serial_no_explicitness_level']) > 1)) {
            $invalidProperties[] = "invalid value for 'serial_no_explicitness_level', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['handling_indicator']) && (mb_strlen($this->container['handling_indicator']) > 4)) {
            $invalidProperties[] = "invalid value for 'handling_indicator', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['warehouse_product_group']) && (mb_strlen($this->container['warehouse_product_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'warehouse_product_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['warehouse_storage_condition']) && (mb_strlen($this->container['warehouse_storage_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'warehouse_storage_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['standard_handling_unit_type']) && (mb_strlen($this->container['standard_handling_unit_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'standard_handling_unit_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['serial_number_profile']) && (mb_strlen($this->container['serial_number_profile']) > 4)) {
            $invalidProperties[] = "invalid value for 'serial_number_profile', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['time_unit_for_quarantine_period']) && (mb_strlen($this->container['time_unit_for_quarantine_period']) > 3)) {
            $invalidProperties[] = "invalid value for 'time_unit_for_quarantine_period', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['quarantine_period_iso_unit']) && (mb_strlen($this->container['quarantine_period_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'quarantine_period_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['quality_inspection_group']) && (mb_strlen($this->container['quality_inspection_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'quality_inspection_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['handling_unit_type']) && (mb_strlen($this->container['handling_unit_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'handling_unit_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['unit_for_max_packaging_dimensions']) && (mb_strlen($this->container['unit_for_max_packaging_dimensions']) > 3)) {
            $invalidProperties[] = "invalid value for 'unit_for_max_packaging_dimensions', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['max_packgg_dimension_iso_unit']) && (mb_strlen($this->container['max_packgg_dimension_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'max_packgg_dimension_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_measurement_unit']) && (mb_strlen($this->container['product_measurement_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_measurement_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_measurement_iso_unit']) && (mb_strlen($this->container['product_measurement_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_measurement_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['article_category']) && (mb_strlen($this->container['article_category']) > 2)) {
            $invalidProperties[] = "invalid value for 'article_category', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['industry_sector']) && (mb_strlen($this->container['industry_sector']) > 1)) {
            $invalidProperties[] = "invalid value for 'industry_sector', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['dangerous_goods_ind_profile']) && (mb_strlen($this->container['dangerous_goods_ind_profile']) > 3)) {
            $invalidProperties[] = "invalid value for 'dangerous_goods_ind_profile', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_document_change_number']) && (mb_strlen($this->container['product_document_change_number']) > 6)) {
            $invalidProperties[] = "invalid value for 'product_document_change_number', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['product_document_page_count']) && (mb_strlen($this->container['product_document_page_count']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_document_page_count', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_document_page_number']) && (mb_strlen($this->container['product_document_page_number']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_document_page_number', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['production_or_inspection_memo_txt']) && (mb_strlen($this->container['production_or_inspection_memo_txt']) > 18)) {
            $invalidProperties[] = "invalid value for 'production_or_inspection_memo_txt', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['production_memo_page_format']) && (mb_strlen($this->container['production_memo_page_format']) > 4)) {
            $invalidProperties[] = "invalid value for 'production_memo_page_format', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['laboratory_or_design_office']) && (mb_strlen($this->container['laboratory_or_design_office']) > 3)) {
            $invalidProperties[] = "invalid value for 'laboratory_or_design_office', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['packaging_product_group']) && (mb_strlen($this->container['packaging_product_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'packaging_product_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['packing_reference_product']) && (mb_strlen($this->container['packing_reference_product']) > 18)) {
            $invalidProperties[] = "invalid value for 'packing_reference_product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['basic_product']) && (mb_strlen($this->container['basic_product']) > 48)) {
            $invalidProperties[] = "invalid value for 'basic_product', the character length must be smaller than or equal to 48.";
        }

        if (!is_null($this->container['product_document_number']) && (mb_strlen($this->container['product_document_number']) > 22)) {
            $invalidProperties[] = "invalid value for 'product_document_number', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['product_document_version']) && (mb_strlen($this->container['product_document_version']) > 2)) {
            $invalidProperties[] = "invalid value for 'product_document_version', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['product_document_type']) && (mb_strlen($this->container['product_document_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_document_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['product_document_page_format']) && (mb_strlen($this->container['product_document_page_format']) > 4)) {
            $invalidProperties[] = "invalid value for 'product_document_page_format', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['prod_chml_cmplnc_relevance_code']) && (mb_strlen($this->container['prod_chml_cmplnc_relevance_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'prod_chml_cmplnc_relevance_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['discount_in_kind_eligibility']) && (mb_strlen($this->container['discount_in_kind_eligibility']) > 1)) {
            $invalidProperties[] = "invalid value for 'discount_in_kind_eligibility', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_manufacturer_number']) && (mb_strlen($this->container['product_manufacturer_number']) > 40)) {
            $invalidProperties[] = "invalid value for 'product_manufacturer_number', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['manufacturer_number']) && (mb_strlen($this->container['manufacturer_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'manufacturer_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['manufacturer_part_profile']) && (mb_strlen($this->container['manufacturer_part_profile']) > 4)) {
            $invalidProperties[] = "invalid value for 'manufacturer_part_profile', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['own_inventory_managed_product']) && (mb_strlen($this->container['own_inventory_managed_product']) > 18)) {
            $invalidProperties[] = "invalid value for 'own_inventory_managed_product', the character length must be smaller than or equal to 18.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type product_type
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        if (is_null($product_type)) {
            throw new \InvalidArgumentException('non-nullable product_type cannot be null');
        }
        if ((mb_strlen($product_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $product_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets creation_date_time
     *
     * @return \DateTime|null
     */
    public function getCreationDateTime()
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time
     *
     * @param \DateTime|null $creation_date_time Product Created On
     *
     * @return self
     */
    public function setCreationDateTime($creation_date_time)
    {
        if (is_null($creation_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets is_marked_for_deletion
     *
     * @return bool|null
     */
    public function getIsMarkedForDeletion()
    {
        return $this->container['is_marked_for_deletion'];
    }

    /**
     * Sets is_marked_for_deletion
     *
     * @param bool|null $is_marked_for_deletion Deletion Indicator
     *
     * @return self
     */
    public function setIsMarkedForDeletion($is_marked_for_deletion)
    {
        if (is_null($is_marked_for_deletion)) {
            throw new \InvalidArgumentException('non-nullable is_marked_for_deletion cannot be null');
        }
        $this->container['is_marked_for_deletion'] = $is_marked_for_deletion;

        return $this;
    }

    /**
     * Gets cross_plant_status
     *
     * @return string|null
     */
    public function getCrossPlantStatus()
    {
        return $this->container['cross_plant_status'];
    }

    /**
     * Sets cross_plant_status
     *
     * @param string|null $cross_plant_status Cross-Plant Product Status
     *
     * @return self
     */
    public function setCrossPlantStatus($cross_plant_status)
    {
        if (is_null($cross_plant_status)) {
            throw new \InvalidArgumentException('non-nullable cross_plant_status cannot be null');
        }
        if ((mb_strlen($cross_plant_status) > 2)) {
            throw new \InvalidArgumentException('invalid length for $cross_plant_status when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['cross_plant_status'] = $cross_plant_status;

        return $this;
    }

    /**
     * Gets cross_plant_status_validity_date
     *
     * @return \DateTime|null
     */
    public function getCrossPlantStatusValidityDate()
    {
        return $this->container['cross_plant_status_validity_date'];
    }

    /**
     * Sets cross_plant_status_validity_date
     *
     * @param \DateTime|null $cross_plant_status_validity_date Date from which the cross-plant material status is valid
     *
     * @return self
     */
    public function setCrossPlantStatusValidityDate($cross_plant_status_validity_date)
    {
        if (is_null($cross_plant_status_validity_date)) {
            array_push($this->openAPINullablesSetToNull, 'cross_plant_status_validity_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cross_plant_status_validity_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cross_plant_status_validity_date'] = $cross_plant_status_validity_date;

        return $this;
    }

    /**
     * Gets product_old_id
     *
     * @return string|null
     */
    public function getProductOldId()
    {
        return $this->container['product_old_id'];
    }

    /**
     * Sets product_old_id
     *
     * @param string|null $product_old_id product_old_id
     *
     * @return self
     */
    public function setProductOldId($product_old_id)
    {
        if (is_null($product_old_id)) {
            throw new \InvalidArgumentException('non-nullable product_old_id cannot be null');
        }
        if ((mb_strlen($product_old_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $product_old_id when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['product_old_id'] = $product_old_id;

        return $this;
    }

    /**
     * Gets gross_weight
     *
     * @return \BeLenka\SAP\ProductODV4\Model\GrossWeight|null
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     *
     * @param \BeLenka\SAP\ProductODV4\Model\GrossWeight|null $gross_weight gross_weight
     *
     * @return self
     */
    public function setGrossWeight($gross_weight)
    {
        if (is_null($gross_weight)) {
            throw new \InvalidArgumentException('non-nullable gross_weight cannot be null');
        }
        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        if ((mb_strlen($weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $weight_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets weight_iso_unit
     *
     * @return string|null
     */
    public function getWeightIsoUnit()
    {
        return $this->container['weight_iso_unit'];
    }

    /**
     * Sets weight_iso_unit
     *
     * @param string|null $weight_iso_unit Unit of weight in ISO code
     *
     * @return self
     */
    public function setWeightIsoUnit($weight_iso_unit)
    {
        if (is_null($weight_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_iso_unit cannot be null');
        }
        if ((mb_strlen($weight_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $weight_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['weight_iso_unit'] = $weight_iso_unit;

        return $this;
    }

    /**
     * Gets product_group
     *
     * @return string|null
     */
    public function getProductGroup()
    {
        return $this->container['product_group'];
    }

    /**
     * Sets product_group
     *
     * @param string|null $product_group product_group
     *
     * @return self
     */
    public function setProductGroup($product_group)
    {
        if (is_null($product_group)) {
            throw new \InvalidArgumentException('non-nullable product_group cannot be null');
        }
        if ((mb_strlen($product_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $product_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 9.');
        }

        $this->container['product_group'] = $product_group;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit Base Unit of Measure - No Conversion Routine
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets item_category_group
     *
     * @return string|null
     */
    public function getItemCategoryGroup()
    {
        return $this->container['item_category_group'];
    }

    /**
     * Sets item_category_group
     *
     * @param string|null $item_category_group General item category group
     *
     * @return self
     */
    public function setItemCategoryGroup($item_category_group)
    {
        if (is_null($item_category_group)) {
            throw new \InvalidArgumentException('non-nullable item_category_group cannot be null');
        }
        if ((mb_strlen($item_category_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $item_category_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['item_category_group'] = $item_category_group;

        return $this;
    }

    /**
     * Gets net_weight
     *
     * @return \BeLenka\SAP\ProductODV4\Model\NetWeight|null
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     *
     * @param \BeLenka\SAP\ProductODV4\Model\NetWeight|null $net_weight net_weight
     *
     * @return self
     */
    public function setNetWeight($net_weight)
    {
        if (is_null($net_weight)) {
            throw new \InvalidArgumentException('non-nullable net_weight cannot be null');
        }
        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            throw new \InvalidArgumentException('non-nullable division cannot be null');
        }
        if ((mb_strlen($division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $division when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets volume_unit
     *
     * @return string|null
     */
    public function getVolumeUnit()
    {
        return $this->container['volume_unit'];
    }

    /**
     * Sets volume_unit
     *
     * @param string|null $volume_unit volume_unit
     *
     * @return self
     */
    public function setVolumeUnit($volume_unit)
    {
        if (is_null($volume_unit)) {
            throw new \InvalidArgumentException('non-nullable volume_unit cannot be null');
        }
        if ((mb_strlen($volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $volume_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['volume_unit'] = $volume_unit;

        return $this;
    }

    /**
     * Gets volume_iso_unit
     *
     * @return string|null
     */
    public function getVolumeIsoUnit()
    {
        return $this->container['volume_iso_unit'];
    }

    /**
     * Sets volume_iso_unit
     *
     * @param string|null $volume_iso_unit Volume unit in ISO code
     *
     * @return self
     */
    public function setVolumeIsoUnit($volume_iso_unit)
    {
        if (is_null($volume_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable volume_iso_unit cannot be null');
        }
        if ((mb_strlen($volume_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $volume_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['volume_iso_unit'] = $volume_iso_unit;

        return $this;
    }

    /**
     * Gets product_volume
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Volume|null
     */
    public function getProductVolume()
    {
        return $this->container['product_volume'];
    }

    /**
     * Sets product_volume
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Volume|null $product_volume product_volume
     *
     * @return self
     */
    public function setProductVolume($product_volume)
    {
        if (is_null($product_volume)) {
            throw new \InvalidArgumentException('non-nullable product_volume cannot be null');
        }
        $this->container['product_volume'] = $product_volume;

        return $this;
    }

    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group authorization_group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            throw new \InvalidArgumentException('non-nullable authorization_group cannot be null');
        }
        if ((mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }

    /**
     * Gets anp_code
     *
     * @return string|null
     */
    public function getAnpCode()
    {
        return $this->container['anp_code'];
    }

    /**
     * Sets anp_code
     *
     * @param string|null $anp_code anp_code
     *
     * @return self
     */
    public function setAnpCode($anp_code)
    {
        if (is_null($anp_code)) {
            throw new \InvalidArgumentException('non-nullable anp_code cannot be null');
        }
        if ((mb_strlen($anp_code) > 9)) {
            throw new \InvalidArgumentException('invalid length for $anp_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 9.');
        }

        $this->container['anp_code'] = $anp_code;

        return $this;
    }

    /**
     * Gets size_or_dimension_text
     *
     * @return string|null
     */
    public function getSizeOrDimensionText()
    {
        return $this->container['size_or_dimension_text'];
    }

    /**
     * Sets size_or_dimension_text
     *
     * @param string|null $size_or_dimension_text size_or_dimension_text
     *
     * @return self
     */
    public function setSizeOrDimensionText($size_or_dimension_text)
    {
        if (is_null($size_or_dimension_text)) {
            throw new \InvalidArgumentException('non-nullable size_or_dimension_text cannot be null');
        }
        if ((mb_strlen($size_or_dimension_text) > 32)) {
            throw new \InvalidArgumentException('invalid length for $size_or_dimension_text when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 32.');
        }

        $this->container['size_or_dimension_text'] = $size_or_dimension_text;

        return $this;
    }

    /**
     * Gets industry_standard_name
     *
     * @return string|null
     */
    public function getIndustryStandardName()
    {
        return $this->container['industry_standard_name'];
    }

    /**
     * Sets industry_standard_name
     *
     * @param string|null $industry_standard_name Industry Standard Description (such as ANSI or ISO)
     *
     * @return self
     */
    public function setIndustryStandardName($industry_standard_name)
    {
        if (is_null($industry_standard_name)) {
            throw new \InvalidArgumentException('non-nullable industry_standard_name cannot be null');
        }
        if ((mb_strlen($industry_standard_name) > 18)) {
            throw new \InvalidArgumentException('invalid length for $industry_standard_name when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['industry_standard_name'] = $industry_standard_name;

        return $this;
    }

    /**
     * Gets product_standard_id
     *
     * @return string|null
     */
    public function getProductStandardId()
    {
        return $this->container['product_standard_id'];
    }

    /**
     * Sets product_standard_id
     *
     * @param string|null $product_standard_id Global Trade Item Number (EAN/UPC/GTIN)
     *
     * @return self
     */
    public function setProductStandardId($product_standard_id)
    {
        if (is_null($product_standard_id)) {
            throw new \InvalidArgumentException('non-nullable product_standard_id cannot be null');
        }
        if ((mb_strlen($product_standard_id) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_standard_id when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['product_standard_id'] = $product_standard_id;

        return $this;
    }

    /**
     * Gets international_article_number_cat
     *
     * @return string|null
     */
    public function getInternationalArticleNumberCat()
    {
        return $this->container['international_article_number_cat'];
    }

    /**
     * Sets international_article_number_cat
     *
     * @param string|null $international_article_number_cat Category of International Article Number (EAN)
     *
     * @return self
     */
    public function setInternationalArticleNumberCat($international_article_number_cat)
    {
        if (is_null($international_article_number_cat)) {
            throw new \InvalidArgumentException('non-nullable international_article_number_cat cannot be null');
        }
        if ((mb_strlen($international_article_number_cat) > 2)) {
            throw new \InvalidArgumentException('invalid length for $international_article_number_cat when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['international_article_number_cat'] = $international_article_number_cat;

        return $this;
    }

    /**
     * Gets product_is_configurable
     *
     * @return bool|null
     */
    public function getProductIsConfigurable()
    {
        return $this->container['product_is_configurable'];
    }

    /**
     * Sets product_is_configurable
     *
     * @param bool|null $product_is_configurable Product is Configurable
     *
     * @return self
     */
    public function setProductIsConfigurable($product_is_configurable)
    {
        if (is_null($product_is_configurable)) {
            throw new \InvalidArgumentException('non-nullable product_is_configurable cannot be null');
        }
        $this->container['product_is_configurable'] = $product_is_configurable;

        return $this;
    }

    /**
     * Gets is_batch_management_required
     *
     * @return bool|null
     */
    public function getIsBatchManagementRequired()
    {
        return $this->container['is_batch_management_required'];
    }

    /**
     * Sets is_batch_management_required
     *
     * @param bool|null $is_batch_management_required Batch Management Requirement Indicator
     *
     * @return self
     */
    public function setIsBatchManagementRequired($is_batch_management_required)
    {
        if (is_null($is_batch_management_required)) {
            throw new \InvalidArgumentException('non-nullable is_batch_management_required cannot be null');
        }
        $this->container['is_batch_management_required'] = $is_batch_management_required;

        return $this;
    }

    /**
     * Gets external_product_group
     *
     * @return string|null
     */
    public function getExternalProductGroup()
    {
        return $this->container['external_product_group'];
    }

    /**
     * Sets external_product_group
     *
     * @param string|null $external_product_group External Product Group
     *
     * @return self
     */
    public function setExternalProductGroup($external_product_group)
    {
        if (is_null($external_product_group)) {
            throw new \InvalidArgumentException('non-nullable external_product_group cannot be null');
        }
        if ((mb_strlen($external_product_group) > 18)) {
            throw new \InvalidArgumentException('invalid length for $external_product_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['external_product_group'] = $external_product_group;

        return $this;
    }

    /**
     * Gets cross_plant_configurable_product
     *
     * @return string|null
     */
    public function getCrossPlantConfigurableProduct()
    {
        return $this->container['cross_plant_configurable_product'];
    }

    /**
     * Sets cross_plant_configurable_product
     *
     * @param string|null $cross_plant_configurable_product Cross-Plant Configurable Product
     *
     * @return self
     */
    public function setCrossPlantConfigurableProduct($cross_plant_configurable_product)
    {
        if (is_null($cross_plant_configurable_product)) {
            throw new \InvalidArgumentException('non-nullable cross_plant_configurable_product cannot be null');
        }
        if ((mb_strlen($cross_plant_configurable_product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $cross_plant_configurable_product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['cross_plant_configurable_product'] = $cross_plant_configurable_product;

        return $this;
    }

    /**
     * Gets serial_no_explicitness_level
     *
     * @return string|null
     */
    public function getSerialNoExplicitnessLevel()
    {
        return $this->container['serial_no_explicitness_level'];
    }

    /**
     * Sets serial_no_explicitness_level
     *
     * @param string|null $serial_no_explicitness_level Level of Explicitness for Serial Number
     *
     * @return self
     */
    public function setSerialNoExplicitnessLevel($serial_no_explicitness_level)
    {
        if (is_null($serial_no_explicitness_level)) {
            throw new \InvalidArgumentException('non-nullable serial_no_explicitness_level cannot be null');
        }
        if ((mb_strlen($serial_no_explicitness_level) > 1)) {
            throw new \InvalidArgumentException('invalid length for $serial_no_explicitness_level when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['serial_no_explicitness_level'] = $serial_no_explicitness_level;

        return $this;
    }

    /**
     * Gets is_approved_batch_record_reqd
     *
     * @return bool|null
     */
    public function getIsApprovedBatchRecordReqd()
    {
        return $this->container['is_approved_batch_record_reqd'];
    }

    /**
     * Sets is_approved_batch_record_reqd
     *
     * @param bool|null $is_approved_batch_record_reqd Approved Batch Record Required
     *
     * @return self
     */
    public function setIsApprovedBatchRecordReqd($is_approved_batch_record_reqd)
    {
        if (is_null($is_approved_batch_record_reqd)) {
            throw new \InvalidArgumentException('non-nullable is_approved_batch_record_reqd cannot be null');
        }
        $this->container['is_approved_batch_record_reqd'] = $is_approved_batch_record_reqd;

        return $this;
    }

    /**
     * Gets handling_indicator
     *
     * @return string|null
     */
    public function getHandlingIndicator()
    {
        return $this->container['handling_indicator'];
    }

    /**
     * Sets handling_indicator
     *
     * @param string|null $handling_indicator handling_indicator
     *
     * @return self
     */
    public function setHandlingIndicator($handling_indicator)
    {
        if (is_null($handling_indicator)) {
            throw new \InvalidArgumentException('non-nullable handling_indicator cannot be null');
        }
        if ((mb_strlen($handling_indicator) > 4)) {
            throw new \InvalidArgumentException('invalid length for $handling_indicator when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['handling_indicator'] = $handling_indicator;

        return $this;
    }

    /**
     * Gets warehouse_product_group
     *
     * @return string|null
     */
    public function getWarehouseProductGroup()
    {
        return $this->container['warehouse_product_group'];
    }

    /**
     * Sets warehouse_product_group
     *
     * @param string|null $warehouse_product_group Warehouse Material Group
     *
     * @return self
     */
    public function setWarehouseProductGroup($warehouse_product_group)
    {
        if (is_null($warehouse_product_group)) {
            throw new \InvalidArgumentException('non-nullable warehouse_product_group cannot be null');
        }
        if ((mb_strlen($warehouse_product_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_product_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['warehouse_product_group'] = $warehouse_product_group;

        return $this;
    }

    /**
     * Gets warehouse_storage_condition
     *
     * @return string|null
     */
    public function getWarehouseStorageCondition()
    {
        return $this->container['warehouse_storage_condition'];
    }

    /**
     * Sets warehouse_storage_condition
     *
     * @param string|null $warehouse_storage_condition Warehouse Storage Condition
     *
     * @return self
     */
    public function setWarehouseStorageCondition($warehouse_storage_condition)
    {
        if (is_null($warehouse_storage_condition)) {
            throw new \InvalidArgumentException('non-nullable warehouse_storage_condition cannot be null');
        }
        if ((mb_strlen($warehouse_storage_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_storage_condition when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['warehouse_storage_condition'] = $warehouse_storage_condition;

        return $this;
    }

    /**
     * Gets standard_handling_unit_type
     *
     * @return string|null
     */
    public function getStandardHandlingUnitType()
    {
        return $this->container['standard_handling_unit_type'];
    }

    /**
     * Sets standard_handling_unit_type
     *
     * @param string|null $standard_handling_unit_type standard_handling_unit_type
     *
     * @return self
     */
    public function setStandardHandlingUnitType($standard_handling_unit_type)
    {
        if (is_null($standard_handling_unit_type)) {
            throw new \InvalidArgumentException('non-nullable standard_handling_unit_type cannot be null');
        }
        if ((mb_strlen($standard_handling_unit_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $standard_handling_unit_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['standard_handling_unit_type'] = $standard_handling_unit_type;

        return $this;
    }

    /**
     * Gets serial_number_profile
     *
     * @return string|null
     */
    public function getSerialNumberProfile()
    {
        return $this->container['serial_number_profile'];
    }

    /**
     * Sets serial_number_profile
     *
     * @param string|null $serial_number_profile Serial Number Profile
     *
     * @return self
     */
    public function setSerialNumberProfile($serial_number_profile)
    {
        if (is_null($serial_number_profile)) {
            throw new \InvalidArgumentException('non-nullable serial_number_profile cannot be null');
        }
        if ((mb_strlen($serial_number_profile) > 4)) {
            throw new \InvalidArgumentException('invalid length for $serial_number_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['serial_number_profile'] = $serial_number_profile;

        return $this;
    }

    /**
     * Gets is_pilferable
     *
     * @return bool|null
     */
    public function getIsPilferable()
    {
        return $this->container['is_pilferable'];
    }

    /**
     * Sets is_pilferable
     *
     * @param bool|null $is_pilferable is_pilferable
     *
     * @return self
     */
    public function setIsPilferable($is_pilferable)
    {
        if (is_null($is_pilferable)) {
            throw new \InvalidArgumentException('non-nullable is_pilferable cannot be null');
        }
        $this->container['is_pilferable'] = $is_pilferable;

        return $this;
    }

    /**
     * Gets is_relevant_for_hzds_substances
     *
     * @return bool|null
     */
    public function getIsRelevantForHzdsSubstances()
    {
        return $this->container['is_relevant_for_hzds_substances'];
    }

    /**
     * Sets is_relevant_for_hzds_substances
     *
     * @param bool|null $is_relevant_for_hzds_substances Relevant for Hazardous Substances
     *
     * @return self
     */
    public function setIsRelevantForHzdsSubstances($is_relevant_for_hzds_substances)
    {
        if (is_null($is_relevant_for_hzds_substances)) {
            throw new \InvalidArgumentException('non-nullable is_relevant_for_hzds_substances cannot be null');
        }
        $this->container['is_relevant_for_hzds_substances'] = $is_relevant_for_hzds_substances;

        return $this;
    }

    /**
     * Gets quarantine_period
     *
     * @return \BeLenka\SAP\ProductODV4\Model\QuarantPer|null
     */
    public function getQuarantinePeriod()
    {
        return $this->container['quarantine_period'];
    }

    /**
     * Sets quarantine_period
     *
     * @param \BeLenka\SAP\ProductODV4\Model\QuarantPer|null $quarantine_period quarantine_period
     *
     * @return self
     */
    public function setQuarantinePeriod($quarantine_period)
    {
        if (is_null($quarantine_period)) {
            throw new \InvalidArgumentException('non-nullable quarantine_period cannot be null');
        }
        $this->container['quarantine_period'] = $quarantine_period;

        return $this;
    }

    /**
     * Gets time_unit_for_quarantine_period
     *
     * @return string|null
     */
    public function getTimeUnitForQuarantinePeriod()
    {
        return $this->container['time_unit_for_quarantine_period'];
    }

    /**
     * Sets time_unit_for_quarantine_period
     *
     * @param string|null $time_unit_for_quarantine_period Time Unit for Quarantine Period
     *
     * @return self
     */
    public function setTimeUnitForQuarantinePeriod($time_unit_for_quarantine_period)
    {
        if (is_null($time_unit_for_quarantine_period)) {
            throw new \InvalidArgumentException('non-nullable time_unit_for_quarantine_period cannot be null');
        }
        if ((mb_strlen($time_unit_for_quarantine_period) > 3)) {
            throw new \InvalidArgumentException('invalid length for $time_unit_for_quarantine_period when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['time_unit_for_quarantine_period'] = $time_unit_for_quarantine_period;

        return $this;
    }

    /**
     * Gets quarantine_period_iso_unit
     *
     * @return string|null
     */
    public function getQuarantinePeriodIsoUnit()
    {
        return $this->container['quarantine_period_iso_unit'];
    }

    /**
     * Sets quarantine_period_iso_unit
     *
     * @param string|null $quarantine_period_iso_unit Time Unit for Quarantine Time in ISO Code
     *
     * @return self
     */
    public function setQuarantinePeriodIsoUnit($quarantine_period_iso_unit)
    {
        if (is_null($quarantine_period_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable quarantine_period_iso_unit cannot be null');
        }
        if ((mb_strlen($quarantine_period_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $quarantine_period_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['quarantine_period_iso_unit'] = $quarantine_period_iso_unit;

        return $this;
    }

    /**
     * Gets quality_inspection_group
     *
     * @return string|null
     */
    public function getQualityInspectionGroup()
    {
        return $this->container['quality_inspection_group'];
    }

    /**
     * Sets quality_inspection_group
     *
     * @param string|null $quality_inspection_group Quality Inspection Group
     *
     * @return self
     */
    public function setQualityInspectionGroup($quality_inspection_group)
    {
        if (is_null($quality_inspection_group)) {
            throw new \InvalidArgumentException('non-nullable quality_inspection_group cannot be null');
        }
        if ((mb_strlen($quality_inspection_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $quality_inspection_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['quality_inspection_group'] = $quality_inspection_group;

        return $this;
    }

    /**
     * Gets handling_unit_type
     *
     * @return string|null
     */
    public function getHandlingUnitType()
    {
        return $this->container['handling_unit_type'];
    }

    /**
     * Sets handling_unit_type
     *
     * @param string|null $handling_unit_type handling_unit_type
     *
     * @return self
     */
    public function setHandlingUnitType($handling_unit_type)
    {
        if (is_null($handling_unit_type)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_type cannot be null');
        }
        if ((mb_strlen($handling_unit_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['handling_unit_type'] = $handling_unit_type;

        return $this;
    }

    /**
     * Gets has_variable_tare_weight
     *
     * @return bool|null
     */
    public function getHasVariableTareWeight()
    {
        return $this->container['has_variable_tare_weight'];
    }

    /**
     * Sets has_variable_tare_weight
     *
     * @param bool|null $has_variable_tare_weight Variable Tare Weight
     *
     * @return self
     */
    public function setHasVariableTareWeight($has_variable_tare_weight)
    {
        if (is_null($has_variable_tare_weight)) {
            throw new \InvalidArgumentException('non-nullable has_variable_tare_weight cannot be null');
        }
        $this->container['has_variable_tare_weight'] = $has_variable_tare_weight;

        return $this;
    }

    /**
     * Gets maximum_packaging_length
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaxPackLength|null
     */
    public function getMaximumPackagingLength()
    {
        return $this->container['maximum_packaging_length'];
    }

    /**
     * Sets maximum_packaging_length
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaxPackLength|null $maximum_packaging_length maximum_packaging_length
     *
     * @return self
     */
    public function setMaximumPackagingLength($maximum_packaging_length)
    {
        if (is_null($maximum_packaging_length)) {
            throw new \InvalidArgumentException('non-nullable maximum_packaging_length cannot be null');
        }
        $this->container['maximum_packaging_length'] = $maximum_packaging_length;

        return $this;
    }

    /**
     * Gets maximum_packaging_width
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaxPackWidth|null
     */
    public function getMaximumPackagingWidth()
    {
        return $this->container['maximum_packaging_width'];
    }

    /**
     * Sets maximum_packaging_width
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaxPackWidth|null $maximum_packaging_width maximum_packaging_width
     *
     * @return self
     */
    public function setMaximumPackagingWidth($maximum_packaging_width)
    {
        if (is_null($maximum_packaging_width)) {
            throw new \InvalidArgumentException('non-nullable maximum_packaging_width cannot be null');
        }
        $this->container['maximum_packaging_width'] = $maximum_packaging_width;

        return $this;
    }

    /**
     * Gets maximum_packaging_height
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaxPackHeight|null
     */
    public function getMaximumPackagingHeight()
    {
        return $this->container['maximum_packaging_height'];
    }

    /**
     * Sets maximum_packaging_height
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaxPackHeight|null $maximum_packaging_height maximum_packaging_height
     *
     * @return self
     */
    public function setMaximumPackagingHeight($maximum_packaging_height)
    {
        if (is_null($maximum_packaging_height)) {
            throw new \InvalidArgumentException('non-nullable maximum_packaging_height cannot be null');
        }
        $this->container['maximum_packaging_height'] = $maximum_packaging_height;

        return $this;
    }

    /**
     * Gets maximum_capacity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaximumCapacity|null
     */
    public function getMaximumCapacity()
    {
        return $this->container['maximum_capacity'];
    }

    /**
     * Sets maximum_capacity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaximumCapacity|null $maximum_capacity maximum_capacity
     *
     * @return self
     */
    public function setMaximumCapacity($maximum_capacity)
    {
        if (is_null($maximum_capacity)) {
            throw new \InvalidArgumentException('non-nullable maximum_capacity cannot be null');
        }
        $this->container['maximum_capacity'] = $maximum_capacity;

        return $this;
    }

    /**
     * Gets overcapacity_tolerance
     *
     * @return \BeLenka\SAP\ProductODV4\Model\OvercapacityToler|null
     */
    public function getOvercapacityTolerance()
    {
        return $this->container['overcapacity_tolerance'];
    }

    /**
     * Sets overcapacity_tolerance
     *
     * @param \BeLenka\SAP\ProductODV4\Model\OvercapacityToler|null $overcapacity_tolerance overcapacity_tolerance
     *
     * @return self
     */
    public function setOvercapacityTolerance($overcapacity_tolerance)
    {
        if (is_null($overcapacity_tolerance)) {
            throw new \InvalidArgumentException('non-nullable overcapacity_tolerance cannot be null');
        }
        $this->container['overcapacity_tolerance'] = $overcapacity_tolerance;

        return $this;
    }

    /**
     * Gets unit_for_max_packaging_dimensions
     *
     * @return string|null
     */
    public function getUnitForMaxPackagingDimensions()
    {
        return $this->container['unit_for_max_packaging_dimensions'];
    }

    /**
     * Sets unit_for_max_packaging_dimensions
     *
     * @param string|null $unit_for_max_packaging_dimensions Unit of Measure for Maximum Packing Length/Width/Height
     *
     * @return self
     */
    public function setUnitForMaxPackagingDimensions($unit_for_max_packaging_dimensions)
    {
        if (is_null($unit_for_max_packaging_dimensions)) {
            throw new \InvalidArgumentException('non-nullable unit_for_max_packaging_dimensions cannot be null');
        }
        if ((mb_strlen($unit_for_max_packaging_dimensions) > 3)) {
            throw new \InvalidArgumentException('invalid length for $unit_for_max_packaging_dimensions when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['unit_for_max_packaging_dimensions'] = $unit_for_max_packaging_dimensions;

        return $this;
    }

    /**
     * Gets max_packgg_dimension_iso_unit
     *
     * @return string|null
     */
    public function getMaxPackggDimensionIsoUnit()
    {
        return $this->container['max_packgg_dimension_iso_unit'];
    }

    /**
     * Sets max_packgg_dimension_iso_unit
     *
     * @param string|null $max_packgg_dimension_iso_unit Unit for Maximum Packing Length/Width/Height in ISO Code
     *
     * @return self
     */
    public function setMaxPackggDimensionIsoUnit($max_packgg_dimension_iso_unit)
    {
        if (is_null($max_packgg_dimension_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable max_packgg_dimension_iso_unit cannot be null');
        }
        if ((mb_strlen($max_packgg_dimension_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $max_packgg_dimension_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['max_packgg_dimension_iso_unit'] = $max_packgg_dimension_iso_unit;

        return $this;
    }

    /**
     * Gets base_unit_specific_product_length
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Length|null
     */
    public function getBaseUnitSpecificProductLength()
    {
        return $this->container['base_unit_specific_product_length'];
    }

    /**
     * Sets base_unit_specific_product_length
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Length|null $base_unit_specific_product_length base_unit_specific_product_length
     *
     * @return self
     */
    public function setBaseUnitSpecificProductLength($base_unit_specific_product_length)
    {
        if (is_null($base_unit_specific_product_length)) {
            throw new \InvalidArgumentException('non-nullable base_unit_specific_product_length cannot be null');
        }
        $this->container['base_unit_specific_product_length'] = $base_unit_specific_product_length;

        return $this;
    }

    /**
     * Gets base_unit_specific_product_width
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Width|null
     */
    public function getBaseUnitSpecificProductWidth()
    {
        return $this->container['base_unit_specific_product_width'];
    }

    /**
     * Sets base_unit_specific_product_width
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Width|null $base_unit_specific_product_width base_unit_specific_product_width
     *
     * @return self
     */
    public function setBaseUnitSpecificProductWidth($base_unit_specific_product_width)
    {
        if (is_null($base_unit_specific_product_width)) {
            throw new \InvalidArgumentException('non-nullable base_unit_specific_product_width cannot be null');
        }
        $this->container['base_unit_specific_product_width'] = $base_unit_specific_product_width;

        return $this;
    }

    /**
     * Gets base_unit_specific_product_height
     *
     * @return \BeLenka\SAP\ProductODV4\Model\Height|null
     */
    public function getBaseUnitSpecificProductHeight()
    {
        return $this->container['base_unit_specific_product_height'];
    }

    /**
     * Sets base_unit_specific_product_height
     *
     * @param \BeLenka\SAP\ProductODV4\Model\Height|null $base_unit_specific_product_height base_unit_specific_product_height
     *
     * @return self
     */
    public function setBaseUnitSpecificProductHeight($base_unit_specific_product_height)
    {
        if (is_null($base_unit_specific_product_height)) {
            throw new \InvalidArgumentException('non-nullable base_unit_specific_product_height cannot be null');
        }
        $this->container['base_unit_specific_product_height'] = $base_unit_specific_product_height;

        return $this;
    }

    /**
     * Gets product_measurement_unit
     *
     * @return string|null
     */
    public function getProductMeasurementUnit()
    {
        return $this->container['product_measurement_unit'];
    }

    /**
     * Sets product_measurement_unit
     *
     * @param string|null $product_measurement_unit Unit of Dimension for Length/Width/Height
     *
     * @return self
     */
    public function setProductMeasurementUnit($product_measurement_unit)
    {
        if (is_null($product_measurement_unit)) {
            throw new \InvalidArgumentException('non-nullable product_measurement_unit cannot be null');
        }
        if ((mb_strlen($product_measurement_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_measurement_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['product_measurement_unit'] = $product_measurement_unit;

        return $this;
    }

    /**
     * Gets product_measurement_iso_unit
     *
     * @return string|null
     */
    public function getProductMeasurementIsoUnit()
    {
        return $this->container['product_measurement_iso_unit'];
    }

    /**
     * Sets product_measurement_iso_unit
     *
     * @param string|null $product_measurement_iso_unit Unit for length/breadth/height in ISO code
     *
     * @return self
     */
    public function setProductMeasurementIsoUnit($product_measurement_iso_unit)
    {
        if (is_null($product_measurement_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable product_measurement_iso_unit cannot be null');
        }
        if ((mb_strlen($product_measurement_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_measurement_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['product_measurement_iso_unit'] = $product_measurement_iso_unit;

        return $this;
    }

    /**
     * Gets article_category
     *
     * @return string|null
     */
    public function getArticleCategory()
    {
        return $this->container['article_category'];
    }

    /**
     * Sets article_category
     *
     * @param string|null $article_category article_category
     *
     * @return self
     */
    public function setArticleCategory($article_category)
    {
        if (is_null($article_category)) {
            throw new \InvalidArgumentException('non-nullable article_category cannot be null');
        }
        if ((mb_strlen($article_category) > 2)) {
            throw new \InvalidArgumentException('invalid length for $article_category when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['article_category'] = $article_category;

        return $this;
    }

    /**
     * Gets industry_sector
     *
     * @return string|null
     */
    public function getIndustrySector()
    {
        return $this->container['industry_sector'];
    }

    /**
     * Sets industry_sector
     *
     * @param string|null $industry_sector industry_sector
     *
     * @return self
     */
    public function setIndustrySector($industry_sector)
    {
        if (is_null($industry_sector)) {
            throw new \InvalidArgumentException('non-nullable industry_sector cannot be null');
        }
        if ((mb_strlen($industry_sector) > 1)) {
            throw new \InvalidArgumentException('invalid length for $industry_sector when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['industry_sector'] = $industry_sector;

        return $this;
    }

    /**
     * Gets dangerous_goods_ind_profile
     *
     * @return string|null
     */
    public function getDangerousGoodsIndProfile()
    {
        return $this->container['dangerous_goods_ind_profile'];
    }

    /**
     * Sets dangerous_goods_ind_profile
     *
     * @param string|null $dangerous_goods_ind_profile Dangerous Goods Indicator Profile
     *
     * @return self
     */
    public function setDangerousGoodsIndProfile($dangerous_goods_ind_profile)
    {
        if (is_null($dangerous_goods_ind_profile)) {
            throw new \InvalidArgumentException('non-nullable dangerous_goods_ind_profile cannot be null');
        }
        if ((mb_strlen($dangerous_goods_ind_profile) > 3)) {
            throw new \InvalidArgumentException('invalid length for $dangerous_goods_ind_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['dangerous_goods_ind_profile'] = $dangerous_goods_ind_profile;

        return $this;
    }

    /**
     * Gets product_document_change_number
     *
     * @return string|null
     */
    public function getProductDocumentChangeNumber()
    {
        return $this->container['product_document_change_number'];
    }

    /**
     * Sets product_document_change_number
     *
     * @param string|null $product_document_change_number Document change number (without document management system)
     *
     * @return self
     */
    public function setProductDocumentChangeNumber($product_document_change_number)
    {
        if (is_null($product_document_change_number)) {
            throw new \InvalidArgumentException('non-nullable product_document_change_number cannot be null');
        }
        if ((mb_strlen($product_document_change_number) > 6)) {
            throw new \InvalidArgumentException('invalid length for $product_document_change_number when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['product_document_change_number'] = $product_document_change_number;

        return $this;
    }

    /**
     * Gets product_document_page_count
     *
     * @return string|null
     */
    public function getProductDocumentPageCount()
    {
        return $this->container['product_document_page_count'];
    }

    /**
     * Sets product_document_page_count
     *
     * @param string|null $product_document_page_count Number Of Sheets (without Document Management system)
     *
     * @return self
     */
    public function setProductDocumentPageCount($product_document_page_count)
    {
        if (is_null($product_document_page_count)) {
            throw new \InvalidArgumentException('non-nullable product_document_page_count cannot be null');
        }
        if ((mb_strlen($product_document_page_count) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_document_page_count when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['product_document_page_count'] = $product_document_page_count;

        return $this;
    }

    /**
     * Gets product_document_page_number
     *
     * @return string|null
     */
    public function getProductDocumentPageNumber()
    {
        return $this->container['product_document_page_number'];
    }

    /**
     * Sets product_document_page_number
     *
     * @param string|null $product_document_page_number Page Number of document (without Document Management system)
     *
     * @return self
     */
    public function setProductDocumentPageNumber($product_document_page_number)
    {
        if (is_null($product_document_page_number)) {
            throw new \InvalidArgumentException('non-nullable product_document_page_number cannot be null');
        }
        if ((mb_strlen($product_document_page_number) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_document_page_number when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['product_document_page_number'] = $product_document_page_number;

        return $this;
    }

    /**
     * Gets document_is_created_by_cad
     *
     * @return bool|null
     */
    public function getDocumentIsCreatedByCad()
    {
        return $this->container['document_is_created_by_cad'];
    }

    /**
     * Sets document_is_created_by_cad
     *
     * @param bool|null $document_is_created_by_cad document_is_created_by_cad
     *
     * @return self
     */
    public function setDocumentIsCreatedByCad($document_is_created_by_cad)
    {
        if (is_null($document_is_created_by_cad)) {
            throw new \InvalidArgumentException('non-nullable document_is_created_by_cad cannot be null');
        }
        $this->container['document_is_created_by_cad'] = $document_is_created_by_cad;

        return $this;
    }

    /**
     * Gets production_or_inspection_memo_txt
     *
     * @return string|null
     */
    public function getProductionOrInspectionMemoTxt()
    {
        return $this->container['production_or_inspection_memo_txt'];
    }

    /**
     * Sets production_or_inspection_memo_txt
     *
     * @param string|null $production_or_inspection_memo_txt Production/inspection memo
     *
     * @return self
     */
    public function setProductionOrInspectionMemoTxt($production_or_inspection_memo_txt)
    {
        if (is_null($production_or_inspection_memo_txt)) {
            throw new \InvalidArgumentException('non-nullable production_or_inspection_memo_txt cannot be null');
        }
        if ((mb_strlen($production_or_inspection_memo_txt) > 18)) {
            throw new \InvalidArgumentException('invalid length for $production_or_inspection_memo_txt when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['production_or_inspection_memo_txt'] = $production_or_inspection_memo_txt;

        return $this;
    }

    /**
     * Gets production_memo_page_format
     *
     * @return string|null
     */
    public function getProductionMemoPageFormat()
    {
        return $this->container['production_memo_page_format'];
    }

    /**
     * Sets production_memo_page_format
     *
     * @param string|null $production_memo_page_format Page Format of Production Memo
     *
     * @return self
     */
    public function setProductionMemoPageFormat($production_memo_page_format)
    {
        if (is_null($production_memo_page_format)) {
            throw new \InvalidArgumentException('non-nullable production_memo_page_format cannot be null');
        }
        if ((mb_strlen($production_memo_page_format) > 4)) {
            throw new \InvalidArgumentException('invalid length for $production_memo_page_format when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['production_memo_page_format'] = $production_memo_page_format;

        return $this;
    }

    /**
     * Gets product_is_highly_viscous
     *
     * @return bool|null
     */
    public function getProductIsHighlyViscous()
    {
        return $this->container['product_is_highly_viscous'];
    }

    /**
     * Sets product_is_highly_viscous
     *
     * @param bool|null $product_is_highly_viscous Indicator: Highly Viscous
     *
     * @return self
     */
    public function setProductIsHighlyViscous($product_is_highly_viscous)
    {
        if (is_null($product_is_highly_viscous)) {
            throw new \InvalidArgumentException('non-nullable product_is_highly_viscous cannot be null');
        }
        $this->container['product_is_highly_viscous'] = $product_is_highly_viscous;

        return $this;
    }

    /**
     * Gets transport_is_in_bulk
     *
     * @return bool|null
     */
    public function getTransportIsInBulk()
    {
        return $this->container['transport_is_in_bulk'];
    }

    /**
     * Sets transport_is_in_bulk
     *
     * @param bool|null $transport_is_in_bulk Indicator: In Bulk/Liquid
     *
     * @return self
     */
    public function setTransportIsInBulk($transport_is_in_bulk)
    {
        if (is_null($transport_is_in_bulk)) {
            throw new \InvalidArgumentException('non-nullable transport_is_in_bulk cannot be null');
        }
        $this->container['transport_is_in_bulk'] = $transport_is_in_bulk;

        return $this;
    }

    /**
     * Gets prod_effcty_param_vals_are_assigned
     *
     * @return bool|null
     */
    public function getProdEffctyParamValsAreAssigned()
    {
        return $this->container['prod_effcty_param_vals_are_assigned'];
    }

    /**
     * Sets prod_effcty_param_vals_are_assigned
     *
     * @param bool|null $prod_effcty_param_vals_are_assigned Assign effectivity parameter values/ override change numbers
     *
     * @return self
     */
    public function setProdEffctyParamValsAreAssigned($prod_effcty_param_vals_are_assigned)
    {
        if (is_null($prod_effcty_param_vals_are_assigned)) {
            throw new \InvalidArgumentException('non-nullable prod_effcty_param_vals_are_assigned cannot be null');
        }
        $this->container['prod_effcty_param_vals_are_assigned'] = $prod_effcty_param_vals_are_assigned;

        return $this;
    }

    /**
     * Gets prod_is_environmentally_relevant
     *
     * @return bool|null
     */
    public function getProdIsEnvironmentallyRelevant()
    {
        return $this->container['prod_is_environmentally_relevant'];
    }

    /**
     * Sets prod_is_environmentally_relevant
     *
     * @param bool|null $prod_is_environmentally_relevant Environmentally Relevant
     *
     * @return self
     */
    public function setProdIsEnvironmentallyRelevant($prod_is_environmentally_relevant)
    {
        if (is_null($prod_is_environmentally_relevant)) {
            throw new \InvalidArgumentException('non-nullable prod_is_environmentally_relevant cannot be null');
        }
        $this->container['prod_is_environmentally_relevant'] = $prod_is_environmentally_relevant;

        return $this;
    }

    /**
     * Gets laboratory_or_design_office
     *
     * @return string|null
     */
    public function getLaboratoryOrDesignOffice()
    {
        return $this->container['laboratory_or_design_office'];
    }

    /**
     * Sets laboratory_or_design_office
     *
     * @param string|null $laboratory_or_design_office Laboratory/Design Office
     *
     * @return self
     */
    public function setLaboratoryOrDesignOffice($laboratory_or_design_office)
    {
        if (is_null($laboratory_or_design_office)) {
            throw new \InvalidArgumentException('non-nullable laboratory_or_design_office cannot be null');
        }
        if ((mb_strlen($laboratory_or_design_office) > 3)) {
            throw new \InvalidArgumentException('invalid length for $laboratory_or_design_office when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['laboratory_or_design_office'] = $laboratory_or_design_office;

        return $this;
    }

    /**
     * Gets packaging_product_group
     *
     * @return string|null
     */
    public function getPackagingProductGroup()
    {
        return $this->container['packaging_product_group'];
    }

    /**
     * Sets packaging_product_group
     *
     * @param string|null $packaging_product_group Material Group: Packaging Materials
     *
     * @return self
     */
    public function setPackagingProductGroup($packaging_product_group)
    {
        if (is_null($packaging_product_group)) {
            throw new \InvalidArgumentException('non-nullable packaging_product_group cannot be null');
        }
        if ((mb_strlen($packaging_product_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $packaging_product_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['packaging_product_group'] = $packaging_product_group;

        return $this;
    }

    /**
     * Gets packing_reference_product
     *
     * @return string|null
     */
    public function getPackingReferenceProduct()
    {
        return $this->container['packing_reference_product'];
    }

    /**
     * Sets packing_reference_product
     *
     * @param string|null $packing_reference_product Reference Material for Materials Packed in Same Way
     *
     * @return self
     */
    public function setPackingReferenceProduct($packing_reference_product)
    {
        if (is_null($packing_reference_product)) {
            throw new \InvalidArgumentException('non-nullable packing_reference_product cannot be null');
        }
        if ((mb_strlen($packing_reference_product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $packing_reference_product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['packing_reference_product'] = $packing_reference_product;

        return $this;
    }

    /**
     * Gets basic_product
     *
     * @return string|null
     */
    public function getBasicProduct()
    {
        return $this->container['basic_product'];
    }

    /**
     * Sets basic_product
     *
     * @param string|null $basic_product basic_product
     *
     * @return self
     */
    public function setBasicProduct($basic_product)
    {
        if (is_null($basic_product)) {
            throw new \InvalidArgumentException('non-nullable basic_product cannot be null');
        }
        if ((mb_strlen($basic_product) > 48)) {
            throw new \InvalidArgumentException('invalid length for $basic_product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 48.');
        }

        $this->container['basic_product'] = $basic_product;

        return $this;
    }

    /**
     * Gets product_document_number
     *
     * @return string|null
     */
    public function getProductDocumentNumber()
    {
        return $this->container['product_document_number'];
    }

    /**
     * Sets product_document_number
     *
     * @param string|null $product_document_number Document number (without document management system)
     *
     * @return self
     */
    public function setProductDocumentNumber($product_document_number)
    {
        if (is_null($product_document_number)) {
            throw new \InvalidArgumentException('non-nullable product_document_number cannot be null');
        }
        if ((mb_strlen($product_document_number) > 22)) {
            throw new \InvalidArgumentException('invalid length for $product_document_number when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 22.');
        }

        $this->container['product_document_number'] = $product_document_number;

        return $this;
    }

    /**
     * Gets product_document_version
     *
     * @return string|null
     */
    public function getProductDocumentVersion()
    {
        return $this->container['product_document_version'];
    }

    /**
     * Sets product_document_version
     *
     * @param string|null $product_document_version Document version (without Document Management system)
     *
     * @return self
     */
    public function setProductDocumentVersion($product_document_version)
    {
        if (is_null($product_document_version)) {
            throw new \InvalidArgumentException('non-nullable product_document_version cannot be null');
        }
        if ((mb_strlen($product_document_version) > 2)) {
            throw new \InvalidArgumentException('invalid length for $product_document_version when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['product_document_version'] = $product_document_version;

        return $this;
    }

    /**
     * Gets product_document_type
     *
     * @return string|null
     */
    public function getProductDocumentType()
    {
        return $this->container['product_document_type'];
    }

    /**
     * Sets product_document_type
     *
     * @param string|null $product_document_type Document type (without Document Management system)
     *
     * @return self
     */
    public function setProductDocumentType($product_document_type)
    {
        if (is_null($product_document_type)) {
            throw new \InvalidArgumentException('non-nullable product_document_type cannot be null');
        }
        if ((mb_strlen($product_document_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_document_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['product_document_type'] = $product_document_type;

        return $this;
    }

    /**
     * Gets product_document_page_format
     *
     * @return string|null
     */
    public function getProductDocumentPageFormat()
    {
        return $this->container['product_document_page_format'];
    }

    /**
     * Sets product_document_page_format
     *
     * @param string|null $product_document_page_format Page Format of Document (without Document Management system)
     *
     * @return self
     */
    public function setProductDocumentPageFormat($product_document_page_format)
    {
        if (is_null($product_document_page_format)) {
            throw new \InvalidArgumentException('non-nullable product_document_page_format cannot be null');
        }
        if ((mb_strlen($product_document_page_format) > 4)) {
            throw new \InvalidArgumentException('invalid length for $product_document_page_format when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['product_document_page_format'] = $product_document_page_format;

        return $this;
    }

    /**
     * Gets prod_chml_cmplnc_relevance_code
     *
     * @return string|null
     */
    public function getProdChmlCmplncRelevanceCode()
    {
        return $this->container['prod_chml_cmplnc_relevance_code'];
    }

    /**
     * Sets prod_chml_cmplnc_relevance_code
     *
     * @param string|null $prod_chml_cmplnc_relevance_code prod_chml_cmplnc_relevance_code
     *
     * @return self
     */
    public function setProdChmlCmplncRelevanceCode($prod_chml_cmplnc_relevance_code)
    {
        if (is_null($prod_chml_cmplnc_relevance_code)) {
            throw new \InvalidArgumentException('non-nullable prod_chml_cmplnc_relevance_code cannot be null');
        }
        if ((mb_strlen($prod_chml_cmplnc_relevance_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $prod_chml_cmplnc_relevance_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['prod_chml_cmplnc_relevance_code'] = $prod_chml_cmplnc_relevance_code;

        return $this;
    }

    /**
     * Gets discount_in_kind_eligibility
     *
     * @return string|null
     */
    public function getDiscountInKindEligibility()
    {
        return $this->container['discount_in_kind_eligibility'];
    }

    /**
     * Sets discount_in_kind_eligibility
     *
     * @param string|null $discount_in_kind_eligibility Material qualifies for discount in kind
     *
     * @return self
     */
    public function setDiscountInKindEligibility($discount_in_kind_eligibility)
    {
        if (is_null($discount_in_kind_eligibility)) {
            throw new \InvalidArgumentException('non-nullable discount_in_kind_eligibility cannot be null');
        }
        if ((mb_strlen($discount_in_kind_eligibility) > 1)) {
            throw new \InvalidArgumentException('invalid length for $discount_in_kind_eligibility when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['discount_in_kind_eligibility'] = $discount_in_kind_eligibility;

        return $this;
    }

    /**
     * Gets product_manufacturer_number
     *
     * @return string|null
     */
    public function getProductManufacturerNumber()
    {
        return $this->container['product_manufacturer_number'];
    }

    /**
     * Sets product_manufacturer_number
     *
     * @param string|null $product_manufacturer_number Manufacturer Part Number
     *
     * @return self
     */
    public function setProductManufacturerNumber($product_manufacturer_number)
    {
        if (is_null($product_manufacturer_number)) {
            throw new \InvalidArgumentException('non-nullable product_manufacturer_number cannot be null');
        }
        if ((mb_strlen($product_manufacturer_number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $product_manufacturer_number when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['product_manufacturer_number'] = $product_manufacturer_number;

        return $this;
    }

    /**
     * Gets manufacturer_number
     *
     * @return string|null
     */
    public function getManufacturerNumber()
    {
        return $this->container['manufacturer_number'];
    }

    /**
     * Sets manufacturer_number
     *
     * @param string|null $manufacturer_number Number of a Manufacturer
     *
     * @return self
     */
    public function setManufacturerNumber($manufacturer_number)
    {
        if (is_null($manufacturer_number)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_number cannot be null');
        }
        if ((mb_strlen($manufacturer_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_number when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['manufacturer_number'] = $manufacturer_number;

        return $this;
    }

    /**
     * Gets manufacturer_part_profile
     *
     * @return string|null
     */
    public function getManufacturerPartProfile()
    {
        return $this->container['manufacturer_part_profile'];
    }

    /**
     * Sets manufacturer_part_profile
     *
     * @param string|null $manufacturer_part_profile manufacturer_part_profile
     *
     * @return self
     */
    public function setManufacturerPartProfile($manufacturer_part_profile)
    {
        if (is_null($manufacturer_part_profile)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_part_profile cannot be null');
        }
        if ((mb_strlen($manufacturer_part_profile) > 4)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_part_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['manufacturer_part_profile'] = $manufacturer_part_profile;

        return $this;
    }

    /**
     * Gets own_inventory_managed_product
     *
     * @return string|null
     */
    public function getOwnInventoryManagedProduct()
    {
        return $this->container['own_inventory_managed_product'];
    }

    /**
     * Sets own_inventory_managed_product
     *
     * @param string|null $own_inventory_managed_product Number of firm's own (internal) inventory-managed material
     *
     * @return self
     */
    public function setOwnInventoryManagedProduct($own_inventory_managed_product)
    {
        if (is_null($own_inventory_managed_product)) {
            throw new \InvalidArgumentException('non-nullable own_inventory_managed_product cannot be null');
        }
        if ((mb_strlen($own_inventory_managed_product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $own_inventory_managed_product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['own_inventory_managed_product'] = $own_inventory_managed_product;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


