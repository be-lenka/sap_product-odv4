<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductPlantMRP_Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mrp_area' => 'string',
        'mrp_type' => 'string',
        'mrp_responsible' => 'string',
        'mrp_group' => 'string',
        'reorder_threshold_quantity' => '\BeLenka\SAP\ProductODV4\Model\ReorderPoint',
        'plan_and_order_day_determination' => 'string',
        'planning_time_fence' => 'string',
        'lot_sizing_procedure' => 'string',
        'rounding_profile' => 'string',
        'lot_size_rounding_quantity' => '\BeLenka\SAP\ProductODV4\Model\RoundingValue',
        'minimum_lot_size_quantity' => '\BeLenka\SAP\ProductODV4\Model\MinimumLotSize',
        'maximum_lot_size_quantity' => '\BeLenka\SAP\ProductODV4\Model\MaximumLotSize',
        'maximum_stock_quantity' => '\BeLenka\SAP\ProductODV4\Model\MaximumStockLevel',
        'assembly_scrap_percent' => '\BeLenka\SAP\ProductODV4\Model\AssemblyScrap',
        'procurement_sub_type' => 'string',
        'production_invtry_managed_loc' => 'string',
        'dflt_storage_location_ext_procmt' => 'string',
        'mrp_planning_calendar' => 'string',
        'safety_stock_quantity' => '\BeLenka\SAP\ProductODV4\Model\SafetyStock',
        'range_of_cvrg_prfl_code' => 'string',
        'safety_supply_duration_in_days' => 'string',
        'fixed_lot_size_quantity' => '\BeLenka\SAP\ProductODV4\Model\FixedLotSize',
        'lot_size_independent_costs' => '\BeLenka\SAP\ProductODV4\Model\LSIndependentCosts',
        'storage_costs_percentage_code' => 'string',
        'product_service_level_in_percent' => '\BeLenka\SAP\ProductODV4\Model\ServiceLevel',
        'is_marked_for_deletion' => 'bool',
        'safety_time_period_profile' => 'string',
        'dependent_rqmt_mrp_relevance' => 'string',
        'product_safety_time_mrp_relevance' => 'string',
        'planned_delivery_duration_in_days' => '\BeLenka\SAP\ProductODV4\Model\PlannedDelivTime',
        'is_planned_delivery_time' => 'bool',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => '\BeLenka\SAP\ProductODV4\Model\TaktTime',
        'mrp_safety_stock_method' => 'string',
        'currency' => 'string',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageCreate[]',
        '_product' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate',
        '_product_plant' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mrp_area' => null,
        'mrp_type' => null,
        'mrp_responsible' => null,
        'mrp_group' => null,
        'reorder_threshold_quantity' => null,
        'plan_and_order_day_determination' => null,
        'planning_time_fence' => null,
        'lot_sizing_procedure' => null,
        'rounding_profile' => null,
        'lot_size_rounding_quantity' => null,
        'minimum_lot_size_quantity' => null,
        'maximum_lot_size_quantity' => null,
        'maximum_stock_quantity' => null,
        'assembly_scrap_percent' => null,
        'procurement_sub_type' => null,
        'production_invtry_managed_loc' => null,
        'dflt_storage_location_ext_procmt' => null,
        'mrp_planning_calendar' => null,
        'safety_stock_quantity' => null,
        'range_of_cvrg_prfl_code' => null,
        'safety_supply_duration_in_days' => null,
        'fixed_lot_size_quantity' => null,
        'lot_size_independent_costs' => null,
        'storage_costs_percentage_code' => null,
        'product_service_level_in_percent' => null,
        'is_marked_for_deletion' => null,
        'safety_time_period_profile' => null,
        'dependent_rqmt_mrp_relevance' => null,
        'product_safety_time_mrp_relevance' => null,
        'planned_delivery_duration_in_days' => null,
        'is_planned_delivery_time' => null,
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => null,
        'mrp_safety_stock_method' => null,
        'currency' => null,
        'base_unit' => null,
        'base_iso_unit' => null,
        'sap__messages' => null,
        '_product' => null,
        '_product_plant' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mrp_area' => false,
		'mrp_type' => false,
		'mrp_responsible' => false,
		'mrp_group' => false,
		'reorder_threshold_quantity' => false,
		'plan_and_order_day_determination' => false,
		'planning_time_fence' => false,
		'lot_sizing_procedure' => false,
		'rounding_profile' => false,
		'lot_size_rounding_quantity' => false,
		'minimum_lot_size_quantity' => false,
		'maximum_lot_size_quantity' => false,
		'maximum_stock_quantity' => false,
		'assembly_scrap_percent' => false,
		'procurement_sub_type' => false,
		'production_invtry_managed_loc' => false,
		'dflt_storage_location_ext_procmt' => false,
		'mrp_planning_calendar' => false,
		'safety_stock_quantity' => false,
		'range_of_cvrg_prfl_code' => false,
		'safety_supply_duration_in_days' => false,
		'fixed_lot_size_quantity' => false,
		'lot_size_independent_costs' => false,
		'storage_costs_percentage_code' => false,
		'product_service_level_in_percent' => false,
		'is_marked_for_deletion' => false,
		'safety_time_period_profile' => false,
		'dependent_rqmt_mrp_relevance' => false,
		'product_safety_time_mrp_relevance' => false,
		'planned_delivery_duration_in_days' => false,
		'is_planned_delivery_time' => false,
		'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => false,
		'mrp_safety_stock_method' => false,
		'currency' => false,
		'base_unit' => false,
		'base_iso_unit' => false,
		'sap__messages' => false,
		'_product' => false,
		'_product_plant' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mrp_area' => 'MRPArea',
        'mrp_type' => 'MRPType',
        'mrp_responsible' => 'MRPResponsible',
        'mrp_group' => 'MRPGroup',
        'reorder_threshold_quantity' => 'ReorderThresholdQuantity',
        'plan_and_order_day_determination' => 'PlanAndOrderDayDetermination',
        'planning_time_fence' => 'PlanningTimeFence',
        'lot_sizing_procedure' => 'LotSizingProcedure',
        'rounding_profile' => 'RoundingProfile',
        'lot_size_rounding_quantity' => 'LotSizeRoundingQuantity',
        'minimum_lot_size_quantity' => 'MinimumLotSizeQuantity',
        'maximum_lot_size_quantity' => 'MaximumLotSizeQuantity',
        'maximum_stock_quantity' => 'MaximumStockQuantity',
        'assembly_scrap_percent' => 'AssemblyScrapPercent',
        'procurement_sub_type' => 'ProcurementSubType',
        'production_invtry_managed_loc' => 'ProductionInvtryManagedLoc',
        'dflt_storage_location_ext_procmt' => 'DfltStorageLocationExtProcmt',
        'mrp_planning_calendar' => 'MRPPlanningCalendar',
        'safety_stock_quantity' => 'SafetyStockQuantity',
        'range_of_cvrg_prfl_code' => 'RangeOfCvrgPrflCode',
        'safety_supply_duration_in_days' => 'SafetySupplyDurationInDays',
        'fixed_lot_size_quantity' => 'FixedLotSizeQuantity',
        'lot_size_independent_costs' => 'LotSizeIndependentCosts',
        'storage_costs_percentage_code' => 'StorageCostsPercentageCode',
        'product_service_level_in_percent' => 'ProductServiceLevelInPercent',
        'is_marked_for_deletion' => 'IsMarkedForDeletion',
        'safety_time_period_profile' => 'SafetyTimePeriodProfile',
        'dependent_rqmt_mrp_relevance' => 'DependentRqmtMRPRelevance',
        'product_safety_time_mrp_relevance' => 'ProductSafetyTimeMRPRelevance',
        'planned_delivery_duration_in_days' => 'PlannedDeliveryDurationInDays',
        'is_planned_delivery_time' => 'IsPlannedDeliveryTime',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => 'RqmtQtyRcptTaktTmeInWrkgDays',
        'mrp_safety_stock_method' => 'MRPSafetyStockMethod',
        'currency' => 'Currency',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'sap__messages' => 'SAP__Messages',
        '_product' => '_Product',
        '_product_plant' => '_ProductPlant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mrp_area' => 'setMrpArea',
        'mrp_type' => 'setMrpType',
        'mrp_responsible' => 'setMrpResponsible',
        'mrp_group' => 'setMrpGroup',
        'reorder_threshold_quantity' => 'setReorderThresholdQuantity',
        'plan_and_order_day_determination' => 'setPlanAndOrderDayDetermination',
        'planning_time_fence' => 'setPlanningTimeFence',
        'lot_sizing_procedure' => 'setLotSizingProcedure',
        'rounding_profile' => 'setRoundingProfile',
        'lot_size_rounding_quantity' => 'setLotSizeRoundingQuantity',
        'minimum_lot_size_quantity' => 'setMinimumLotSizeQuantity',
        'maximum_lot_size_quantity' => 'setMaximumLotSizeQuantity',
        'maximum_stock_quantity' => 'setMaximumStockQuantity',
        'assembly_scrap_percent' => 'setAssemblyScrapPercent',
        'procurement_sub_type' => 'setProcurementSubType',
        'production_invtry_managed_loc' => 'setProductionInvtryManagedLoc',
        'dflt_storage_location_ext_procmt' => 'setDfltStorageLocationExtProcmt',
        'mrp_planning_calendar' => 'setMrpPlanningCalendar',
        'safety_stock_quantity' => 'setSafetyStockQuantity',
        'range_of_cvrg_prfl_code' => 'setRangeOfCvrgPrflCode',
        'safety_supply_duration_in_days' => 'setSafetySupplyDurationInDays',
        'fixed_lot_size_quantity' => 'setFixedLotSizeQuantity',
        'lot_size_independent_costs' => 'setLotSizeIndependentCosts',
        'storage_costs_percentage_code' => 'setStorageCostsPercentageCode',
        'product_service_level_in_percent' => 'setProductServiceLevelInPercent',
        'is_marked_for_deletion' => 'setIsMarkedForDeletion',
        'safety_time_period_profile' => 'setSafetyTimePeriodProfile',
        'dependent_rqmt_mrp_relevance' => 'setDependentRqmtMrpRelevance',
        'product_safety_time_mrp_relevance' => 'setProductSafetyTimeMrpRelevance',
        'planned_delivery_duration_in_days' => 'setPlannedDeliveryDurationInDays',
        'is_planned_delivery_time' => 'setIsPlannedDeliveryTime',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => 'setRqmtQtyRcptTaktTmeInWrkgDays',
        'mrp_safety_stock_method' => 'setMrpSafetyStockMethod',
        'currency' => 'setCurrency',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'sap__messages' => 'setSapMessages',
        '_product' => '_setProduct',
        '_product_plant' => '_setProductPlant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mrp_area' => 'getMrpArea',
        'mrp_type' => 'getMrpType',
        'mrp_responsible' => 'getMrpResponsible',
        'mrp_group' => 'getMrpGroup',
        'reorder_threshold_quantity' => 'getReorderThresholdQuantity',
        'plan_and_order_day_determination' => 'getPlanAndOrderDayDetermination',
        'planning_time_fence' => 'getPlanningTimeFence',
        'lot_sizing_procedure' => 'getLotSizingProcedure',
        'rounding_profile' => 'getRoundingProfile',
        'lot_size_rounding_quantity' => 'getLotSizeRoundingQuantity',
        'minimum_lot_size_quantity' => 'getMinimumLotSizeQuantity',
        'maximum_lot_size_quantity' => 'getMaximumLotSizeQuantity',
        'maximum_stock_quantity' => 'getMaximumStockQuantity',
        'assembly_scrap_percent' => 'getAssemblyScrapPercent',
        'procurement_sub_type' => 'getProcurementSubType',
        'production_invtry_managed_loc' => 'getProductionInvtryManagedLoc',
        'dflt_storage_location_ext_procmt' => 'getDfltStorageLocationExtProcmt',
        'mrp_planning_calendar' => 'getMrpPlanningCalendar',
        'safety_stock_quantity' => 'getSafetyStockQuantity',
        'range_of_cvrg_prfl_code' => 'getRangeOfCvrgPrflCode',
        'safety_supply_duration_in_days' => 'getSafetySupplyDurationInDays',
        'fixed_lot_size_quantity' => 'getFixedLotSizeQuantity',
        'lot_size_independent_costs' => 'getLotSizeIndependentCosts',
        'storage_costs_percentage_code' => 'getStorageCostsPercentageCode',
        'product_service_level_in_percent' => 'getProductServiceLevelInPercent',
        'is_marked_for_deletion' => 'getIsMarkedForDeletion',
        'safety_time_period_profile' => 'getSafetyTimePeriodProfile',
        'dependent_rqmt_mrp_relevance' => 'getDependentRqmtMrpRelevance',
        'product_safety_time_mrp_relevance' => 'getProductSafetyTimeMrpRelevance',
        'planned_delivery_duration_in_days' => 'getPlannedDeliveryDurationInDays',
        'is_planned_delivery_time' => 'getIsPlannedDeliveryTime',
        'rqmt_qty_rcpt_takt_tme_in_wrkg_days' => 'getRqmtQtyRcptTaktTmeInWrkgDays',
        'mrp_safety_stock_method' => 'getMrpSafetyStockMethod',
        'currency' => 'getCurrency',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'sap__messages' => 'getSapMessages',
        '_product' => '_getProduct',
        '_product_plant' => '_getProductPlant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mrp_area', $data ?? [], null);
        $this->setIfExists('mrp_type', $data ?? [], null);
        $this->setIfExists('mrp_responsible', $data ?? [], null);
        $this->setIfExists('mrp_group', $data ?? [], null);
        $this->setIfExists('reorder_threshold_quantity', $data ?? [], null);
        $this->setIfExists('plan_and_order_day_determination', $data ?? [], null);
        $this->setIfExists('planning_time_fence', $data ?? [], null);
        $this->setIfExists('lot_sizing_procedure', $data ?? [], null);
        $this->setIfExists('rounding_profile', $data ?? [], null);
        $this->setIfExists('lot_size_rounding_quantity', $data ?? [], null);
        $this->setIfExists('minimum_lot_size_quantity', $data ?? [], null);
        $this->setIfExists('maximum_lot_size_quantity', $data ?? [], null);
        $this->setIfExists('maximum_stock_quantity', $data ?? [], null);
        $this->setIfExists('assembly_scrap_percent', $data ?? [], null);
        $this->setIfExists('procurement_sub_type', $data ?? [], null);
        $this->setIfExists('production_invtry_managed_loc', $data ?? [], null);
        $this->setIfExists('dflt_storage_location_ext_procmt', $data ?? [], null);
        $this->setIfExists('mrp_planning_calendar', $data ?? [], null);
        $this->setIfExists('safety_stock_quantity', $data ?? [], null);
        $this->setIfExists('range_of_cvrg_prfl_code', $data ?? [], null);
        $this->setIfExists('safety_supply_duration_in_days', $data ?? [], null);
        $this->setIfExists('fixed_lot_size_quantity', $data ?? [], null);
        $this->setIfExists('lot_size_independent_costs', $data ?? [], null);
        $this->setIfExists('storage_costs_percentage_code', $data ?? [], null);
        $this->setIfExists('product_service_level_in_percent', $data ?? [], null);
        $this->setIfExists('is_marked_for_deletion', $data ?? [], null);
        $this->setIfExists('safety_time_period_profile', $data ?? [], null);
        $this->setIfExists('dependent_rqmt_mrp_relevance', $data ?? [], null);
        $this->setIfExists('product_safety_time_mrp_relevance', $data ?? [], null);
        $this->setIfExists('planned_delivery_duration_in_days', $data ?? [], null);
        $this->setIfExists('is_planned_delivery_time', $data ?? [], null);
        $this->setIfExists('rqmt_qty_rcpt_takt_tme_in_wrkg_days', $data ?? [], null);
        $this->setIfExists('mrp_safety_stock_method', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_product', $data ?? [], null);
        $this->setIfExists('_product_plant', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mrp_area'] === null) {
            $invalidProperties[] = "'mrp_area' can't be null";
        }
        if ((mb_strlen($this->container['mrp_area']) > 10)) {
            $invalidProperties[] = "invalid value for 'mrp_area', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['mrp_type']) && (mb_strlen($this->container['mrp_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'mrp_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mrp_responsible']) && (mb_strlen($this->container['mrp_responsible']) > 3)) {
            $invalidProperties[] = "invalid value for 'mrp_responsible', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['mrp_group']) && (mb_strlen($this->container['mrp_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'mrp_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['plan_and_order_day_determination']) && (mb_strlen($this->container['plan_and_order_day_determination']) > 3)) {
            $invalidProperties[] = "invalid value for 'plan_and_order_day_determination', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['planning_time_fence']) && (mb_strlen($this->container['planning_time_fence']) > 3)) {
            $invalidProperties[] = "invalid value for 'planning_time_fence', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['lot_sizing_procedure']) && (mb_strlen($this->container['lot_sizing_procedure']) > 2)) {
            $invalidProperties[] = "invalid value for 'lot_sizing_procedure', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['rounding_profile']) && (mb_strlen($this->container['rounding_profile']) > 4)) {
            $invalidProperties[] = "invalid value for 'rounding_profile', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['procurement_sub_type']) && (mb_strlen($this->container['procurement_sub_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'procurement_sub_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['production_invtry_managed_loc']) && (mb_strlen($this->container['production_invtry_managed_loc']) > 4)) {
            $invalidProperties[] = "invalid value for 'production_invtry_managed_loc', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['dflt_storage_location_ext_procmt']) && (mb_strlen($this->container['dflt_storage_location_ext_procmt']) > 4)) {
            $invalidProperties[] = "invalid value for 'dflt_storage_location_ext_procmt', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['mrp_planning_calendar']) && (mb_strlen($this->container['mrp_planning_calendar']) > 3)) {
            $invalidProperties[] = "invalid value for 'mrp_planning_calendar', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['range_of_cvrg_prfl_code']) && (mb_strlen($this->container['range_of_cvrg_prfl_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'range_of_cvrg_prfl_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['safety_supply_duration_in_days']) && (mb_strlen($this->container['safety_supply_duration_in_days']) > 2)) {
            $invalidProperties[] = "invalid value for 'safety_supply_duration_in_days', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['storage_costs_percentage_code']) && (mb_strlen($this->container['storage_costs_percentage_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'storage_costs_percentage_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['safety_time_period_profile']) && (mb_strlen($this->container['safety_time_period_profile']) > 3)) {
            $invalidProperties[] = "invalid value for 'safety_time_period_profile', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['dependent_rqmt_mrp_relevance']) && (mb_strlen($this->container['dependent_rqmt_mrp_relevance']) > 1)) {
            $invalidProperties[] = "invalid value for 'dependent_rqmt_mrp_relevance', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_safety_time_mrp_relevance']) && (mb_strlen($this->container['product_safety_time_mrp_relevance']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_safety_time_mrp_relevance', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['mrp_safety_stock_method']) && (mb_strlen($this->container['mrp_safety_stock_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'mrp_safety_stock_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mrp_area
     *
     * @return string
     */
    public function getMrpArea()
    {
        return $this->container['mrp_area'];
    }

    /**
     * Sets mrp_area
     *
     * @param string $mrp_area mrp_area
     *
     * @return self
     */
    public function setMrpArea($mrp_area)
    {
        if (is_null($mrp_area)) {
            throw new \InvalidArgumentException('non-nullable mrp_area cannot be null');
        }
        if ((mb_strlen($mrp_area) > 10)) {
            throw new \InvalidArgumentException('invalid length for $mrp_area when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['mrp_area'] = $mrp_area;

        return $this;
    }

    /**
     * Gets mrp_type
     *
     * @return string|null
     */
    public function getMrpType()
    {
        return $this->container['mrp_type'];
    }

    /**
     * Sets mrp_type
     *
     * @param string|null $mrp_type mrp_type
     *
     * @return self
     */
    public function setMrpType($mrp_type)
    {
        if (is_null($mrp_type)) {
            throw new \InvalidArgumentException('non-nullable mrp_type cannot be null');
        }
        if ((mb_strlen($mrp_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mrp_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['mrp_type'] = $mrp_type;

        return $this;
    }

    /**
     * Gets mrp_responsible
     *
     * @return string|null
     */
    public function getMrpResponsible()
    {
        return $this->container['mrp_responsible'];
    }

    /**
     * Sets mrp_responsible
     *
     * @param string|null $mrp_responsible mrp_responsible
     *
     * @return self
     */
    public function setMrpResponsible($mrp_responsible)
    {
        if (is_null($mrp_responsible)) {
            throw new \InvalidArgumentException('non-nullable mrp_responsible cannot be null');
        }
        if ((mb_strlen($mrp_responsible) > 3)) {
            throw new \InvalidArgumentException('invalid length for $mrp_responsible when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['mrp_responsible'] = $mrp_responsible;

        return $this;
    }

    /**
     * Gets mrp_group
     *
     * @return string|null
     */
    public function getMrpGroup()
    {
        return $this->container['mrp_group'];
    }

    /**
     * Sets mrp_group
     *
     * @param string|null $mrp_group mrp_group
     *
     * @return self
     */
    public function setMrpGroup($mrp_group)
    {
        if (is_null($mrp_group)) {
            throw new \InvalidArgumentException('non-nullable mrp_group cannot be null');
        }
        if ((mb_strlen($mrp_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $mrp_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['mrp_group'] = $mrp_group;

        return $this;
    }

    /**
     * Gets reorder_threshold_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ReorderPoint|null
     */
    public function getReorderThresholdQuantity()
    {
        return $this->container['reorder_threshold_quantity'];
    }

    /**
     * Sets reorder_threshold_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ReorderPoint|null $reorder_threshold_quantity reorder_threshold_quantity
     *
     * @return self
     */
    public function setReorderThresholdQuantity($reorder_threshold_quantity)
    {
        if (is_null($reorder_threshold_quantity)) {
            throw new \InvalidArgumentException('non-nullable reorder_threshold_quantity cannot be null');
        }
        $this->container['reorder_threshold_quantity'] = $reorder_threshold_quantity;

        return $this;
    }

    /**
     * Gets plan_and_order_day_determination
     *
     * @return string|null
     */
    public function getPlanAndOrderDayDetermination()
    {
        return $this->container['plan_and_order_day_determination'];
    }

    /**
     * Sets plan_and_order_day_determination
     *
     * @param string|null $plan_and_order_day_determination plan_and_order_day_determination
     *
     * @return self
     */
    public function setPlanAndOrderDayDetermination($plan_and_order_day_determination)
    {
        if (is_null($plan_and_order_day_determination)) {
            throw new \InvalidArgumentException('non-nullable plan_and_order_day_determination cannot be null');
        }
        if ((mb_strlen($plan_and_order_day_determination) > 3)) {
            throw new \InvalidArgumentException('invalid length for $plan_and_order_day_determination when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['plan_and_order_day_determination'] = $plan_and_order_day_determination;

        return $this;
    }

    /**
     * Gets planning_time_fence
     *
     * @return string|null
     */
    public function getPlanningTimeFence()
    {
        return $this->container['planning_time_fence'];
    }

    /**
     * Sets planning_time_fence
     *
     * @param string|null $planning_time_fence planning_time_fence
     *
     * @return self
     */
    public function setPlanningTimeFence($planning_time_fence)
    {
        if (is_null($planning_time_fence)) {
            throw new \InvalidArgumentException('non-nullable planning_time_fence cannot be null');
        }
        if ((mb_strlen($planning_time_fence) > 3)) {
            throw new \InvalidArgumentException('invalid length for $planning_time_fence when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['planning_time_fence'] = $planning_time_fence;

        return $this;
    }

    /**
     * Gets lot_sizing_procedure
     *
     * @return string|null
     */
    public function getLotSizingProcedure()
    {
        return $this->container['lot_sizing_procedure'];
    }

    /**
     * Sets lot_sizing_procedure
     *
     * @param string|null $lot_sizing_procedure Lot Sizing Procedure in Materials Planning
     *
     * @return self
     */
    public function setLotSizingProcedure($lot_sizing_procedure)
    {
        if (is_null($lot_sizing_procedure)) {
            throw new \InvalidArgumentException('non-nullable lot_sizing_procedure cannot be null');
        }
        if ((mb_strlen($lot_sizing_procedure) > 2)) {
            throw new \InvalidArgumentException('invalid length for $lot_sizing_procedure when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['lot_sizing_procedure'] = $lot_sizing_procedure;

        return $this;
    }

    /**
     * Gets rounding_profile
     *
     * @return string|null
     */
    public function getRoundingProfile()
    {
        return $this->container['rounding_profile'];
    }

    /**
     * Sets rounding_profile
     *
     * @param string|null $rounding_profile rounding_profile
     *
     * @return self
     */
    public function setRoundingProfile($rounding_profile)
    {
        if (is_null($rounding_profile)) {
            throw new \InvalidArgumentException('non-nullable rounding_profile cannot be null');
        }
        if ((mb_strlen($rounding_profile) > 4)) {
            throw new \InvalidArgumentException('invalid length for $rounding_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['rounding_profile'] = $rounding_profile;

        return $this;
    }

    /**
     * Gets lot_size_rounding_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\RoundingValue|null
     */
    public function getLotSizeRoundingQuantity()
    {
        return $this->container['lot_size_rounding_quantity'];
    }

    /**
     * Sets lot_size_rounding_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\RoundingValue|null $lot_size_rounding_quantity lot_size_rounding_quantity
     *
     * @return self
     */
    public function setLotSizeRoundingQuantity($lot_size_rounding_quantity)
    {
        if (is_null($lot_size_rounding_quantity)) {
            throw new \InvalidArgumentException('non-nullable lot_size_rounding_quantity cannot be null');
        }
        $this->container['lot_size_rounding_quantity'] = $lot_size_rounding_quantity;

        return $this;
    }

    /**
     * Gets minimum_lot_size_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MinimumLotSize|null
     */
    public function getMinimumLotSizeQuantity()
    {
        return $this->container['minimum_lot_size_quantity'];
    }

    /**
     * Sets minimum_lot_size_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MinimumLotSize|null $minimum_lot_size_quantity minimum_lot_size_quantity
     *
     * @return self
     */
    public function setMinimumLotSizeQuantity($minimum_lot_size_quantity)
    {
        if (is_null($minimum_lot_size_quantity)) {
            throw new \InvalidArgumentException('non-nullable minimum_lot_size_quantity cannot be null');
        }
        $this->container['minimum_lot_size_quantity'] = $minimum_lot_size_quantity;

        return $this;
    }

    /**
     * Gets maximum_lot_size_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaximumLotSize|null
     */
    public function getMaximumLotSizeQuantity()
    {
        return $this->container['maximum_lot_size_quantity'];
    }

    /**
     * Sets maximum_lot_size_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaximumLotSize|null $maximum_lot_size_quantity maximum_lot_size_quantity
     *
     * @return self
     */
    public function setMaximumLotSizeQuantity($maximum_lot_size_quantity)
    {
        if (is_null($maximum_lot_size_quantity)) {
            throw new \InvalidArgumentException('non-nullable maximum_lot_size_quantity cannot be null');
        }
        $this->container['maximum_lot_size_quantity'] = $maximum_lot_size_quantity;

        return $this;
    }

    /**
     * Gets maximum_stock_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaximumStockLevel|null
     */
    public function getMaximumStockQuantity()
    {
        return $this->container['maximum_stock_quantity'];
    }

    /**
     * Sets maximum_stock_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaximumStockLevel|null $maximum_stock_quantity maximum_stock_quantity
     *
     * @return self
     */
    public function setMaximumStockQuantity($maximum_stock_quantity)
    {
        if (is_null($maximum_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable maximum_stock_quantity cannot be null');
        }
        $this->container['maximum_stock_quantity'] = $maximum_stock_quantity;

        return $this;
    }

    /**
     * Gets assembly_scrap_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\AssemblyScrap|null
     */
    public function getAssemblyScrapPercent()
    {
        return $this->container['assembly_scrap_percent'];
    }

    /**
     * Sets assembly_scrap_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\AssemblyScrap|null $assembly_scrap_percent assembly_scrap_percent
     *
     * @return self
     */
    public function setAssemblyScrapPercent($assembly_scrap_percent)
    {
        if (is_null($assembly_scrap_percent)) {
            throw new \InvalidArgumentException('non-nullable assembly_scrap_percent cannot be null');
        }
        $this->container['assembly_scrap_percent'] = $assembly_scrap_percent;

        return $this;
    }

    /**
     * Gets procurement_sub_type
     *
     * @return string|null
     */
    public function getProcurementSubType()
    {
        return $this->container['procurement_sub_type'];
    }

    /**
     * Sets procurement_sub_type
     *
     * @param string|null $procurement_sub_type Special Procurement Type
     *
     * @return self
     */
    public function setProcurementSubType($procurement_sub_type)
    {
        if (is_null($procurement_sub_type)) {
            throw new \InvalidArgumentException('non-nullable procurement_sub_type cannot be null');
        }
        if ((mb_strlen($procurement_sub_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $procurement_sub_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['procurement_sub_type'] = $procurement_sub_type;

        return $this;
    }

    /**
     * Gets production_invtry_managed_loc
     *
     * @return string|null
     */
    public function getProductionInvtryManagedLoc()
    {
        return $this->container['production_invtry_managed_loc'];
    }

    /**
     * Sets production_invtry_managed_loc
     *
     * @param string|null $production_invtry_managed_loc Issue Storage Location
     *
     * @return self
     */
    public function setProductionInvtryManagedLoc($production_invtry_managed_loc)
    {
        if (is_null($production_invtry_managed_loc)) {
            throw new \InvalidArgumentException('non-nullable production_invtry_managed_loc cannot be null');
        }
        if ((mb_strlen($production_invtry_managed_loc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $production_invtry_managed_loc when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['production_invtry_managed_loc'] = $production_invtry_managed_loc;

        return $this;
    }

    /**
     * Gets dflt_storage_location_ext_procmt
     *
     * @return string|null
     */
    public function getDfltStorageLocationExtProcmt()
    {
        return $this->container['dflt_storage_location_ext_procmt'];
    }

    /**
     * Sets dflt_storage_location_ext_procmt
     *
     * @param string|null $dflt_storage_location_ext_procmt Default Storage Location for External Procurement
     *
     * @return self
     */
    public function setDfltStorageLocationExtProcmt($dflt_storage_location_ext_procmt)
    {
        if (is_null($dflt_storage_location_ext_procmt)) {
            throw new \InvalidArgumentException('non-nullable dflt_storage_location_ext_procmt cannot be null');
        }
        if ((mb_strlen($dflt_storage_location_ext_procmt) > 4)) {
            throw new \InvalidArgumentException('invalid length for $dflt_storage_location_ext_procmt when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['dflt_storage_location_ext_procmt'] = $dflt_storage_location_ext_procmt;

        return $this;
    }

    /**
     * Gets mrp_planning_calendar
     *
     * @return string|null
     */
    public function getMrpPlanningCalendar()
    {
        return $this->container['mrp_planning_calendar'];
    }

    /**
     * Sets mrp_planning_calendar
     *
     * @param string|null $mrp_planning_calendar mrp_planning_calendar
     *
     * @return self
     */
    public function setMrpPlanningCalendar($mrp_planning_calendar)
    {
        if (is_null($mrp_planning_calendar)) {
            throw new \InvalidArgumentException('non-nullable mrp_planning_calendar cannot be null');
        }
        if ((mb_strlen($mrp_planning_calendar) > 3)) {
            throw new \InvalidArgumentException('invalid length for $mrp_planning_calendar when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['mrp_planning_calendar'] = $mrp_planning_calendar;

        return $this;
    }

    /**
     * Gets safety_stock_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\SafetyStock|null
     */
    public function getSafetyStockQuantity()
    {
        return $this->container['safety_stock_quantity'];
    }

    /**
     * Sets safety_stock_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\SafetyStock|null $safety_stock_quantity safety_stock_quantity
     *
     * @return self
     */
    public function setSafetyStockQuantity($safety_stock_quantity)
    {
        if (is_null($safety_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable safety_stock_quantity cannot be null');
        }
        $this->container['safety_stock_quantity'] = $safety_stock_quantity;

        return $this;
    }

    /**
     * Gets range_of_cvrg_prfl_code
     *
     * @return string|null
     */
    public function getRangeOfCvrgPrflCode()
    {
        return $this->container['range_of_cvrg_prfl_code'];
    }

    /**
     * Sets range_of_cvrg_prfl_code
     *
     * @param string|null $range_of_cvrg_prfl_code Range-of-Coverage Profile
     *
     * @return self
     */
    public function setRangeOfCvrgPrflCode($range_of_cvrg_prfl_code)
    {
        if (is_null($range_of_cvrg_prfl_code)) {
            throw new \InvalidArgumentException('non-nullable range_of_cvrg_prfl_code cannot be null');
        }
        if ((mb_strlen($range_of_cvrg_prfl_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $range_of_cvrg_prfl_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['range_of_cvrg_prfl_code'] = $range_of_cvrg_prfl_code;

        return $this;
    }

    /**
     * Gets safety_supply_duration_in_days
     *
     * @return string|null
     */
    public function getSafetySupplyDurationInDays()
    {
        return $this->container['safety_supply_duration_in_days'];
    }

    /**
     * Sets safety_supply_duration_in_days
     *
     * @param string|null $safety_supply_duration_in_days Safety Time (in Workdays)
     *
     * @return self
     */
    public function setSafetySupplyDurationInDays($safety_supply_duration_in_days)
    {
        if (is_null($safety_supply_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable safety_supply_duration_in_days cannot be null');
        }
        if ((mb_strlen($safety_supply_duration_in_days) > 2)) {
            throw new \InvalidArgumentException('invalid length for $safety_supply_duration_in_days when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['safety_supply_duration_in_days'] = $safety_supply_duration_in_days;

        return $this;
    }

    /**
     * Gets fixed_lot_size_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\FixedLotSize|null
     */
    public function getFixedLotSizeQuantity()
    {
        return $this->container['fixed_lot_size_quantity'];
    }

    /**
     * Sets fixed_lot_size_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\FixedLotSize|null $fixed_lot_size_quantity fixed_lot_size_quantity
     *
     * @return self
     */
    public function setFixedLotSizeQuantity($fixed_lot_size_quantity)
    {
        if (is_null($fixed_lot_size_quantity)) {
            throw new \InvalidArgumentException('non-nullable fixed_lot_size_quantity cannot be null');
        }
        $this->container['fixed_lot_size_quantity'] = $fixed_lot_size_quantity;

        return $this;
    }

    /**
     * Gets lot_size_independent_costs
     *
     * @return \BeLenka\SAP\ProductODV4\Model\LSIndependentCosts|null
     */
    public function getLotSizeIndependentCosts()
    {
        return $this->container['lot_size_independent_costs'];
    }

    /**
     * Sets lot_size_independent_costs
     *
     * @param \BeLenka\SAP\ProductODV4\Model\LSIndependentCosts|null $lot_size_independent_costs lot_size_independent_costs
     *
     * @return self
     */
    public function setLotSizeIndependentCosts($lot_size_independent_costs)
    {
        if (is_null($lot_size_independent_costs)) {
            throw new \InvalidArgumentException('non-nullable lot_size_independent_costs cannot be null');
        }
        $this->container['lot_size_independent_costs'] = $lot_size_independent_costs;

        return $this;
    }

    /**
     * Gets storage_costs_percentage_code
     *
     * @return string|null
     */
    public function getStorageCostsPercentageCode()
    {
        return $this->container['storage_costs_percentage_code'];
    }

    /**
     * Sets storage_costs_percentage_code
     *
     * @param string|null $storage_costs_percentage_code Storage Costs Percentage Code
     *
     * @return self
     */
    public function setStorageCostsPercentageCode($storage_costs_percentage_code)
    {
        if (is_null($storage_costs_percentage_code)) {
            throw new \InvalidArgumentException('non-nullable storage_costs_percentage_code cannot be null');
        }
        if ((mb_strlen($storage_costs_percentage_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $storage_costs_percentage_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['storage_costs_percentage_code'] = $storage_costs_percentage_code;

        return $this;
    }

    /**
     * Gets product_service_level_in_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ServiceLevel|null
     */
    public function getProductServiceLevelInPercent()
    {
        return $this->container['product_service_level_in_percent'];
    }

    /**
     * Sets product_service_level_in_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ServiceLevel|null $product_service_level_in_percent product_service_level_in_percent
     *
     * @return self
     */
    public function setProductServiceLevelInPercent($product_service_level_in_percent)
    {
        if (is_null($product_service_level_in_percent)) {
            throw new \InvalidArgumentException('non-nullable product_service_level_in_percent cannot be null');
        }
        $this->container['product_service_level_in_percent'] = $product_service_level_in_percent;

        return $this;
    }

    /**
     * Gets is_marked_for_deletion
     *
     * @return bool|null
     */
    public function getIsMarkedForDeletion()
    {
        return $this->container['is_marked_for_deletion'];
    }

    /**
     * Sets is_marked_for_deletion
     *
     * @param bool|null $is_marked_for_deletion is_marked_for_deletion
     *
     * @return self
     */
    public function setIsMarkedForDeletion($is_marked_for_deletion)
    {
        if (is_null($is_marked_for_deletion)) {
            throw new \InvalidArgumentException('non-nullable is_marked_for_deletion cannot be null');
        }
        $this->container['is_marked_for_deletion'] = $is_marked_for_deletion;

        return $this;
    }

    /**
     * Gets safety_time_period_profile
     *
     * @return string|null
     */
    public function getSafetyTimePeriodProfile()
    {
        return $this->container['safety_time_period_profile'];
    }

    /**
     * Sets safety_time_period_profile
     *
     * @param string|null $safety_time_period_profile Period Profile for Safety Time
     *
     * @return self
     */
    public function setSafetyTimePeriodProfile($safety_time_period_profile)
    {
        if (is_null($safety_time_period_profile)) {
            throw new \InvalidArgumentException('non-nullable safety_time_period_profile cannot be null');
        }
        if ((mb_strlen($safety_time_period_profile) > 3)) {
            throw new \InvalidArgumentException('invalid length for $safety_time_period_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['safety_time_period_profile'] = $safety_time_period_profile;

        return $this;
    }

    /**
     * Gets dependent_rqmt_mrp_relevance
     *
     * @return string|null
     */
    public function getDependentRqmtMrpRelevance()
    {
        return $this->container['dependent_rqmt_mrp_relevance'];
    }

    /**
     * Sets dependent_rqmt_mrp_relevance
     *
     * @param string|null $dependent_rqmt_mrp_relevance MRP relevancy for dependent requirements
     *
     * @return self
     */
    public function setDependentRqmtMrpRelevance($dependent_rqmt_mrp_relevance)
    {
        if (is_null($dependent_rqmt_mrp_relevance)) {
            throw new \InvalidArgumentException('non-nullable dependent_rqmt_mrp_relevance cannot be null');
        }
        if ((mb_strlen($dependent_rqmt_mrp_relevance) > 1)) {
            throw new \InvalidArgumentException('invalid length for $dependent_rqmt_mrp_relevance when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['dependent_rqmt_mrp_relevance'] = $dependent_rqmt_mrp_relevance;

        return $this;
    }

    /**
     * Gets product_safety_time_mrp_relevance
     *
     * @return string|null
     */
    public function getProductSafetyTimeMrpRelevance()
    {
        return $this->container['product_safety_time_mrp_relevance'];
    }

    /**
     * Sets product_safety_time_mrp_relevance
     *
     * @param string|null $product_safety_time_mrp_relevance Safety Time Indicator (with or Without Safety Time)
     *
     * @return self
     */
    public function setProductSafetyTimeMrpRelevance($product_safety_time_mrp_relevance)
    {
        if (is_null($product_safety_time_mrp_relevance)) {
            throw new \InvalidArgumentException('non-nullable product_safety_time_mrp_relevance cannot be null');
        }
        if ((mb_strlen($product_safety_time_mrp_relevance) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_safety_time_mrp_relevance when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_safety_time_mrp_relevance'] = $product_safety_time_mrp_relevance;

        return $this;
    }

    /**
     * Gets planned_delivery_duration_in_days
     *
     * @return \BeLenka\SAP\ProductODV4\Model\PlannedDelivTime|null
     */
    public function getPlannedDeliveryDurationInDays()
    {
        return $this->container['planned_delivery_duration_in_days'];
    }

    /**
     * Sets planned_delivery_duration_in_days
     *
     * @param \BeLenka\SAP\ProductODV4\Model\PlannedDelivTime|null $planned_delivery_duration_in_days planned_delivery_duration_in_days
     *
     * @return self
     */
    public function setPlannedDeliveryDurationInDays($planned_delivery_duration_in_days)
    {
        if (is_null($planned_delivery_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable planned_delivery_duration_in_days cannot be null');
        }
        $this->container['planned_delivery_duration_in_days'] = $planned_delivery_duration_in_days;

        return $this;
    }

    /**
     * Gets is_planned_delivery_time
     *
     * @return bool|null
     */
    public function getIsPlannedDeliveryTime()
    {
        return $this->container['is_planned_delivery_time'];
    }

    /**
     * Sets is_planned_delivery_time
     *
     * @param bool|null $is_planned_delivery_time Consider Planned Delivery Time of the MRP Area
     *
     * @return self
     */
    public function setIsPlannedDeliveryTime($is_planned_delivery_time)
    {
        if (is_null($is_planned_delivery_time)) {
            throw new \InvalidArgumentException('non-nullable is_planned_delivery_time cannot be null');
        }
        $this->container['is_planned_delivery_time'] = $is_planned_delivery_time;

        return $this;
    }

    /**
     * Gets rqmt_qty_rcpt_takt_tme_in_wrkg_days
     *
     * @return \BeLenka\SAP\ProductODV4\Model\TaktTime|null
     */
    public function getRqmtQtyRcptTaktTmeInWrkgDays()
    {
        return $this->container['rqmt_qty_rcpt_takt_tme_in_wrkg_days'];
    }

    /**
     * Sets rqmt_qty_rcpt_takt_tme_in_wrkg_days
     *
     * @param \BeLenka\SAP\ProductODV4\Model\TaktTime|null $rqmt_qty_rcpt_takt_tme_in_wrkg_days rqmt_qty_rcpt_takt_tme_in_wrkg_days
     *
     * @return self
     */
    public function setRqmtQtyRcptTaktTmeInWrkgDays($rqmt_qty_rcpt_takt_tme_in_wrkg_days)
    {
        if (is_null($rqmt_qty_rcpt_takt_tme_in_wrkg_days)) {
            throw new \InvalidArgumentException('non-nullable rqmt_qty_rcpt_takt_tme_in_wrkg_days cannot be null');
        }
        $this->container['rqmt_qty_rcpt_takt_tme_in_wrkg_days'] = $rqmt_qty_rcpt_takt_tme_in_wrkg_days;

        return $this;
    }

    /**
     * Gets mrp_safety_stock_method
     *
     * @return string|null
     */
    public function getMrpSafetyStockMethod()
    {
        return $this->container['mrp_safety_stock_method'];
    }

    /**
     * Sets mrp_safety_stock_method
     *
     * @param string|null $mrp_safety_stock_method MRP Safety Stock Method
     *
     * @return self
     */
    public function setMrpSafetyStockMethod($mrp_safety_stock_method)
    {
        if (is_null($mrp_safety_stock_method)) {
            throw new \InvalidArgumentException('non-nullable mrp_safety_stock_method cannot be null');
        }
        if ((mb_strlen($mrp_safety_stock_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mrp_safety_stock_method when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['mrp_safety_stock_method'] = $mrp_safety_stock_method;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency Key
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantMRPTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageCreate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageCreate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _product
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate|null
     */
    public function _getProduct()
    {
    return $this->container['_product'];
    }

    /**
     * Sets _product
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate|null $_product _product
     *
     * @return self
     */
    public function _setProduct($_product)
    {
        if (is_null($_product)) {
            throw new \InvalidArgumentException('non-nullable _product cannot be null');
        }
        $this->container['_product'] = $_product;

        return $this;
    }

    /**
     * Gets _product_plant
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate|null
     */
    public function _getProductPlant()
    {
    return $this->container['_product_plant'];
    }

    /**
     * Sets _product_plant
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate|null $_product_plant _product_plant
     *
     * @return self
     */
    public function _setProductPlant($_product_plant)
    {
        if (is_null($_product_plant)) {
            throw new \InvalidArgumentException('non-nullable _product_plant cannot be null');
        }
        $this->container['_product_plant'] = $_product_plant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


