<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductValuationLedgerAccount_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product' => 'string',
        'valuation_area' => 'string',
        'valuation_type' => 'string',
        'currency_role' => 'string',
        'ledger' => 'string',
        'product_price_control' => 'string',
        'product_price_unit_quantity' => '\BeLenka\SAP\ProductODV4\Model\PriceUnit',
        'currency' => 'string',
        'moving_average_price' => '\BeLenka\SAP\ProductODV4\Model\PerUnitPrice',
        'standard_price' => '\BeLenka\SAP\ProductODV4\Model\StandardPrice',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]',
        '_product' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
        '_product_valuation' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product' => null,
        'valuation_area' => null,
        'valuation_type' => null,
        'currency_role' => null,
        'ledger' => null,
        'product_price_control' => null,
        'product_price_unit_quantity' => null,
        'currency' => null,
        'moving_average_price' => null,
        'standard_price' => null,
        'base_unit' => null,
        'base_iso_unit' => null,
        'sap__messages' => null,
        '_product' => null,
        '_product_valuation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product' => false,
		'valuation_area' => false,
		'valuation_type' => false,
		'currency_role' => false,
		'ledger' => false,
		'product_price_control' => false,
		'product_price_unit_quantity' => false,
		'currency' => false,
		'moving_average_price' => false,
		'standard_price' => false,
		'base_unit' => false,
		'base_iso_unit' => false,
		'sap__messages' => false,
		'_product' => false,
		'_product_valuation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'Product',
        'valuation_area' => 'ValuationArea',
        'valuation_type' => 'ValuationType',
        'currency_role' => 'CurrencyRole',
        'ledger' => 'Ledger',
        'product_price_control' => 'ProductPriceControl',
        'product_price_unit_quantity' => 'ProductPriceUnitQuantity',
        'currency' => 'Currency',
        'moving_average_price' => 'MovingAveragePrice',
        'standard_price' => 'StandardPrice',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'sap__messages' => 'SAP__Messages',
        '_product' => '_Product',
        '_product_valuation' => '_ProductValuation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'valuation_area' => 'setValuationArea',
        'valuation_type' => 'setValuationType',
        'currency_role' => 'setCurrencyRole',
        'ledger' => 'setLedger',
        'product_price_control' => 'setProductPriceControl',
        'product_price_unit_quantity' => 'setProductPriceUnitQuantity',
        'currency' => 'setCurrency',
        'moving_average_price' => 'setMovingAveragePrice',
        'standard_price' => 'setStandardPrice',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'sap__messages' => 'setSapMessages',
        '_product' => '_setProduct',
        '_product_valuation' => '_setProductValuation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'valuation_area' => 'getValuationArea',
        'valuation_type' => 'getValuationType',
        'currency_role' => 'getCurrencyRole',
        'ledger' => 'getLedger',
        'product_price_control' => 'getProductPriceControl',
        'product_price_unit_quantity' => 'getProductPriceUnitQuantity',
        'currency' => 'getCurrency',
        'moving_average_price' => 'getMovingAveragePrice',
        'standard_price' => 'getStandardPrice',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'sap__messages' => 'getSapMessages',
        '_product' => '_getProduct',
        '_product_valuation' => '_getProductValuation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('valuation_area', $data ?? [], null);
        $this->setIfExists('valuation_type', $data ?? [], null);
        $this->setIfExists('currency_role', $data ?? [], null);
        $this->setIfExists('ledger', $data ?? [], null);
        $this->setIfExists('product_price_control', $data ?? [], null);
        $this->setIfExists('product_price_unit_quantity', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('moving_average_price', $data ?? [], null);
        $this->setIfExists('standard_price', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_product', $data ?? [], null);
        $this->setIfExists('_product_valuation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 18)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['valuation_area']) && (mb_strlen($this->container['valuation_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'valuation_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['valuation_type']) && (mb_strlen($this->container['valuation_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'valuation_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['currency_role']) && (mb_strlen($this->container['currency_role']) > 2)) {
            $invalidProperties[] = "invalid value for 'currency_role', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ledger']) && (mb_strlen($this->container['ledger']) > 2)) {
            $invalidProperties[] = "invalid value for 'ledger', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['product_price_control']) && (mb_strlen($this->container['product_price_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_price_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product Number
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        if ((mb_strlen($product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 18.');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets valuation_area
     *
     * @return string|null
     */
    public function getValuationArea()
    {
        return $this->container['valuation_area'];
    }

    /**
     * Sets valuation_area
     *
     * @param string|null $valuation_area valuation_area
     *
     * @return self
     */
    public function setValuationArea($valuation_area)
    {
        if (is_null($valuation_area)) {
            throw new \InvalidArgumentException('non-nullable valuation_area cannot be null');
        }
        if ((mb_strlen($valuation_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $valuation_area when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 4.');
        }

        $this->container['valuation_area'] = $valuation_area;

        return $this;
    }

    /**
     * Gets valuation_type
     *
     * @return string|null
     */
    public function getValuationType()
    {
        return $this->container['valuation_type'];
    }

    /**
     * Sets valuation_type
     *
     * @param string|null $valuation_type valuation_type
     *
     * @return self
     */
    public function setValuationType($valuation_type)
    {
        if (is_null($valuation_type)) {
            throw new \InvalidArgumentException('non-nullable valuation_type cannot be null');
        }
        if ((mb_strlen($valuation_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $valuation_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 10.');
        }

        $this->container['valuation_type'] = $valuation_type;

        return $this;
    }

    /**
     * Gets currency_role
     *
     * @return string|null
     */
    public function getCurrencyRole()
    {
        return $this->container['currency_role'];
    }

    /**
     * Sets currency_role
     *
     * @param string|null $currency_role External Currency Type and Valuation View
     *
     * @return self
     */
    public function setCurrencyRole($currency_role)
    {
        if (is_null($currency_role)) {
            throw new \InvalidArgumentException('non-nullable currency_role cannot be null');
        }
        if ((mb_strlen($currency_role) > 2)) {
            throw new \InvalidArgumentException('invalid length for $currency_role when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 2.');
        }

        $this->container['currency_role'] = $currency_role;

        return $this;
    }

    /**
     * Gets ledger
     *
     * @return string|null
     */
    public function getLedger()
    {
        return $this->container['ledger'];
    }

    /**
     * Sets ledger
     *
     * @param string|null $ledger Ledger in General Ledger Accounting
     *
     * @return self
     */
    public function setLedger($ledger)
    {
        if (is_null($ledger)) {
            throw new \InvalidArgumentException('non-nullable ledger cannot be null');
        }
        if ((mb_strlen($ledger) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ledger when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 2.');
        }

        $this->container['ledger'] = $ledger;

        return $this;
    }

    /**
     * Gets product_price_control
     *
     * @return string|null
     */
    public function getProductPriceControl()
    {
        return $this->container['product_price_control'];
    }

    /**
     * Sets product_price_control
     *
     * @param string|null $product_price_control Price control indicator
     *
     * @return self
     */
    public function setProductPriceControl($product_price_control)
    {
        if (is_null($product_price_control)) {
            throw new \InvalidArgumentException('non-nullable product_price_control cannot be null');
        }
        if ((mb_strlen($product_price_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_price_control when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 1.');
        }

        $this->container['product_price_control'] = $product_price_control;

        return $this;
    }

    /**
     * Gets product_price_unit_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\PriceUnit|null
     */
    public function getProductPriceUnitQuantity()
    {
        return $this->container['product_price_unit_quantity'];
    }

    /**
     * Sets product_price_unit_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\PriceUnit|null $product_price_unit_quantity product_price_unit_quantity
     *
     * @return self
     */
    public function setProductPriceUnitQuantity($product_price_unit_quantity)
    {
        if (is_null($product_price_unit_quantity)) {
            throw new \InvalidArgumentException('non-nullable product_price_unit_quantity cannot be null');
        }
        $this->container['product_price_unit_quantity'] = $product_price_unit_quantity;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency Key
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets moving_average_price
     *
     * @return \BeLenka\SAP\ProductODV4\Model\PerUnitPrice|null
     */
    public function getMovingAveragePrice()
    {
        return $this->container['moving_average_price'];
    }

    /**
     * Sets moving_average_price
     *
     * @param \BeLenka\SAP\ProductODV4\Model\PerUnitPrice|null $moving_average_price moving_average_price
     *
     * @return self
     */
    public function setMovingAveragePrice($moving_average_price)
    {
        if (is_null($moving_average_price)) {
            throw new \InvalidArgumentException('non-nullable moving_average_price cannot be null');
        }
        $this->container['moving_average_price'] = $moving_average_price;

        return $this;
    }

    /**
     * Gets standard_price
     *
     * @return \BeLenka\SAP\ProductODV4\Model\StandardPrice|null
     */
    public function getStandardPrice()
    {
        return $this->container['standard_price'];
    }

    /**
     * Sets standard_price
     *
     * @param \BeLenka\SAP\ProductODV4\Model\StandardPrice|null $standard_price standard_price
     *
     * @return self
     */
    public function setStandardPrice($standard_price)
    {
        if (is_null($standard_price)) {
            throw new \InvalidArgumentException('non-nullable standard_price cannot be null');
        }
        $this->container['standard_price'] = $standard_price;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _product
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null
     */
    public function _getProduct()
    {
    return $this->container['_product'];
    }

    /**
     * Sets _product
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null $_product _product
     *
     * @return self
     */
    public function _setProduct($_product)
    {
        if (is_null($_product)) {
            throw new \InvalidArgumentException('non-nullable _product cannot be null');
        }
        $this->container['_product'] = $_product;

        return $this;
    }

    /**
     * Gets _product_valuation
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|null
     */
    public function _getProductValuation()
    {
    return $this->container['_product_valuation'];
    }

    /**
     * Sets _product_valuation
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|null $_product_valuation _product_valuation
     *
     * @return self
     */
    public function _setProductValuation($_product_valuation)
    {
        if (is_null($_product_valuation)) {
            throw new \InvalidArgumentException('non-nullable _product_valuation cannot be null');
        }
        $this->container['_product_valuation'] = $_product_valuation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


