<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductSales_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product' => 'string',
        'sales_status' => 'string',
        'sales_status_validity_date' => '\DateTime',
        'transportation_group' => 'string',
        'packaging_product_type' => 'string',
        'allowed_packaging_weight_qty' => '\BeLenka\SAP\ProductODV4\Model\AllowedPkgWt',
        'allowed_packaging_weight_qty_unit' => 'string',
        'allwd_packaging_weight_qty_iso_unit' => 'string',
        'allowed_packaging_volume_qty' => '\BeLenka\SAP\ProductODV4\Model\AllowedVolume',
        'allowed_packaging_volume_qty_unit' => 'string',
        'allwd_packaging_volume_qty_iso_unit' => 'string',
        'maximum_level_by_volume_in_percent' => '\BeLenka\SAP\ProductODV4\Model\MaximumLevel',
        'excess_weight_tolerance_value' => '\BeLenka\SAP\ProductODV4\Model\ExcessWeightTolerance',
        'packgg_product_is_closed_packaging' => 'bool',
        'product_stacking_factor' => 'int',
        'prod_excess_volume_tolerance_value' => '\BeLenka\SAP\ProductODV4\Model\ExcessVolumeTolerance',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]',
        '_product' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product' => null,
        'sales_status' => null,
        'sales_status_validity_date' => 'date',
        'transportation_group' => null,
        'packaging_product_type' => null,
        'allowed_packaging_weight_qty' => null,
        'allowed_packaging_weight_qty_unit' => null,
        'allwd_packaging_weight_qty_iso_unit' => null,
        'allowed_packaging_volume_qty' => null,
        'allowed_packaging_volume_qty_unit' => null,
        'allwd_packaging_volume_qty_iso_unit' => null,
        'maximum_level_by_volume_in_percent' => null,
        'excess_weight_tolerance_value' => null,
        'packgg_product_is_closed_packaging' => null,
        'product_stacking_factor' => 'int16',
        'prod_excess_volume_tolerance_value' => null,
        'sap__messages' => null,
        '_product' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product' => false,
		'sales_status' => false,
		'sales_status_validity_date' => true,
		'transportation_group' => false,
		'packaging_product_type' => false,
		'allowed_packaging_weight_qty' => false,
		'allowed_packaging_weight_qty_unit' => false,
		'allwd_packaging_weight_qty_iso_unit' => false,
		'allowed_packaging_volume_qty' => false,
		'allowed_packaging_volume_qty_unit' => false,
		'allwd_packaging_volume_qty_iso_unit' => false,
		'maximum_level_by_volume_in_percent' => false,
		'excess_weight_tolerance_value' => false,
		'packgg_product_is_closed_packaging' => false,
		'product_stacking_factor' => false,
		'prod_excess_volume_tolerance_value' => false,
		'sap__messages' => false,
		'_product' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'Product',
        'sales_status' => 'SalesStatus',
        'sales_status_validity_date' => 'SalesStatusValidityDate',
        'transportation_group' => 'TransportationGroup',
        'packaging_product_type' => 'PackagingProductType',
        'allowed_packaging_weight_qty' => 'AllowedPackagingWeightQty',
        'allowed_packaging_weight_qty_unit' => 'AllowedPackagingWeightQtyUnit',
        'allwd_packaging_weight_qty_iso_unit' => 'AllwdPackagingWeightQtyISOUnit',
        'allowed_packaging_volume_qty' => 'AllowedPackagingVolumeQty',
        'allowed_packaging_volume_qty_unit' => 'AllowedPackagingVolumeQtyUnit',
        'allwd_packaging_volume_qty_iso_unit' => 'AllwdPackagingVolumeQtyISOUnit',
        'maximum_level_by_volume_in_percent' => 'MaximumLevelByVolumeInPercent',
        'excess_weight_tolerance_value' => 'ExcessWeightToleranceValue',
        'packgg_product_is_closed_packaging' => 'PackggProductIsClosedPackaging',
        'product_stacking_factor' => 'ProductStackingFactor',
        'prod_excess_volume_tolerance_value' => 'ProdExcessVolumeToleranceValue',
        'sap__messages' => 'SAP__Messages',
        '_product' => '_Product'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'sales_status' => 'setSalesStatus',
        'sales_status_validity_date' => 'setSalesStatusValidityDate',
        'transportation_group' => 'setTransportationGroup',
        'packaging_product_type' => 'setPackagingProductType',
        'allowed_packaging_weight_qty' => 'setAllowedPackagingWeightQty',
        'allowed_packaging_weight_qty_unit' => 'setAllowedPackagingWeightQtyUnit',
        'allwd_packaging_weight_qty_iso_unit' => 'setAllwdPackagingWeightQtyIsoUnit',
        'allowed_packaging_volume_qty' => 'setAllowedPackagingVolumeQty',
        'allowed_packaging_volume_qty_unit' => 'setAllowedPackagingVolumeQtyUnit',
        'allwd_packaging_volume_qty_iso_unit' => 'setAllwdPackagingVolumeQtyIsoUnit',
        'maximum_level_by_volume_in_percent' => 'setMaximumLevelByVolumeInPercent',
        'excess_weight_tolerance_value' => 'setExcessWeightToleranceValue',
        'packgg_product_is_closed_packaging' => 'setPackggProductIsClosedPackaging',
        'product_stacking_factor' => 'setProductStackingFactor',
        'prod_excess_volume_tolerance_value' => 'setProdExcessVolumeToleranceValue',
        'sap__messages' => 'setSapMessages',
        '_product' => '_setProduct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'sales_status' => 'getSalesStatus',
        'sales_status_validity_date' => 'getSalesStatusValidityDate',
        'transportation_group' => 'getTransportationGroup',
        'packaging_product_type' => 'getPackagingProductType',
        'allowed_packaging_weight_qty' => 'getAllowedPackagingWeightQty',
        'allowed_packaging_weight_qty_unit' => 'getAllowedPackagingWeightQtyUnit',
        'allwd_packaging_weight_qty_iso_unit' => 'getAllwdPackagingWeightQtyIsoUnit',
        'allowed_packaging_volume_qty' => 'getAllowedPackagingVolumeQty',
        'allowed_packaging_volume_qty_unit' => 'getAllowedPackagingVolumeQtyUnit',
        'allwd_packaging_volume_qty_iso_unit' => 'getAllwdPackagingVolumeQtyIsoUnit',
        'maximum_level_by_volume_in_percent' => 'getMaximumLevelByVolumeInPercent',
        'excess_weight_tolerance_value' => 'getExcessWeightToleranceValue',
        'packgg_product_is_closed_packaging' => 'getPackggProductIsClosedPackaging',
        'product_stacking_factor' => 'getProductStackingFactor',
        'prod_excess_volume_tolerance_value' => 'getProdExcessVolumeToleranceValue',
        'sap__messages' => 'getSapMessages',
        '_product' => '_getProduct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('sales_status', $data ?? [], null);
        $this->setIfExists('sales_status_validity_date', $data ?? [], null);
        $this->setIfExists('transportation_group', $data ?? [], null);
        $this->setIfExists('packaging_product_type', $data ?? [], null);
        $this->setIfExists('allowed_packaging_weight_qty', $data ?? [], null);
        $this->setIfExists('allowed_packaging_weight_qty_unit', $data ?? [], null);
        $this->setIfExists('allwd_packaging_weight_qty_iso_unit', $data ?? [], null);
        $this->setIfExists('allowed_packaging_volume_qty', $data ?? [], null);
        $this->setIfExists('allowed_packaging_volume_qty_unit', $data ?? [], null);
        $this->setIfExists('allwd_packaging_volume_qty_iso_unit', $data ?? [], null);
        $this->setIfExists('maximum_level_by_volume_in_percent', $data ?? [], null);
        $this->setIfExists('excess_weight_tolerance_value', $data ?? [], null);
        $this->setIfExists('packgg_product_is_closed_packaging', $data ?? [], null);
        $this->setIfExists('product_stacking_factor', $data ?? [], null);
        $this->setIfExists('prod_excess_volume_tolerance_value', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_product', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 18)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['sales_status']) && (mb_strlen($this->container['sales_status']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_status', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['transportation_group']) && (mb_strlen($this->container['transportation_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'transportation_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['packaging_product_type']) && (mb_strlen($this->container['packaging_product_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'packaging_product_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['allowed_packaging_weight_qty_unit']) && (mb_strlen($this->container['allowed_packaging_weight_qty_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'allowed_packaging_weight_qty_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['allwd_packaging_weight_qty_iso_unit']) && (mb_strlen($this->container['allwd_packaging_weight_qty_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'allwd_packaging_weight_qty_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['allowed_packaging_volume_qty_unit']) && (mb_strlen($this->container['allowed_packaging_volume_qty_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'allowed_packaging_volume_qty_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['allwd_packaging_volume_qty_iso_unit']) && (mb_strlen($this->container['allwd_packaging_volume_qty_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'allwd_packaging_volume_qty_iso_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product Number
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        if ((mb_strlen($product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 18.');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets sales_status
     *
     * @return string|null
     */
    public function getSalesStatus()
    {
        return $this->container['sales_status'];
    }

    /**
     * Sets sales_status
     *
     * @param string|null $sales_status Cross-Distribution-Chain Material Status
     *
     * @return self
     */
    public function setSalesStatus($sales_status)
    {
        if (is_null($sales_status)) {
            throw new \InvalidArgumentException('non-nullable sales_status cannot be null');
        }
        if ((mb_strlen($sales_status) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_status when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 2.');
        }

        $this->container['sales_status'] = $sales_status;

        return $this;
    }

    /**
     * Gets sales_status_validity_date
     *
     * @return \DateTime|null
     */
    public function getSalesStatusValidityDate()
    {
        return $this->container['sales_status_validity_date'];
    }

    /**
     * Sets sales_status_validity_date
     *
     * @param \DateTime|null $sales_status_validity_date Date from which the X-distr.-chain Product status is valid
     *
     * @return self
     */
    public function setSalesStatusValidityDate($sales_status_validity_date)
    {
        if (is_null($sales_status_validity_date)) {
            array_push($this->openAPINullablesSetToNull, 'sales_status_validity_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_status_validity_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_status_validity_date'] = $sales_status_validity_date;

        return $this;
    }

    /**
     * Gets transportation_group
     *
     * @return string|null
     */
    public function getTransportationGroup()
    {
        return $this->container['transportation_group'];
    }

    /**
     * Sets transportation_group
     *
     * @param string|null $transportation_group transportation_group
     *
     * @return self
     */
    public function setTransportationGroup($transportation_group)
    {
        if (is_null($transportation_group)) {
            throw new \InvalidArgumentException('non-nullable transportation_group cannot be null');
        }
        if ((mb_strlen($transportation_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $transportation_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 4.');
        }

        $this->container['transportation_group'] = $transportation_group;

        return $this;
    }

    /**
     * Gets packaging_product_type
     *
     * @return string|null
     */
    public function getPackagingProductType()
    {
        return $this->container['packaging_product_type'];
    }

    /**
     * Sets packaging_product_type
     *
     * @param string|null $packaging_product_type packaging_product_type
     *
     * @return self
     */
    public function setPackagingProductType($packaging_product_type)
    {
        if (is_null($packaging_product_type)) {
            throw new \InvalidArgumentException('non-nullable packaging_product_type cannot be null');
        }
        if ((mb_strlen($packaging_product_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $packaging_product_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 4.');
        }

        $this->container['packaging_product_type'] = $packaging_product_type;

        return $this;
    }

    /**
     * Gets allowed_packaging_weight_qty
     *
     * @return \BeLenka\SAP\ProductODV4\Model\AllowedPkgWt|null
     */
    public function getAllowedPackagingWeightQty()
    {
        return $this->container['allowed_packaging_weight_qty'];
    }

    /**
     * Sets allowed_packaging_weight_qty
     *
     * @param \BeLenka\SAP\ProductODV4\Model\AllowedPkgWt|null $allowed_packaging_weight_qty allowed_packaging_weight_qty
     *
     * @return self
     */
    public function setAllowedPackagingWeightQty($allowed_packaging_weight_qty)
    {
        if (is_null($allowed_packaging_weight_qty)) {
            throw new \InvalidArgumentException('non-nullable allowed_packaging_weight_qty cannot be null');
        }
        $this->container['allowed_packaging_weight_qty'] = $allowed_packaging_weight_qty;

        return $this;
    }

    /**
     * Gets allowed_packaging_weight_qty_unit
     *
     * @return string|null
     */
    public function getAllowedPackagingWeightQtyUnit()
    {
        return $this->container['allowed_packaging_weight_qty_unit'];
    }

    /**
     * Sets allowed_packaging_weight_qty_unit
     *
     * @param string|null $allowed_packaging_weight_qty_unit Unit of weight (allowed packaging weight)
     *
     * @return self
     */
    public function setAllowedPackagingWeightQtyUnit($allowed_packaging_weight_qty_unit)
    {
        if (is_null($allowed_packaging_weight_qty_unit)) {
            throw new \InvalidArgumentException('non-nullable allowed_packaging_weight_qty_unit cannot be null');
        }
        if ((mb_strlen($allowed_packaging_weight_qty_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $allowed_packaging_weight_qty_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 3.');
        }

        $this->container['allowed_packaging_weight_qty_unit'] = $allowed_packaging_weight_qty_unit;

        return $this;
    }

    /**
     * Gets allwd_packaging_weight_qty_iso_unit
     *
     * @return string|null
     */
    public function getAllwdPackagingWeightQtyIsoUnit()
    {
        return $this->container['allwd_packaging_weight_qty_iso_unit'];
    }

    /**
     * Sets allwd_packaging_weight_qty_iso_unit
     *
     * @param string|null $allwd_packaging_weight_qty_iso_unit ISO Code for Unit of Measurement
     *
     * @return self
     */
    public function setAllwdPackagingWeightQtyIsoUnit($allwd_packaging_weight_qty_iso_unit)
    {
        if (is_null($allwd_packaging_weight_qty_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable allwd_packaging_weight_qty_iso_unit cannot be null');
        }
        if ((mb_strlen($allwd_packaging_weight_qty_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $allwd_packaging_weight_qty_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 3.');
        }

        $this->container['allwd_packaging_weight_qty_iso_unit'] = $allwd_packaging_weight_qty_iso_unit;

        return $this;
    }

    /**
     * Gets allowed_packaging_volume_qty
     *
     * @return \BeLenka\SAP\ProductODV4\Model\AllowedVolume|null
     */
    public function getAllowedPackagingVolumeQty()
    {
        return $this->container['allowed_packaging_volume_qty'];
    }

    /**
     * Sets allowed_packaging_volume_qty
     *
     * @param \BeLenka\SAP\ProductODV4\Model\AllowedVolume|null $allowed_packaging_volume_qty allowed_packaging_volume_qty
     *
     * @return self
     */
    public function setAllowedPackagingVolumeQty($allowed_packaging_volume_qty)
    {
        if (is_null($allowed_packaging_volume_qty)) {
            throw new \InvalidArgumentException('non-nullable allowed_packaging_volume_qty cannot be null');
        }
        $this->container['allowed_packaging_volume_qty'] = $allowed_packaging_volume_qty;

        return $this;
    }

    /**
     * Gets allowed_packaging_volume_qty_unit
     *
     * @return string|null
     */
    public function getAllowedPackagingVolumeQtyUnit()
    {
        return $this->container['allowed_packaging_volume_qty_unit'];
    }

    /**
     * Sets allowed_packaging_volume_qty_unit
     *
     * @param string|null $allowed_packaging_volume_qty_unit Volume unit (allowed packaging volume)
     *
     * @return self
     */
    public function setAllowedPackagingVolumeQtyUnit($allowed_packaging_volume_qty_unit)
    {
        if (is_null($allowed_packaging_volume_qty_unit)) {
            throw new \InvalidArgumentException('non-nullable allowed_packaging_volume_qty_unit cannot be null');
        }
        if ((mb_strlen($allowed_packaging_volume_qty_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $allowed_packaging_volume_qty_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 3.');
        }

        $this->container['allowed_packaging_volume_qty_unit'] = $allowed_packaging_volume_qty_unit;

        return $this;
    }

    /**
     * Gets allwd_packaging_volume_qty_iso_unit
     *
     * @return string|null
     */
    public function getAllwdPackagingVolumeQtyIsoUnit()
    {
        return $this->container['allwd_packaging_volume_qty_iso_unit'];
    }

    /**
     * Sets allwd_packaging_volume_qty_iso_unit
     *
     * @param string|null $allwd_packaging_volume_qty_iso_unit ISO Code for Unit of Measurement
     *
     * @return self
     */
    public function setAllwdPackagingVolumeQtyIsoUnit($allwd_packaging_volume_qty_iso_unit)
    {
        if (is_null($allwd_packaging_volume_qty_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable allwd_packaging_volume_qty_iso_unit cannot be null');
        }
        if ((mb_strlen($allwd_packaging_volume_qty_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $allwd_packaging_volume_qty_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType., must be smaller than or equal to 3.');
        }

        $this->container['allwd_packaging_volume_qty_iso_unit'] = $allwd_packaging_volume_qty_iso_unit;

        return $this;
    }

    /**
     * Gets maximum_level_by_volume_in_percent
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MaximumLevel|null
     */
    public function getMaximumLevelByVolumeInPercent()
    {
        return $this->container['maximum_level_by_volume_in_percent'];
    }

    /**
     * Sets maximum_level_by_volume_in_percent
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MaximumLevel|null $maximum_level_by_volume_in_percent maximum_level_by_volume_in_percent
     *
     * @return self
     */
    public function setMaximumLevelByVolumeInPercent($maximum_level_by_volume_in_percent)
    {
        if (is_null($maximum_level_by_volume_in_percent)) {
            throw new \InvalidArgumentException('non-nullable maximum_level_by_volume_in_percent cannot be null');
        }
        $this->container['maximum_level_by_volume_in_percent'] = $maximum_level_by_volume_in_percent;

        return $this;
    }

    /**
     * Gets excess_weight_tolerance_value
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ExcessWeightTolerance|null
     */
    public function getExcessWeightToleranceValue()
    {
        return $this->container['excess_weight_tolerance_value'];
    }

    /**
     * Sets excess_weight_tolerance_value
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ExcessWeightTolerance|null $excess_weight_tolerance_value excess_weight_tolerance_value
     *
     * @return self
     */
    public function setExcessWeightToleranceValue($excess_weight_tolerance_value)
    {
        if (is_null($excess_weight_tolerance_value)) {
            throw new \InvalidArgumentException('non-nullable excess_weight_tolerance_value cannot be null');
        }
        $this->container['excess_weight_tolerance_value'] = $excess_weight_tolerance_value;

        return $this;
    }

    /**
     * Gets packgg_product_is_closed_packaging
     *
     * @return bool|null
     */
    public function getPackggProductIsClosedPackaging()
    {
        return $this->container['packgg_product_is_closed_packaging'];
    }

    /**
     * Sets packgg_product_is_closed_packaging
     *
     * @param bool|null $packgg_product_is_closed_packaging Packaging Material is Closed Packaging
     *
     * @return self
     */
    public function setPackggProductIsClosedPackaging($packgg_product_is_closed_packaging)
    {
        if (is_null($packgg_product_is_closed_packaging)) {
            throw new \InvalidArgumentException('non-nullable packgg_product_is_closed_packaging cannot be null');
        }
        $this->container['packgg_product_is_closed_packaging'] = $packgg_product_is_closed_packaging;

        return $this;
    }

    /**
     * Gets product_stacking_factor
     *
     * @return int|null
     */
    public function getProductStackingFactor()
    {
        return $this->container['product_stacking_factor'];
    }

    /**
     * Sets product_stacking_factor
     *
     * @param int|null $product_stacking_factor Stacking factor
     *
     * @return self
     */
    public function setProductStackingFactor($product_stacking_factor)
    {
        if (is_null($product_stacking_factor)) {
            throw new \InvalidArgumentException('non-nullable product_stacking_factor cannot be null');
        }
        $this->container['product_stacking_factor'] = $product_stacking_factor;

        return $this;
    }

    /**
     * Gets prod_excess_volume_tolerance_value
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ExcessVolumeTolerance|null
     */
    public function getProdExcessVolumeToleranceValue()
    {
        return $this->container['prod_excess_volume_tolerance_value'];
    }

    /**
     * Sets prod_excess_volume_tolerance_value
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ExcessVolumeTolerance|null $prod_excess_volume_tolerance_value prod_excess_volume_tolerance_value
     *
     * @return self
     */
    public function setProdExcessVolumeToleranceValue($prod_excess_volume_tolerance_value)
    {
        if (is_null($prod_excess_volume_tolerance_value)) {
            throw new \InvalidArgumentException('non-nullable prod_excess_volume_tolerance_value cannot be null');
        }
        $this->container['prod_excess_volume_tolerance_value'] = $prod_excess_volume_tolerance_value;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _product
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null
     */
    public function _getProduct()
    {
    return $this->container['_product'];
    }

    /**
     * Sets _product
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null $_product _product
     *
     * @return self
     */
    public function _setProduct($_product)
    {
        if (is_null($_product)) {
            throw new \InvalidArgumentException('non-nullable _product cannot be null');
        }
        $this->container['_product'] = $_product;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


