<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductPlantCosting_Type-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_co_product' => 'bool',
        'costing_lot_size' => '\BeLenka\SAP\ProductODV4\Model\CostingLotSize',
        'task_list_group' => 'string',
        'task_list_type' => 'string',
        'costing_special_procurement_type' => 'string',
        'source_bom_alternative' => 'string',
        'product_bom_usage' => 'string',
        'product_is_costing_relevant' => 'bool',
        'task_list_group_counter' => 'string',
        'variance_key' => 'string',
        'costing_production_version' => 'string',
        'is_fixed_price_co_product' => 'bool',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_co_product' => null,
        'costing_lot_size' => null,
        'task_list_group' => null,
        'task_list_type' => null,
        'costing_special_procurement_type' => null,
        'source_bom_alternative' => null,
        'product_bom_usage' => null,
        'product_is_costing_relevant' => null,
        'task_list_group_counter' => null,
        'variance_key' => null,
        'costing_production_version' => null,
        'is_fixed_price_co_product' => null,
        'base_unit' => null,
        'base_iso_unit' => null,
        'sap__messages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_co_product' => false,
		'costing_lot_size' => false,
		'task_list_group' => false,
		'task_list_type' => false,
		'costing_special_procurement_type' => false,
		'source_bom_alternative' => false,
		'product_bom_usage' => false,
		'product_is_costing_relevant' => false,
		'task_list_group_counter' => false,
		'variance_key' => false,
		'costing_production_version' => false,
		'is_fixed_price_co_product' => false,
		'base_unit' => false,
		'base_iso_unit' => false,
		'sap__messages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_co_product' => 'IsCoProduct',
        'costing_lot_size' => 'CostingLotSize',
        'task_list_group' => 'TaskListGroup',
        'task_list_type' => 'TaskListType',
        'costing_special_procurement_type' => 'CostingSpecialProcurementType',
        'source_bom_alternative' => 'SourceBOMAlternative',
        'product_bom_usage' => 'ProductBOMUsage',
        'product_is_costing_relevant' => 'ProductIsCostingRelevant',
        'task_list_group_counter' => 'TaskListGroupCounter',
        'variance_key' => 'VarianceKey',
        'costing_production_version' => 'CostingProductionVersion',
        'is_fixed_price_co_product' => 'IsFixedPriceCoProduct',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'sap__messages' => 'SAP__Messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_co_product' => 'setIsCoProduct',
        'costing_lot_size' => 'setCostingLotSize',
        'task_list_group' => 'setTaskListGroup',
        'task_list_type' => 'setTaskListType',
        'costing_special_procurement_type' => 'setCostingSpecialProcurementType',
        'source_bom_alternative' => 'setSourceBomAlternative',
        'product_bom_usage' => 'setProductBomUsage',
        'product_is_costing_relevant' => 'setProductIsCostingRelevant',
        'task_list_group_counter' => 'setTaskListGroupCounter',
        'variance_key' => 'setVarianceKey',
        'costing_production_version' => 'setCostingProductionVersion',
        'is_fixed_price_co_product' => 'setIsFixedPriceCoProduct',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'sap__messages' => 'setSapMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_co_product' => 'getIsCoProduct',
        'costing_lot_size' => 'getCostingLotSize',
        'task_list_group' => 'getTaskListGroup',
        'task_list_type' => 'getTaskListType',
        'costing_special_procurement_type' => 'getCostingSpecialProcurementType',
        'source_bom_alternative' => 'getSourceBomAlternative',
        'product_bom_usage' => 'getProductBomUsage',
        'product_is_costing_relevant' => 'getProductIsCostingRelevant',
        'task_list_group_counter' => 'getTaskListGroupCounter',
        'variance_key' => 'getVarianceKey',
        'costing_production_version' => 'getCostingProductionVersion',
        'is_fixed_price_co_product' => 'getIsFixedPriceCoProduct',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'sap__messages' => 'getSapMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_co_product', $data ?? [], null);
        $this->setIfExists('costing_lot_size', $data ?? [], null);
        $this->setIfExists('task_list_group', $data ?? [], null);
        $this->setIfExists('task_list_type', $data ?? [], null);
        $this->setIfExists('costing_special_procurement_type', $data ?? [], null);
        $this->setIfExists('source_bom_alternative', $data ?? [], null);
        $this->setIfExists('product_bom_usage', $data ?? [], null);
        $this->setIfExists('product_is_costing_relevant', $data ?? [], null);
        $this->setIfExists('task_list_group_counter', $data ?? [], null);
        $this->setIfExists('variance_key', $data ?? [], null);
        $this->setIfExists('costing_production_version', $data ?? [], null);
        $this->setIfExists('is_fixed_price_co_product', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['task_list_group']) && (mb_strlen($this->container['task_list_group']) > 8)) {
            $invalidProperties[] = "invalid value for 'task_list_group', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['task_list_type']) && (mb_strlen($this->container['task_list_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'task_list_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['costing_special_procurement_type']) && (mb_strlen($this->container['costing_special_procurement_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'costing_special_procurement_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['source_bom_alternative']) && (mb_strlen($this->container['source_bom_alternative']) > 2)) {
            $invalidProperties[] = "invalid value for 'source_bom_alternative', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['product_bom_usage']) && (mb_strlen($this->container['product_bom_usage']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_bom_usage', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['task_list_group_counter']) && (mb_strlen($this->container['task_list_group_counter']) > 2)) {
            $invalidProperties[] = "invalid value for 'task_list_group_counter', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['variance_key']) && (mb_strlen($this->container['variance_key']) > 6)) {
            $invalidProperties[] = "invalid value for 'variance_key', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['costing_production_version']) && (mb_strlen($this->container['costing_production_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'costing_production_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_co_product
     *
     * @return bool|null
     */
    public function getIsCoProduct()
    {
        return $this->container['is_co_product'];
    }

    /**
     * Sets is_co_product
     *
     * @param bool|null $is_co_product is_co_product
     *
     * @return self
     */
    public function setIsCoProduct($is_co_product)
    {
        if (is_null($is_co_product)) {
            throw new \InvalidArgumentException('non-nullable is_co_product cannot be null');
        }
        $this->container['is_co_product'] = $is_co_product;

        return $this;
    }

    /**
     * Gets costing_lot_size
     *
     * @return \BeLenka\SAP\ProductODV4\Model\CostingLotSize|null
     */
    public function getCostingLotSize()
    {
        return $this->container['costing_lot_size'];
    }

    /**
     * Sets costing_lot_size
     *
     * @param \BeLenka\SAP\ProductODV4\Model\CostingLotSize|null $costing_lot_size costing_lot_size
     *
     * @return self
     */
    public function setCostingLotSize($costing_lot_size)
    {
        if (is_null($costing_lot_size)) {
            throw new \InvalidArgumentException('non-nullable costing_lot_size cannot be null');
        }
        $this->container['costing_lot_size'] = $costing_lot_size;

        return $this;
    }

    /**
     * Gets task_list_group
     *
     * @return string|null
     */
    public function getTaskListGroup()
    {
        return $this->container['task_list_group'];
    }

    /**
     * Sets task_list_group
     *
     * @param string|null $task_list_group Key for Task List Group
     *
     * @return self
     */
    public function setTaskListGroup($task_list_group)
    {
        if (is_null($task_list_group)) {
            throw new \InvalidArgumentException('non-nullable task_list_group cannot be null');
        }
        if ((mb_strlen($task_list_group) > 8)) {
            throw new \InvalidArgumentException('invalid length for $task_list_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 8.');
        }

        $this->container['task_list_group'] = $task_list_group;

        return $this;
    }

    /**
     * Gets task_list_type
     *
     * @return string|null
     */
    public function getTaskListType()
    {
        return $this->container['task_list_type'];
    }

    /**
     * Sets task_list_type
     *
     * @param string|null $task_list_type task_list_type
     *
     * @return self
     */
    public function setTaskListType($task_list_type)
    {
        if (is_null($task_list_type)) {
            throw new \InvalidArgumentException('non-nullable task_list_type cannot be null');
        }
        if ((mb_strlen($task_list_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $task_list_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['task_list_type'] = $task_list_type;

        return $this;
    }

    /**
     * Gets costing_special_procurement_type
     *
     * @return string|null
     */
    public function getCostingSpecialProcurementType()
    {
        return $this->container['costing_special_procurement_type'];
    }

    /**
     * Sets costing_special_procurement_type
     *
     * @param string|null $costing_special_procurement_type Special Procurement Type for Costing
     *
     * @return self
     */
    public function setCostingSpecialProcurementType($costing_special_procurement_type)
    {
        if (is_null($costing_special_procurement_type)) {
            throw new \InvalidArgumentException('non-nullable costing_special_procurement_type cannot be null');
        }
        if ((mb_strlen($costing_special_procurement_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $costing_special_procurement_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['costing_special_procurement_type'] = $costing_special_procurement_type;

        return $this;
    }

    /**
     * Gets source_bom_alternative
     *
     * @return string|null
     */
    public function getSourceBomAlternative()
    {
        return $this->container['source_bom_alternative'];
    }

    /**
     * Sets source_bom_alternative
     *
     * @param string|null $source_bom_alternative source_bom_alternative
     *
     * @return self
     */
    public function setSourceBomAlternative($source_bom_alternative)
    {
        if (is_null($source_bom_alternative)) {
            throw new \InvalidArgumentException('non-nullable source_bom_alternative cannot be null');
        }
        if ((mb_strlen($source_bom_alternative) > 2)) {
            throw new \InvalidArgumentException('invalid length for $source_bom_alternative when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['source_bom_alternative'] = $source_bom_alternative;

        return $this;
    }

    /**
     * Gets product_bom_usage
     *
     * @return string|null
     */
    public function getProductBomUsage()
    {
        return $this->container['product_bom_usage'];
    }

    /**
     * Sets product_bom_usage
     *
     * @param string|null $product_bom_usage product_bom_usage
     *
     * @return self
     */
    public function setProductBomUsage($product_bom_usage)
    {
        if (is_null($product_bom_usage)) {
            throw new \InvalidArgumentException('non-nullable product_bom_usage cannot be null');
        }
        if ((mb_strlen($product_bom_usage) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_bom_usage when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_bom_usage'] = $product_bom_usage;

        return $this;
    }

    /**
     * Gets product_is_costing_relevant
     *
     * @return bool|null
     */
    public function getProductIsCostingRelevant()
    {
        return $this->container['product_is_costing_relevant'];
    }

    /**
     * Sets product_is_costing_relevant
     *
     * @param bool|null $product_is_costing_relevant product_is_costing_relevant
     *
     * @return self
     */
    public function setProductIsCostingRelevant($product_is_costing_relevant)
    {
        if (is_null($product_is_costing_relevant)) {
            throw new \InvalidArgumentException('non-nullable product_is_costing_relevant cannot be null');
        }
        $this->container['product_is_costing_relevant'] = $product_is_costing_relevant;

        return $this;
    }

    /**
     * Gets task_list_group_counter
     *
     * @return string|null
     */
    public function getTaskListGroupCounter()
    {
        return $this->container['task_list_group_counter'];
    }

    /**
     * Sets task_list_group_counter
     *
     * @param string|null $task_list_group_counter task_list_group_counter
     *
     * @return self
     */
    public function setTaskListGroupCounter($task_list_group_counter)
    {
        if (is_null($task_list_group_counter)) {
            throw new \InvalidArgumentException('non-nullable task_list_group_counter cannot be null');
        }
        if ((mb_strlen($task_list_group_counter) > 2)) {
            throw new \InvalidArgumentException('invalid length for $task_list_group_counter when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['task_list_group_counter'] = $task_list_group_counter;

        return $this;
    }

    /**
     * Gets variance_key
     *
     * @return string|null
     */
    public function getVarianceKey()
    {
        return $this->container['variance_key'];
    }

    /**
     * Sets variance_key
     *
     * @param string|null $variance_key variance_key
     *
     * @return self
     */
    public function setVarianceKey($variance_key)
    {
        if (is_null($variance_key)) {
            throw new \InvalidArgumentException('non-nullable variance_key cannot be null');
        }
        if ((mb_strlen($variance_key) > 6)) {
            throw new \InvalidArgumentException('invalid length for $variance_key when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['variance_key'] = $variance_key;

        return $this;
    }

    /**
     * Gets costing_production_version
     *
     * @return string|null
     */
    public function getCostingProductionVersion()
    {
        return $this->container['costing_production_version'];
    }

    /**
     * Sets costing_production_version
     *
     * @param string|null $costing_production_version Production Version To Be Costed
     *
     * @return self
     */
    public function setCostingProductionVersion($costing_production_version)
    {
        if (is_null($costing_production_version)) {
            throw new \InvalidArgumentException('non-nullable costing_production_version cannot be null');
        }
        if ((mb_strlen($costing_production_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $costing_production_version when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['costing_production_version'] = $costing_production_version;

        return $this;
    }

    /**
     * Gets is_fixed_price_co_product
     *
     * @return bool|null
     */
    public function getIsFixedPriceCoProduct()
    {
        return $this->container['is_fixed_price_co_product'];
    }

    /**
     * Sets is_fixed_price_co_product
     *
     * @param bool|null $is_fixed_price_co_product Fixed-Price Co-Product
     *
     * @return self
     */
    public function setIsFixedPriceCoProduct($is_fixed_price_co_product)
    {
        if (is_null($is_fixed_price_co_product)) {
            throw new \InvalidArgumentException('non-nullable is_fixed_price_co_product cannot be null');
        }
        $this->container['is_fixed_price_co_product'] = $is_fixed_price_co_product;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantCostingTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


