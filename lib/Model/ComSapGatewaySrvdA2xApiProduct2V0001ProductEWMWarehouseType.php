<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductEWMWarehouse_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product' => 'string',
        'ewm_warehouse' => 'string',
        'entitled_to_dispose_party' => 'string',
        'product_internal_uuid' => 'string',
        'supply_chain_unit_uuid' => 'string',
        'ewm_party_entitled_to_dispose_uuid' => 'string',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'ewm_product_process_block_profile' => 'string',
        'ewm_process_type_control_code' => 'string',
        'ewm_stgg_area_determination_group' => 'string',
        'required_min_shelf_life' => '\BeLenka\SAP\ProductODV4\Model\MinShelfLife',
        'ewm_ptwy_control_strategy' => 'string',
        'ewm_storage_section_method' => 'string',
        'ewm_storage_bin_type' => 'string',
        'ewm_bulk_storage_method' => 'string',
        'ewm_stock_removal_control_strategy' => 'string',
        'ewm_stock_determination_group' => 'string',
        'ewm_phys_inventory_counting_cycle' => 'string',
        'ewm_preferred_unit' => 'string',
        'ewm_preferred_unit_iso_code' => 'string',
        'ewm_quality_inspection_group' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]',
        '_product' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
        '_product_ewm_storage_type' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product' => null,
        'ewm_warehouse' => null,
        'entitled_to_dispose_party' => null,
        'product_internal_uuid' => 'uuid',
        'supply_chain_unit_uuid' => 'uuid',
        'ewm_party_entitled_to_dispose_uuid' => 'uuid',
        'base_unit' => null,
        'base_iso_unit' => null,
        'ewm_product_process_block_profile' => null,
        'ewm_process_type_control_code' => null,
        'ewm_stgg_area_determination_group' => null,
        'required_min_shelf_life' => null,
        'ewm_ptwy_control_strategy' => null,
        'ewm_storage_section_method' => null,
        'ewm_storage_bin_type' => null,
        'ewm_bulk_storage_method' => null,
        'ewm_stock_removal_control_strategy' => null,
        'ewm_stock_determination_group' => null,
        'ewm_phys_inventory_counting_cycle' => null,
        'ewm_preferred_unit' => null,
        'ewm_preferred_unit_iso_code' => null,
        'ewm_quality_inspection_group' => null,
        'sap__messages' => null,
        '_product' => null,
        '_product_ewm_storage_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product' => false,
		'ewm_warehouse' => false,
		'entitled_to_dispose_party' => false,
		'product_internal_uuid' => true,
		'supply_chain_unit_uuid' => true,
		'ewm_party_entitled_to_dispose_uuid' => true,
		'base_unit' => false,
		'base_iso_unit' => false,
		'ewm_product_process_block_profile' => false,
		'ewm_process_type_control_code' => false,
		'ewm_stgg_area_determination_group' => false,
		'required_min_shelf_life' => false,
		'ewm_ptwy_control_strategy' => false,
		'ewm_storage_section_method' => false,
		'ewm_storage_bin_type' => false,
		'ewm_bulk_storage_method' => false,
		'ewm_stock_removal_control_strategy' => false,
		'ewm_stock_determination_group' => false,
		'ewm_phys_inventory_counting_cycle' => false,
		'ewm_preferred_unit' => false,
		'ewm_preferred_unit_iso_code' => false,
		'ewm_quality_inspection_group' => false,
		'sap__messages' => false,
		'_product' => false,
		'_product_ewm_storage_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'Product',
        'ewm_warehouse' => 'EWMWarehouse',
        'entitled_to_dispose_party' => 'EntitledToDisposeParty',
        'product_internal_uuid' => 'ProductInternalUUID',
        'supply_chain_unit_uuid' => 'SupplyChainUnitUUID',
        'ewm_party_entitled_to_dispose_uuid' => 'EWMPartyEntitledToDisposeUUID',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'ewm_product_process_block_profile' => 'EWMProductProcessBlockProfile',
        'ewm_process_type_control_code' => 'EWMProcessTypeControlCode',
        'ewm_stgg_area_determination_group' => 'EWMStggAreaDeterminationGroup',
        'required_min_shelf_life' => 'RequiredMinShelfLife',
        'ewm_ptwy_control_strategy' => 'EWMPtwyControlStrategy',
        'ewm_storage_section_method' => 'EWMStorageSectionMethod',
        'ewm_storage_bin_type' => 'EWMStorageBinType',
        'ewm_bulk_storage_method' => 'EWMBulkStorageMethod',
        'ewm_stock_removal_control_strategy' => 'EWMStockRemovalControlStrategy',
        'ewm_stock_determination_group' => 'EWMStockDeterminationGroup',
        'ewm_phys_inventory_counting_cycle' => 'EWMPhysInventoryCountingCycle',
        'ewm_preferred_unit' => 'EWMPreferredUnit',
        'ewm_preferred_unit_iso_code' => 'EWMPreferredUnitISOCode',
        'ewm_quality_inspection_group' => 'EWMQualityInspectionGroup',
        'sap__messages' => 'SAP__Messages',
        '_product' => '_Product',
        '_product_ewm_storage_type' => '_ProductEWMStorageType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'ewm_warehouse' => 'setEwmWarehouse',
        'entitled_to_dispose_party' => 'setEntitledToDisposeParty',
        'product_internal_uuid' => 'setProductInternalUuid',
        'supply_chain_unit_uuid' => 'setSupplyChainUnitUuid',
        'ewm_party_entitled_to_dispose_uuid' => 'setEwmPartyEntitledToDisposeUuid',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'ewm_product_process_block_profile' => 'setEwmProductProcessBlockProfile',
        'ewm_process_type_control_code' => 'setEwmProcessTypeControlCode',
        'ewm_stgg_area_determination_group' => 'setEwmStggAreaDeterminationGroup',
        'required_min_shelf_life' => 'setRequiredMinShelfLife',
        'ewm_ptwy_control_strategy' => 'setEwmPtwyControlStrategy',
        'ewm_storage_section_method' => 'setEwmStorageSectionMethod',
        'ewm_storage_bin_type' => 'setEwmStorageBinType',
        'ewm_bulk_storage_method' => 'setEwmBulkStorageMethod',
        'ewm_stock_removal_control_strategy' => 'setEwmStockRemovalControlStrategy',
        'ewm_stock_determination_group' => 'setEwmStockDeterminationGroup',
        'ewm_phys_inventory_counting_cycle' => 'setEwmPhysInventoryCountingCycle',
        'ewm_preferred_unit' => 'setEwmPreferredUnit',
        'ewm_preferred_unit_iso_code' => 'setEwmPreferredUnitIsoCode',
        'ewm_quality_inspection_group' => 'setEwmQualityInspectionGroup',
        'sap__messages' => 'setSapMessages',
        '_product' => '_setProduct',
        '_product_ewm_storage_type' => '_setProductEwmStorageType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'ewm_warehouse' => 'getEwmWarehouse',
        'entitled_to_dispose_party' => 'getEntitledToDisposeParty',
        'product_internal_uuid' => 'getProductInternalUuid',
        'supply_chain_unit_uuid' => 'getSupplyChainUnitUuid',
        'ewm_party_entitled_to_dispose_uuid' => 'getEwmPartyEntitledToDisposeUuid',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'ewm_product_process_block_profile' => 'getEwmProductProcessBlockProfile',
        'ewm_process_type_control_code' => 'getEwmProcessTypeControlCode',
        'ewm_stgg_area_determination_group' => 'getEwmStggAreaDeterminationGroup',
        'required_min_shelf_life' => 'getRequiredMinShelfLife',
        'ewm_ptwy_control_strategy' => 'getEwmPtwyControlStrategy',
        'ewm_storage_section_method' => 'getEwmStorageSectionMethod',
        'ewm_storage_bin_type' => 'getEwmStorageBinType',
        'ewm_bulk_storage_method' => 'getEwmBulkStorageMethod',
        'ewm_stock_removal_control_strategy' => 'getEwmStockRemovalControlStrategy',
        'ewm_stock_determination_group' => 'getEwmStockDeterminationGroup',
        'ewm_phys_inventory_counting_cycle' => 'getEwmPhysInventoryCountingCycle',
        'ewm_preferred_unit' => 'getEwmPreferredUnit',
        'ewm_preferred_unit_iso_code' => 'getEwmPreferredUnitIsoCode',
        'ewm_quality_inspection_group' => 'getEwmQualityInspectionGroup',
        'sap__messages' => 'getSapMessages',
        '_product' => '_getProduct',
        '_product_ewm_storage_type' => '_getProductEwmStorageType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('ewm_warehouse', $data ?? [], null);
        $this->setIfExists('entitled_to_dispose_party', $data ?? [], null);
        $this->setIfExists('product_internal_uuid', $data ?? [], null);
        $this->setIfExists('supply_chain_unit_uuid', $data ?? [], null);
        $this->setIfExists('ewm_party_entitled_to_dispose_uuid', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('ewm_product_process_block_profile', $data ?? [], null);
        $this->setIfExists('ewm_process_type_control_code', $data ?? [], null);
        $this->setIfExists('ewm_stgg_area_determination_group', $data ?? [], null);
        $this->setIfExists('required_min_shelf_life', $data ?? [], null);
        $this->setIfExists('ewm_ptwy_control_strategy', $data ?? [], null);
        $this->setIfExists('ewm_storage_section_method', $data ?? [], null);
        $this->setIfExists('ewm_storage_bin_type', $data ?? [], null);
        $this->setIfExists('ewm_bulk_storage_method', $data ?? [], null);
        $this->setIfExists('ewm_stock_removal_control_strategy', $data ?? [], null);
        $this->setIfExists('ewm_stock_determination_group', $data ?? [], null);
        $this->setIfExists('ewm_phys_inventory_counting_cycle', $data ?? [], null);
        $this->setIfExists('ewm_preferred_unit', $data ?? [], null);
        $this->setIfExists('ewm_preferred_unit_iso_code', $data ?? [], null);
        $this->setIfExists('ewm_quality_inspection_group', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_product', $data ?? [], null);
        $this->setIfExists('_product_ewm_storage_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 18)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['ewm_warehouse']) && (mb_strlen($this->container['ewm_warehouse']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_warehouse', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['entitled_to_dispose_party']) && (mb_strlen($this->container['entitled_to_dispose_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'entitled_to_dispose_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ewm_product_process_block_profile']) && (mb_strlen($this->container['ewm_product_process_block_profile']) > 2)) {
            $invalidProperties[] = "invalid value for 'ewm_product_process_block_profile', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ewm_process_type_control_code']) && (mb_strlen($this->container['ewm_process_type_control_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'ewm_process_type_control_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ewm_stgg_area_determination_group']) && (mb_strlen($this->container['ewm_stgg_area_determination_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_stgg_area_determination_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['ewm_ptwy_control_strategy']) && (mb_strlen($this->container['ewm_ptwy_control_strategy']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_ptwy_control_strategy', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['ewm_storage_section_method']) && (mb_strlen($this->container['ewm_storage_section_method']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_storage_section_method', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['ewm_storage_bin_type']) && (mb_strlen($this->container['ewm_storage_bin_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_storage_bin_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['ewm_bulk_storage_method']) && (mb_strlen($this->container['ewm_bulk_storage_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'ewm_bulk_storage_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ewm_stock_removal_control_strategy']) && (mb_strlen($this->container['ewm_stock_removal_control_strategy']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_stock_removal_control_strategy', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['ewm_stock_determination_group']) && (mb_strlen($this->container['ewm_stock_determination_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'ewm_stock_determination_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ewm_phys_inventory_counting_cycle']) && (mb_strlen($this->container['ewm_phys_inventory_counting_cycle']) > 1)) {
            $invalidProperties[] = "invalid value for 'ewm_phys_inventory_counting_cycle', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ewm_preferred_unit']) && (mb_strlen($this->container['ewm_preferred_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'ewm_preferred_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ewm_preferred_unit_iso_code']) && (mb_strlen($this->container['ewm_preferred_unit_iso_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'ewm_preferred_unit_iso_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ewm_quality_inspection_group']) && (mb_strlen($this->container['ewm_quality_inspection_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_quality_inspection_group', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product Number
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        if ((mb_strlen($product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 18.');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets ewm_warehouse
     *
     * @return string|null
     */
    public function getEwmWarehouse()
    {
        return $this->container['ewm_warehouse'];
    }

    /**
     * Sets ewm_warehouse
     *
     * @param string|null $ewm_warehouse Warehouse Number/Warehouse Complex
     *
     * @return self
     */
    public function setEwmWarehouse($ewm_warehouse)
    {
        if (is_null($ewm_warehouse)) {
            throw new \InvalidArgumentException('non-nullable ewm_warehouse cannot be null');
        }
        if ((mb_strlen($ewm_warehouse) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_warehouse when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 4.');
        }

        $this->container['ewm_warehouse'] = $ewm_warehouse;

        return $this;
    }

    /**
     * Gets entitled_to_dispose_party
     *
     * @return string|null
     */
    public function getEntitledToDisposeParty()
    {
        return $this->container['entitled_to_dispose_party'];
    }

    /**
     * Sets entitled_to_dispose_party
     *
     * @param string|null $entitled_to_dispose_party Business Partner Number
     *
     * @return self
     */
    public function setEntitledToDisposeParty($entitled_to_dispose_party)
    {
        if (is_null($entitled_to_dispose_party)) {
            throw new \InvalidArgumentException('non-nullable entitled_to_dispose_party cannot be null');
        }
        if ((mb_strlen($entitled_to_dispose_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $entitled_to_dispose_party when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 10.');
        }

        $this->container['entitled_to_dispose_party'] = $entitled_to_dispose_party;

        return $this;
    }

    /**
     * Gets product_internal_uuid
     *
     * @return string|null
     */
    public function getProductInternalUuid()
    {
        return $this->container['product_internal_uuid'];
    }

    /**
     * Sets product_internal_uuid
     *
     * @param string|null $product_internal_uuid Internal Number (UID) for Product
     *
     * @return self
     */
    public function setProductInternalUuid($product_internal_uuid)
    {
        if (is_null($product_internal_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'product_internal_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_internal_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_internal_uuid'] = $product_internal_uuid;

        return $this;
    }

    /**
     * Gets supply_chain_unit_uuid
     *
     * @return string|null
     */
    public function getSupplyChainUnitUuid()
    {
        return $this->container['supply_chain_unit_uuid'];
    }

    /**
     * Sets supply_chain_unit_uuid
     *
     * @param string|null $supply_chain_unit_uuid Supply Chain Unit GUID
     *
     * @return self
     */
    public function setSupplyChainUnitUuid($supply_chain_unit_uuid)
    {
        if (is_null($supply_chain_unit_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'supply_chain_unit_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supply_chain_unit_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supply_chain_unit_uuid'] = $supply_chain_unit_uuid;

        return $this;
    }

    /**
     * Gets ewm_party_entitled_to_dispose_uuid
     *
     * @return string|null
     */
    public function getEwmPartyEntitledToDisposeUuid()
    {
        return $this->container['ewm_party_entitled_to_dispose_uuid'];
    }

    /**
     * Sets ewm_party_entitled_to_dispose_uuid
     *
     * @param string|null $ewm_party_entitled_to_dispose_uuid Party Entitled to Dispose (GUID)
     *
     * @return self
     */
    public function setEwmPartyEntitledToDisposeUuid($ewm_party_entitled_to_dispose_uuid)
    {
        if (is_null($ewm_party_entitled_to_dispose_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'ewm_party_entitled_to_dispose_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ewm_party_entitled_to_dispose_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ewm_party_entitled_to_dispose_uuid'] = $ewm_party_entitled_to_dispose_uuid;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit Base Unit of Measure - No Conversion Routine
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets ewm_product_process_block_profile
     *
     * @return string|null
     */
    public function getEwmProductProcessBlockProfile()
    {
        return $this->container['ewm_product_process_block_profile'];
    }

    /**
     * Sets ewm_product_process_block_profile
     *
     * @param string|null $ewm_product_process_block_profile Process Block Profile
     *
     * @return self
     */
    public function setEwmProductProcessBlockProfile($ewm_product_process_block_profile)
    {
        if (is_null($ewm_product_process_block_profile)) {
            throw new \InvalidArgumentException('non-nullable ewm_product_process_block_profile cannot be null');
        }
        if ((mb_strlen($ewm_product_process_block_profile) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ewm_product_process_block_profile when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 2.');
        }

        $this->container['ewm_product_process_block_profile'] = $ewm_product_process_block_profile;

        return $this;
    }

    /**
     * Gets ewm_process_type_control_code
     *
     * @return string|null
     */
    public function getEwmProcessTypeControlCode()
    {
        return $this->container['ewm_process_type_control_code'];
    }

    /**
     * Sets ewm_process_type_control_code
     *
     * @param string|null $ewm_process_type_control_code Control Indicator for Process Type Determination
     *
     * @return self
     */
    public function setEwmProcessTypeControlCode($ewm_process_type_control_code)
    {
        if (is_null($ewm_process_type_control_code)) {
            throw new \InvalidArgumentException('non-nullable ewm_process_type_control_code cannot be null');
        }
        if ((mb_strlen($ewm_process_type_control_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ewm_process_type_control_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 2.');
        }

        $this->container['ewm_process_type_control_code'] = $ewm_process_type_control_code;

        return $this;
    }

    /**
     * Gets ewm_stgg_area_determination_group
     *
     * @return string|null
     */
    public function getEwmStggAreaDeterminationGroup()
    {
        return $this->container['ewm_stgg_area_determination_group'];
    }

    /**
     * Sets ewm_stgg_area_determination_group
     *
     * @param string|null $ewm_stgg_area_determination_group Staging Area and Door Determination Group
     *
     * @return self
     */
    public function setEwmStggAreaDeterminationGroup($ewm_stgg_area_determination_group)
    {
        if (is_null($ewm_stgg_area_determination_group)) {
            throw new \InvalidArgumentException('non-nullable ewm_stgg_area_determination_group cannot be null');
        }
        if ((mb_strlen($ewm_stgg_area_determination_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_stgg_area_determination_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 4.');
        }

        $this->container['ewm_stgg_area_determination_group'] = $ewm_stgg_area_determination_group;

        return $this;
    }

    /**
     * Gets required_min_shelf_life
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MinShelfLife|null
     */
    public function getRequiredMinShelfLife()
    {
        return $this->container['required_min_shelf_life'];
    }

    /**
     * Sets required_min_shelf_life
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MinShelfLife|null $required_min_shelf_life required_min_shelf_life
     *
     * @return self
     */
    public function setRequiredMinShelfLife($required_min_shelf_life)
    {
        if (is_null($required_min_shelf_life)) {
            throw new \InvalidArgumentException('non-nullable required_min_shelf_life cannot be null');
        }
        $this->container['required_min_shelf_life'] = $required_min_shelf_life;

        return $this;
    }

    /**
     * Gets ewm_ptwy_control_strategy
     *
     * @return string|null
     */
    public function getEwmPtwyControlStrategy()
    {
        return $this->container['ewm_ptwy_control_strategy'];
    }

    /**
     * Sets ewm_ptwy_control_strategy
     *
     * @param string|null $ewm_ptwy_control_strategy ewm_ptwy_control_strategy
     *
     * @return self
     */
    public function setEwmPtwyControlStrategy($ewm_ptwy_control_strategy)
    {
        if (is_null($ewm_ptwy_control_strategy)) {
            throw new \InvalidArgumentException('non-nullable ewm_ptwy_control_strategy cannot be null');
        }
        if ((mb_strlen($ewm_ptwy_control_strategy) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_ptwy_control_strategy when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 4.');
        }

        $this->container['ewm_ptwy_control_strategy'] = $ewm_ptwy_control_strategy;

        return $this;
    }

    /**
     * Gets ewm_storage_section_method
     *
     * @return string|null
     */
    public function getEwmStorageSectionMethod()
    {
        return $this->container['ewm_storage_section_method'];
    }

    /**
     * Sets ewm_storage_section_method
     *
     * @param string|null $ewm_storage_section_method Storage Section Indicator
     *
     * @return self
     */
    public function setEwmStorageSectionMethod($ewm_storage_section_method)
    {
        if (is_null($ewm_storage_section_method)) {
            throw new \InvalidArgumentException('non-nullable ewm_storage_section_method cannot be null');
        }
        if ((mb_strlen($ewm_storage_section_method) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_storage_section_method when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 4.');
        }

        $this->container['ewm_storage_section_method'] = $ewm_storage_section_method;

        return $this;
    }

    /**
     * Gets ewm_storage_bin_type
     *
     * @return string|null
     */
    public function getEwmStorageBinType()
    {
        return $this->container['ewm_storage_bin_type'];
    }

    /**
     * Sets ewm_storage_bin_type
     *
     * @param string|null $ewm_storage_bin_type ewm_storage_bin_type
     *
     * @return self
     */
    public function setEwmStorageBinType($ewm_storage_bin_type)
    {
        if (is_null($ewm_storage_bin_type)) {
            throw new \InvalidArgumentException('non-nullable ewm_storage_bin_type cannot be null');
        }
        if ((mb_strlen($ewm_storage_bin_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_storage_bin_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 4.');
        }

        $this->container['ewm_storage_bin_type'] = $ewm_storage_bin_type;

        return $this;
    }

    /**
     * Gets ewm_bulk_storage_method
     *
     * @return string|null
     */
    public function getEwmBulkStorageMethod()
    {
        return $this->container['ewm_bulk_storage_method'];
    }

    /**
     * Sets ewm_bulk_storage_method
     *
     * @param string|null $ewm_bulk_storage_method ewm_bulk_storage_method
     *
     * @return self
     */
    public function setEwmBulkStorageMethod($ewm_bulk_storage_method)
    {
        if (is_null($ewm_bulk_storage_method)) {
            throw new \InvalidArgumentException('non-nullable ewm_bulk_storage_method cannot be null');
        }
        if ((mb_strlen($ewm_bulk_storage_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ewm_bulk_storage_method when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 2.');
        }

        $this->container['ewm_bulk_storage_method'] = $ewm_bulk_storage_method;

        return $this;
    }

    /**
     * Gets ewm_stock_removal_control_strategy
     *
     * @return string|null
     */
    public function getEwmStockRemovalControlStrategy()
    {
        return $this->container['ewm_stock_removal_control_strategy'];
    }

    /**
     * Sets ewm_stock_removal_control_strategy
     *
     * @param string|null $ewm_stock_removal_control_strategy Stock Removal Control
     *
     * @return self
     */
    public function setEwmStockRemovalControlStrategy($ewm_stock_removal_control_strategy)
    {
        if (is_null($ewm_stock_removal_control_strategy)) {
            throw new \InvalidArgumentException('non-nullable ewm_stock_removal_control_strategy cannot be null');
        }
        if ((mb_strlen($ewm_stock_removal_control_strategy) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_stock_removal_control_strategy when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 4.');
        }

        $this->container['ewm_stock_removal_control_strategy'] = $ewm_stock_removal_control_strategy;

        return $this;
    }

    /**
     * Gets ewm_stock_determination_group
     *
     * @return string|null
     */
    public function getEwmStockDeterminationGroup()
    {
        return $this->container['ewm_stock_determination_group'];
    }

    /**
     * Sets ewm_stock_determination_group
     *
     * @param string|null $ewm_stock_determination_group Stock Determination Group
     *
     * @return self
     */
    public function setEwmStockDeterminationGroup($ewm_stock_determination_group)
    {
        if (is_null($ewm_stock_determination_group)) {
            throw new \InvalidArgumentException('non-nullable ewm_stock_determination_group cannot be null');
        }
        if ((mb_strlen($ewm_stock_determination_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ewm_stock_determination_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 2.');
        }

        $this->container['ewm_stock_determination_group'] = $ewm_stock_determination_group;

        return $this;
    }

    /**
     * Gets ewm_phys_inventory_counting_cycle
     *
     * @return string|null
     */
    public function getEwmPhysInventoryCountingCycle()
    {
        return $this->container['ewm_phys_inventory_counting_cycle'];
    }

    /**
     * Sets ewm_phys_inventory_counting_cycle
     *
     * @param string|null $ewm_phys_inventory_counting_cycle Cycle Counting Indicator
     *
     * @return self
     */
    public function setEwmPhysInventoryCountingCycle($ewm_phys_inventory_counting_cycle)
    {
        if (is_null($ewm_phys_inventory_counting_cycle)) {
            throw new \InvalidArgumentException('non-nullable ewm_phys_inventory_counting_cycle cannot be null');
        }
        if ((mb_strlen($ewm_phys_inventory_counting_cycle) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ewm_phys_inventory_counting_cycle when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 1.');
        }

        $this->container['ewm_phys_inventory_counting_cycle'] = $ewm_phys_inventory_counting_cycle;

        return $this;
    }

    /**
     * Gets ewm_preferred_unit
     *
     * @return string|null
     */
    public function getEwmPreferredUnit()
    {
        return $this->container['ewm_preferred_unit'];
    }

    /**
     * Sets ewm_preferred_unit
     *
     * @param string|null $ewm_preferred_unit Base Unit of Measure - No Conversion Routine
     *
     * @return self
     */
    public function setEwmPreferredUnit($ewm_preferred_unit)
    {
        if (is_null($ewm_preferred_unit)) {
            throw new \InvalidArgumentException('non-nullable ewm_preferred_unit cannot be null');
        }
        if ((mb_strlen($ewm_preferred_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $ewm_preferred_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 3.');
        }

        $this->container['ewm_preferred_unit'] = $ewm_preferred_unit;

        return $this;
    }

    /**
     * Gets ewm_preferred_unit_iso_code
     *
     * @return string|null
     */
    public function getEwmPreferredUnitIsoCode()
    {
        return $this->container['ewm_preferred_unit_iso_code'];
    }

    /**
     * Sets ewm_preferred_unit_iso_code
     *
     * @param string|null $ewm_preferred_unit_iso_code ISO Code for Unit of Measurement
     *
     * @return self
     */
    public function setEwmPreferredUnitIsoCode($ewm_preferred_unit_iso_code)
    {
        if (is_null($ewm_preferred_unit_iso_code)) {
            throw new \InvalidArgumentException('non-nullable ewm_preferred_unit_iso_code cannot be null');
        }
        if ((mb_strlen($ewm_preferred_unit_iso_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $ewm_preferred_unit_iso_code when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 3.');
        }

        $this->container['ewm_preferred_unit_iso_code'] = $ewm_preferred_unit_iso_code;

        return $this;
    }

    /**
     * Gets ewm_quality_inspection_group
     *
     * @return string|null
     */
    public function getEwmQualityInspectionGroup()
    {
        return $this->container['ewm_quality_inspection_group'];
    }

    /**
     * Sets ewm_quality_inspection_group
     *
     * @param string|null $ewm_quality_inspection_group Quality Inspection Group
     *
     * @return self
     */
    public function setEwmQualityInspectionGroup($ewm_quality_inspection_group)
    {
        if (is_null($ewm_quality_inspection_group)) {
            throw new \InvalidArgumentException('non-nullable ewm_quality_inspection_group cannot be null');
        }
        if ((mb_strlen($ewm_quality_inspection_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_quality_inspection_group when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType., must be smaller than or equal to 4.');
        }

        $this->container['ewm_quality_inspection_group'] = $ewm_quality_inspection_group;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _product
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null
     */
    public function _getProduct()
    {
    return $this->container['_product'];
    }

    /**
     * Sets _product
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|null $_product _product
     *
     * @return self
     */
    public function _setProduct($_product)
    {
        if (is_null($_product)) {
            throw new \InvalidArgumentException('non-nullable _product cannot be null');
        }
        $this->container['_product'] = $_product;

        return $this;
    }

    /**
     * Gets _product_ewm_storage_type
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType[]|null
     */
    public function _getProductEwmStorageType()
    {
    return $this->container['_product_ewm_storage_type'];
    }

    /**
     * Sets _product_ewm_storage_type
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType[]|null $_product_ewm_storage_type _product_ewm_storage_type
     *
     * @return self
     */
    public function _setProductEwmStorageType($_product_ewm_storage_type)
    {
        if (is_null($_product_ewm_storage_type)) {
            throw new \InvalidArgumentException('non-nullable _product_ewm_storage_type cannot be null');
        }
        $this->container['_product_ewm_storage_type'] = $_product_ewm_storage_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


