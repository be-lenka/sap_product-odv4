<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Model;

use \ArrayAccess;
use \BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_product_2.v0001.ProductValuation_Type-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'valuation_class' => 'string',
        'price_determination_control' => 'string',
        'standard_price' => '\BeLenka\SAP\ProductODV4\Model\StandardPrice',
        'product_price_unit_quantity' => '\BeLenka\SAP\ProductODV4\Model\PriceUnit',
        'inventory_valuation_procedure' => 'string',
        'moving_average_price' => '\BeLenka\SAP\ProductODV4\Model\MovingPrice',
        'valuation_category' => 'string',
        'product_usage_type' => 'string',
        'product_origin_type' => 'string',
        'is_produced_inhouse' => 'bool',
        'is_marked_for_deletion' => 'bool',
        'valuation_class_sales_order_stock' => 'string',
        'project_stock_valuation_class' => 'string',
        'currency' => 'string',
        'base_unit' => 'string',
        'base_iso_unit' => 'string',
        'sap__messages' => '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'valuation_class' => null,
        'price_determination_control' => null,
        'standard_price' => null,
        'product_price_unit_quantity' => null,
        'inventory_valuation_procedure' => null,
        'moving_average_price' => null,
        'valuation_category' => null,
        'product_usage_type' => null,
        'product_origin_type' => null,
        'is_produced_inhouse' => null,
        'is_marked_for_deletion' => null,
        'valuation_class_sales_order_stock' => null,
        'project_stock_valuation_class' => null,
        'currency' => null,
        'base_unit' => null,
        'base_iso_unit' => null,
        'sap__messages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'valuation_class' => false,
		'price_determination_control' => false,
		'standard_price' => false,
		'product_price_unit_quantity' => false,
		'inventory_valuation_procedure' => false,
		'moving_average_price' => false,
		'valuation_category' => false,
		'product_usage_type' => false,
		'product_origin_type' => false,
		'is_produced_inhouse' => false,
		'is_marked_for_deletion' => false,
		'valuation_class_sales_order_stock' => false,
		'project_stock_valuation_class' => false,
		'currency' => false,
		'base_unit' => false,
		'base_iso_unit' => false,
		'sap__messages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valuation_class' => 'ValuationClass',
        'price_determination_control' => 'PriceDeterminationControl',
        'standard_price' => 'StandardPrice',
        'product_price_unit_quantity' => 'ProductPriceUnitQuantity',
        'inventory_valuation_procedure' => 'InventoryValuationProcedure',
        'moving_average_price' => 'MovingAveragePrice',
        'valuation_category' => 'ValuationCategory',
        'product_usage_type' => 'ProductUsageType',
        'product_origin_type' => 'ProductOriginType',
        'is_produced_inhouse' => 'IsProducedInhouse',
        'is_marked_for_deletion' => 'IsMarkedForDeletion',
        'valuation_class_sales_order_stock' => 'ValuationClassSalesOrderStock',
        'project_stock_valuation_class' => 'ProjectStockValuationClass',
        'currency' => 'Currency',
        'base_unit' => 'BaseUnit',
        'base_iso_unit' => 'BaseISOUnit',
        'sap__messages' => 'SAP__Messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valuation_class' => 'setValuationClass',
        'price_determination_control' => 'setPriceDeterminationControl',
        'standard_price' => 'setStandardPrice',
        'product_price_unit_quantity' => 'setProductPriceUnitQuantity',
        'inventory_valuation_procedure' => 'setInventoryValuationProcedure',
        'moving_average_price' => 'setMovingAveragePrice',
        'valuation_category' => 'setValuationCategory',
        'product_usage_type' => 'setProductUsageType',
        'product_origin_type' => 'setProductOriginType',
        'is_produced_inhouse' => 'setIsProducedInhouse',
        'is_marked_for_deletion' => 'setIsMarkedForDeletion',
        'valuation_class_sales_order_stock' => 'setValuationClassSalesOrderStock',
        'project_stock_valuation_class' => 'setProjectStockValuationClass',
        'currency' => 'setCurrency',
        'base_unit' => 'setBaseUnit',
        'base_iso_unit' => 'setBaseIsoUnit',
        'sap__messages' => 'setSapMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valuation_class' => 'getValuationClass',
        'price_determination_control' => 'getPriceDeterminationControl',
        'standard_price' => 'getStandardPrice',
        'product_price_unit_quantity' => 'getProductPriceUnitQuantity',
        'inventory_valuation_procedure' => 'getInventoryValuationProcedure',
        'moving_average_price' => 'getMovingAveragePrice',
        'valuation_category' => 'getValuationCategory',
        'product_usage_type' => 'getProductUsageType',
        'product_origin_type' => 'getProductOriginType',
        'is_produced_inhouse' => 'getIsProducedInhouse',
        'is_marked_for_deletion' => 'getIsMarkedForDeletion',
        'valuation_class_sales_order_stock' => 'getValuationClassSalesOrderStock',
        'project_stock_valuation_class' => 'getProjectStockValuationClass',
        'currency' => 'getCurrency',
        'base_unit' => 'getBaseUnit',
        'base_iso_unit' => 'getBaseIsoUnit',
        'sap__messages' => 'getSapMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('valuation_class', $data ?? [], null);
        $this->setIfExists('price_determination_control', $data ?? [], null);
        $this->setIfExists('standard_price', $data ?? [], null);
        $this->setIfExists('product_price_unit_quantity', $data ?? [], null);
        $this->setIfExists('inventory_valuation_procedure', $data ?? [], null);
        $this->setIfExists('moving_average_price', $data ?? [], null);
        $this->setIfExists('valuation_category', $data ?? [], null);
        $this->setIfExists('product_usage_type', $data ?? [], null);
        $this->setIfExists('product_origin_type', $data ?? [], null);
        $this->setIfExists('is_produced_inhouse', $data ?? [], null);
        $this->setIfExists('is_marked_for_deletion', $data ?? [], null);
        $this->setIfExists('valuation_class_sales_order_stock', $data ?? [], null);
        $this->setIfExists('project_stock_valuation_class', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('base_iso_unit', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['valuation_class']) && (mb_strlen($this->container['valuation_class']) > 4)) {
            $invalidProperties[] = "invalid value for 'valuation_class', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['price_determination_control']) && (mb_strlen($this->container['price_determination_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'price_determination_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['inventory_valuation_procedure']) && (mb_strlen($this->container['inventory_valuation_procedure']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_valuation_procedure', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['valuation_category']) && (mb_strlen($this->container['valuation_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'valuation_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_usage_type']) && (mb_strlen($this->container['product_usage_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_usage_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_origin_type']) && (mb_strlen($this->container['product_origin_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_origin_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['valuation_class_sales_order_stock']) && (mb_strlen($this->container['valuation_class_sales_order_stock']) > 4)) {
            $invalidProperties[] = "invalid value for 'valuation_class_sales_order_stock', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['project_stock_valuation_class']) && (mb_strlen($this->container['project_stock_valuation_class']) > 4)) {
            $invalidProperties[] = "invalid value for 'project_stock_valuation_class', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_iso_unit']) && (mb_strlen($this->container['base_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_iso_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valuation_class
     *
     * @return string|null
     */
    public function getValuationClass()
    {
        return $this->container['valuation_class'];
    }

    /**
     * Sets valuation_class
     *
     * @param string|null $valuation_class valuation_class
     *
     * @return self
     */
    public function setValuationClass($valuation_class)
    {
        if (is_null($valuation_class)) {
            throw new \InvalidArgumentException('non-nullable valuation_class cannot be null');
        }
        if ((mb_strlen($valuation_class) > 4)) {
            throw new \InvalidArgumentException('invalid length for $valuation_class when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['valuation_class'] = $valuation_class;

        return $this;
    }

    /**
     * Gets price_determination_control
     *
     * @return string|null
     */
    public function getPriceDeterminationControl()
    {
        return $this->container['price_determination_control'];
    }

    /**
     * Sets price_determination_control
     *
     * @param string|null $price_determination_control Material Price Determination: Control
     *
     * @return self
     */
    public function setPriceDeterminationControl($price_determination_control)
    {
        if (is_null($price_determination_control)) {
            throw new \InvalidArgumentException('non-nullable price_determination_control cannot be null');
        }
        if ((mb_strlen($price_determination_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $price_determination_control when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['price_determination_control'] = $price_determination_control;

        return $this;
    }

    /**
     * Gets standard_price
     *
     * @return \BeLenka\SAP\ProductODV4\Model\StandardPrice|null
     */
    public function getStandardPrice()
    {
        return $this->container['standard_price'];
    }

    /**
     * Sets standard_price
     *
     * @param \BeLenka\SAP\ProductODV4\Model\StandardPrice|null $standard_price standard_price
     *
     * @return self
     */
    public function setStandardPrice($standard_price)
    {
        if (is_null($standard_price)) {
            throw new \InvalidArgumentException('non-nullable standard_price cannot be null');
        }
        $this->container['standard_price'] = $standard_price;

        return $this;
    }

    /**
     * Gets product_price_unit_quantity
     *
     * @return \BeLenka\SAP\ProductODV4\Model\PriceUnit|null
     */
    public function getProductPriceUnitQuantity()
    {
        return $this->container['product_price_unit_quantity'];
    }

    /**
     * Sets product_price_unit_quantity
     *
     * @param \BeLenka\SAP\ProductODV4\Model\PriceUnit|null $product_price_unit_quantity product_price_unit_quantity
     *
     * @return self
     */
    public function setProductPriceUnitQuantity($product_price_unit_quantity)
    {
        if (is_null($product_price_unit_quantity)) {
            throw new \InvalidArgumentException('non-nullable product_price_unit_quantity cannot be null');
        }
        $this->container['product_price_unit_quantity'] = $product_price_unit_quantity;

        return $this;
    }

    /**
     * Gets inventory_valuation_procedure
     *
     * @return string|null
     */
    public function getInventoryValuationProcedure()
    {
        return $this->container['inventory_valuation_procedure'];
    }

    /**
     * Sets inventory_valuation_procedure
     *
     * @param string|null $inventory_valuation_procedure inventory_valuation_procedure
     *
     * @return self
     */
    public function setInventoryValuationProcedure($inventory_valuation_procedure)
    {
        if (is_null($inventory_valuation_procedure)) {
            throw new \InvalidArgumentException('non-nullable inventory_valuation_procedure cannot be null');
        }
        if ((mb_strlen($inventory_valuation_procedure) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_valuation_procedure when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['inventory_valuation_procedure'] = $inventory_valuation_procedure;

        return $this;
    }

    /**
     * Gets moving_average_price
     *
     * @return \BeLenka\SAP\ProductODV4\Model\MovingPrice|null
     */
    public function getMovingAveragePrice()
    {
        return $this->container['moving_average_price'];
    }

    /**
     * Sets moving_average_price
     *
     * @param \BeLenka\SAP\ProductODV4\Model\MovingPrice|null $moving_average_price moving_average_price
     *
     * @return self
     */
    public function setMovingAveragePrice($moving_average_price)
    {
        if (is_null($moving_average_price)) {
            throw new \InvalidArgumentException('non-nullable moving_average_price cannot be null');
        }
        $this->container['moving_average_price'] = $moving_average_price;

        return $this;
    }

    /**
     * Gets valuation_category
     *
     * @return string|null
     */
    public function getValuationCategory()
    {
        return $this->container['valuation_category'];
    }

    /**
     * Sets valuation_category
     *
     * @param string|null $valuation_category valuation_category
     *
     * @return self
     */
    public function setValuationCategory($valuation_category)
    {
        if (is_null($valuation_category)) {
            throw new \InvalidArgumentException('non-nullable valuation_category cannot be null');
        }
        if ((mb_strlen($valuation_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $valuation_category when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['valuation_category'] = $valuation_category;

        return $this;
    }

    /**
     * Gets product_usage_type
     *
     * @return string|null
     */
    public function getProductUsageType()
    {
        return $this->container['product_usage_type'];
    }

    /**
     * Sets product_usage_type
     *
     * @param string|null $product_usage_type Usage of the Product
     *
     * @return self
     */
    public function setProductUsageType($product_usage_type)
    {
        if (is_null($product_usage_type)) {
            throw new \InvalidArgumentException('non-nullable product_usage_type cannot be null');
        }
        if ((mb_strlen($product_usage_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_usage_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_usage_type'] = $product_usage_type;

        return $this;
    }

    /**
     * Gets product_origin_type
     *
     * @return string|null
     */
    public function getProductOriginType()
    {
        return $this->container['product_origin_type'];
    }

    /**
     * Sets product_origin_type
     *
     * @param string|null $product_origin_type Origin of the Product
     *
     * @return self
     */
    public function setProductOriginType($product_origin_type)
    {
        if (is_null($product_origin_type)) {
            throw new \InvalidArgumentException('non-nullable product_origin_type cannot be null');
        }
        if ((mb_strlen($product_origin_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_origin_type when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_origin_type'] = $product_origin_type;

        return $this;
    }

    /**
     * Gets is_produced_inhouse
     *
     * @return bool|null
     */
    public function getIsProducedInhouse()
    {
        return $this->container['is_produced_inhouse'];
    }

    /**
     * Sets is_produced_inhouse
     *
     * @param bool|null $is_produced_inhouse is_produced_inhouse
     *
     * @return self
     */
    public function setIsProducedInhouse($is_produced_inhouse)
    {
        if (is_null($is_produced_inhouse)) {
            throw new \InvalidArgumentException('non-nullable is_produced_inhouse cannot be null');
        }
        $this->container['is_produced_inhouse'] = $is_produced_inhouse;

        return $this;
    }

    /**
     * Gets is_marked_for_deletion
     *
     * @return bool|null
     */
    public function getIsMarkedForDeletion()
    {
        return $this->container['is_marked_for_deletion'];
    }

    /**
     * Sets is_marked_for_deletion
     *
     * @param bool|null $is_marked_for_deletion Deletion flag for all material data of a valuation type
     *
     * @return self
     */
    public function setIsMarkedForDeletion($is_marked_for_deletion)
    {
        if (is_null($is_marked_for_deletion)) {
            throw new \InvalidArgumentException('non-nullable is_marked_for_deletion cannot be null');
        }
        $this->container['is_marked_for_deletion'] = $is_marked_for_deletion;

        return $this;
    }

    /**
     * Gets valuation_class_sales_order_stock
     *
     * @return string|null
     */
    public function getValuationClassSalesOrderStock()
    {
        return $this->container['valuation_class_sales_order_stock'];
    }

    /**
     * Sets valuation_class_sales_order_stock
     *
     * @param string|null $valuation_class_sales_order_stock Valuation Class for Sales Order Stock
     *
     * @return self
     */
    public function setValuationClassSalesOrderStock($valuation_class_sales_order_stock)
    {
        if (is_null($valuation_class_sales_order_stock)) {
            throw new \InvalidArgumentException('non-nullable valuation_class_sales_order_stock cannot be null');
        }
        if ((mb_strlen($valuation_class_sales_order_stock) > 4)) {
            throw new \InvalidArgumentException('invalid length for $valuation_class_sales_order_stock when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['valuation_class_sales_order_stock'] = $valuation_class_sales_order_stock;

        return $this;
    }

    /**
     * Gets project_stock_valuation_class
     *
     * @return string|null
     */
    public function getProjectStockValuationClass()
    {
        return $this->container['project_stock_valuation_class'];
    }

    /**
     * Sets project_stock_valuation_class
     *
     * @param string|null $project_stock_valuation_class Valuation Class for Project Stock
     *
     * @return self
     */
    public function setProjectStockValuationClass($project_stock_valuation_class)
    {
        if (is_null($project_stock_valuation_class)) {
            throw new \InvalidArgumentException('non-nullable project_stock_valuation_class cannot be null');
        }
        if ((mb_strlen($project_stock_valuation_class) > 4)) {
            throw new \InvalidArgumentException('invalid length for $project_stock_valuation_class when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['project_stock_valuation_class'] = $project_stock_valuation_class;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency Key
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets base_iso_unit
     *
     * @return string|null
     */
    public function getBaseIsoUnit()
    {
        return $this->container['base_iso_unit'];
    }

    /**
     * Sets base_iso_unit
     *
     * @param string|null $base_iso_unit Base unit of measure in ISO code
     *
     * @return self
     */
    public function setBaseIsoUnit($base_iso_unit)
    {
        if (is_null($base_iso_unit)) {
            throw new \InvalidArgumentException('non-nullable base_iso_unit cannot be null');
        }
        if ((mb_strlen($base_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_iso_unit when calling ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_iso_unit'] = $base_iso_unit;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001SAPMessageUpdate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


