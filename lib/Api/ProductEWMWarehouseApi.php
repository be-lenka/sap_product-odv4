<?php
/**
 * ProductEWMWarehouseApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\ProductODV4\ApiException;
use BeLenka\SAP\ProductODV4\Configuration;
use BeLenka\SAP\ProductODV4\HeaderSelector;
use BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ProductEWMWarehouseApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductEWMWarehouseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet' => [
            'application/json',
        ],
        'productEWMWarehouseGet' => [
            'application/json',
        ],
        'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet' => [
            'application/json',
        ],
        'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch' => [
            'application/json',
        ],
        'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet' => [
            'application/json',
        ],
        'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost' => [
            'application/json',
        ],
        'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet' => [
            'application/json',
        ],
        'productProductProductEWMWarehouseGet' => [
            'application/json',
        ],
        'productProductProductEWMWarehousePost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet
     *
     * Get related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'][0])
    {
        list($response) = $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetWithHttpInfo
     *
     * Get related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'][0])
    {
        $request = $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetAsync
     *
     * Get related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'][0])
    {
        return $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetAsyncWithHttpInfo
     *
     * Get related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
        $request = $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductEWMWarehouseApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductEWMWarehouseApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'ewm_storage_type' is set
        if ($ewm_storage_type === null || (is_array($ewm_storage_type) && count($ewm_storage_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_storage_type when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet'
            );
        }
        if (strlen($ewm_storage_type) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_storage_type" when calling ProductEWMWarehouseApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductEWMWarehouseGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductEWMStorageType/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}/{EWMStorageType}/_ProductEWMWarehouse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }
        // path params
        if ($ewm_storage_type !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMStorageType' . '}',
                ObjectSerializer::toPathValue($ewm_storage_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMWarehouseGet
     *
     * Get entities from ProductEWMWarehouse
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMWarehouseGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseGet'][0])
    {
        list($response) = $this->productEWMWarehouseGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productEWMWarehouseGetWithHttpInfo
     *
     * Get entities from ProductEWMWarehouse
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMWarehouseGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseGet'][0])
    {
        $request = $this->productEWMWarehouseGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMWarehouseGetAsync
     *
     * Get entities from ProductEWMWarehouse
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseGet'][0])
    {
        return $this->productEWMWarehouseGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMWarehouseGetAsyncWithHttpInfo
     *
     * Get entities from ProductEWMWarehouse
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType';
        $request = $this->productEWMWarehouseGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMWarehouseGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMWarehouseGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductEWMWarehouseApi.productEWMWarehouseGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductEWMWarehouseApi.productEWMWarehouseGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/ProductEWMWarehouse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet
     *
     * Get entity from ProductEWMWarehouse by key
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'][0])
    {
        list($response) = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetWithHttpInfo
     *
     * Get entity from ProductEWMWarehouse by key
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'][0])
    {
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetAsync
     *
     * Get entity from ProductEWMWarehouse by key
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'][0])
    {
        return $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetAsyncWithHttpInfo
     *
     * Get entity from ProductEWMWarehouse by key
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductEWMWarehouse/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch
     *
     * Update entity in ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'][0])
    {
        $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, $contentType);
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchWithHttpInfo
     *
     * Update entity in ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'][0])
    {
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchAsync
     *
     * Update entity in ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'][0])
    {
        return $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchAsyncWithHttpInfo
     *
     * Update entity in ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'][0])
    {
        $returnType = '';
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatchRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyPatch'
            );
        }


        $resourcePath = '/ProductEWMWarehouse/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet
     *
     * Get entities from related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet($product, $ewm_warehouse, $entitled_to_dispose_party, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'][0])
    {
        list($response) = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetWithHttpInfo
     *
     * Get entities from related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'][0])
    {
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetAsync
     *
     * Get entities from related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'][0])
    {
        return $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMStorageTypeType';
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypeGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/ProductEWMWarehouse/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}/_ProductEWMStorageType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost
     *
     * Add new entity to related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'][0])
    {
        list($response) = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostWithHttpInfo
     *
     * Add new entity to related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'][0])
    {
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostAsync
     *
     * Add new entity to related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'][0])
    {
        return $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductEWMStorageType
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeType';
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMStorageTypeTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePostRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductEWMStorageTypePost'
            );
        }


        $resourcePath = '/ProductEWMWarehouse/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}/_ProductEWMStorageType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_storage_type_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        list($response) = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        return $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductEWMWarehouseApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductEWMWarehouse/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductEWMWarehouseGet
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductEWMWarehouseGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        list($response) = $this->productProductProductEWMWarehouseGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductEWMWarehouseGetWithHttpInfo
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductEWMWarehouseGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        $request = $this->productProductProductEWMWarehouseGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductEWMWarehouseGetAsync
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehouseGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        return $this->productProductProductEWMWarehouseGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductEWMWarehouseGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehouseGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType';
        $request = $this->productProductProductEWMWarehouseGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductEWMWarehouseGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductEWMWarehouseGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductEWMWarehouseGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productProductProductEWMWarehouseGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductEWMWarehouseApi.productProductProductEWMWarehouseGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductEWMWarehouseApi.productProductProductEWMWarehouseGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductEWMWarehouse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductEWMWarehousePost
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductEWMWarehousePost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        list($response) = $this->productProductProductEWMWarehousePostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductEWMWarehousePostWithHttpInfo
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductEWMWarehousePostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        $request = $this->productProductProductEWMWarehousePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductEWMWarehousePostAsync
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehousePostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        return $this->productProductProductEWMWarehousePostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductEWMWarehousePostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehousePostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
        $request = $this->productProductProductEWMWarehousePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductEWMWarehousePost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductEWMWarehousePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductEWMWarehousePost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductEWMWarehouseApi.productProductProductEWMWarehousePost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create when calling productProductProductEWMWarehousePost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductEWMWarehouse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
