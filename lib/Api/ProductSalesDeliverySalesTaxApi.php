<?php
/**
 * ProductSalesDeliverySalesTaxApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\ProductODV4\ApiException;
use BeLenka\SAP\ProductODV4\Configuration;
use BeLenka\SAP\ProductODV4\HeaderSelector;
use BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ProductSalesDeliverySalesTaxApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductSalesDeliverySalesTaxApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'prodSalesDeliverySalesTaxGet' => [
            'application/json',
        ],
        'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet' => [
            'application/json',
        ],
        'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch' => [
            'application/json',
        ],
        'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet' => [
            'application/json',
        ],
        'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet' => [
            'application/json',
        ],
        'productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet' => [
            'application/json',
        ],
        'productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation prodSalesDeliverySalesTaxGet
     *
     * Get entities from ProdSalesDeliverySalesTax
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function prodSalesDeliverySalesTaxGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxGet'][0])
    {
        list($response) = $this->prodSalesDeliverySalesTaxGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation prodSalesDeliverySalesTaxGetWithHttpInfo
     *
     * Get entities from ProdSalesDeliverySalesTax
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function prodSalesDeliverySalesTaxGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxGet'][0])
    {
        $request = $this->prodSalesDeliverySalesTaxGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation prodSalesDeliverySalesTaxGetAsync
     *
     * Get entities from ProdSalesDeliverySalesTax
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxGet'][0])
    {
        return $this->prodSalesDeliverySalesTaxGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prodSalesDeliverySalesTaxGetAsyncWithHttpInfo
     *
     * Get entities from ProdSalesDeliverySalesTax
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType';
        $request = $this->prodSalesDeliverySalesTaxGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prodSalesDeliverySalesTaxGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prodSalesDeliverySalesTaxGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/ProdSalesDeliverySalesTax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet
     *
     * Get entity from ProdSalesDeliverySalesTax by key
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'][0])
    {
        list($response) = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetWithHttpInfo
     *
     * Get entity from ProdSalesDeliverySalesTax by key
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'][0])
    {
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetAsync
     *
     * Get entity from ProdSalesDeliverySalesTax by key
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetAsync($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'][0])
    {
        return $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetAsyncWithHttpInfo
     *
     * Get entity from ProdSalesDeliverySalesTax by key
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType';
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'
            );
        }
        if (strlen($country) > 3) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'product_sales_tax_category' is set
        if ($product_sales_tax_category === null || (is_array($product_sales_tax_category) && count($product_sales_tax_category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_tax_category when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'
            );
        }
        if (strlen($product_sales_tax_category) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_tax_category" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProdSalesDeliverySalesTax/{Product}/{Country}/{ProductSalesTaxCategory}/{ProductSalesOrg}/{ProductDistributionChnl}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($country !== null) {
            $resourcePath = str_replace(
                '{' . 'Country' . '}',
                ObjectSerializer::toPathValue($country),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_tax_category !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesTaxCategory' . '}',
                ObjectSerializer::toPathValue($product_sales_tax_category),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch
     *
     * Update entity in ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'][0])
    {
        $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, $contentType);
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchWithHttpInfo
     *
     * Update entity in ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'][0])
    {
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchAsync
     *
     * Update entity in ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchAsync($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'][0])
    {
        return $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchAsyncWithHttpInfo
     *
     * Update entity in ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'][0])
    {
        $returnType = '';
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatchRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'
            );
        }
        if (strlen($country) > 3) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'product_sales_tax_category' is set
        if ($product_sales_tax_category === null || (is_array($product_sales_tax_category) && count($product_sales_tax_category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_tax_category when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'
            );
        }
        if (strlen($product_sales_tax_category) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_tax_category" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlPatch'
            );
        }


        $resourcePath = '/ProdSalesDeliverySalesTax/{Product}/{Country}/{ProductSalesTaxCategory}/{ProductSalesOrg}/{ProductDistributionChnl}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($country !== null) {
            $resourcePath = str_replace(
                '{' . 'Country' . '}',
                ObjectSerializer::toPathValue($country),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_tax_category !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesTaxCategory' . '}',
                ObjectSerializer::toPathValue($product_sales_tax_category),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        list($response) = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsync($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        return $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($country) > 3) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'product_sales_tax_category' is set
        if ($product_sales_tax_category === null || (is_array($product_sales_tax_category) && count($product_sales_tax_category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_tax_category when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_sales_tax_category) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_tax_category" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProdSalesDeliverySalesTax/{Product}/{Country}/{ProductSalesTaxCategory}/{ProductSalesOrg}/{ProductDistributionChnl}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($country !== null) {
            $resourcePath = str_replace(
                '{' . 'Country' . '}',
                ObjectSerializer::toPathValue($country),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_tax_category !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesTaxCategory' . '}',
                ObjectSerializer::toPathValue($product_sales_tax_category),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet
     *
     * Get related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'][0])
    {
        list($response) = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetWithHttpInfo
     *
     * Get related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'][0])
    {
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetAsync
     *
     * Get related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetAsync($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'][0])
    {
        return $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetAsyncWithHttpInfo
     *
     * Get related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType';
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'
            );
        }
        if (strlen($country) > 3) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'product_sales_tax_category' is set
        if ($product_sales_tax_category === null || (is_array($product_sales_tax_category) && count($product_sales_tax_category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_tax_category when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'
            );
        }
        if (strlen($product_sales_tax_category) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_tax_category" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductSalesDeliverySalesTaxApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductSalesDeliveryGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProdSalesDeliverySalesTax/{Product}/{Country}/{ProductSalesTaxCategory}/{ProductSalesOrg}/{ProductDistributionChnl}/_ProductSalesDelivery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($country !== null) {
            $resourcePath = str_replace(
                '{' . 'Country' . '}',
                ObjectSerializer::toPathValue($country),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_tax_category !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesTaxCategory' . '}',
                ObjectSerializer::toPathValue($product_sales_tax_category),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet
     *
     * Get entities from related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet($product, $product_sales_org, $product_distribution_chnl, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'][0])
    {
        list($response) = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetWithHttpInfo
     *
     * Get entities from related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'][0])
    {
        $request = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetRequest($product, $product_sales_org, $product_distribution_chnl, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetAsync
     *
     * Get entities from related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetAsync($product, $product_sales_org, $product_distribution_chnl, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'][0])
    {
        return $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetAsyncWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetAsyncWithHttpInfo
     *
     * Get entities from related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetAsyncWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProdSalesDeliverySalesTaxType';
        $request = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetRequest($product, $product_sales_org, $product_distribution_chnl, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGetRequest($product, $product_sales_org, $product_distribution_chnl, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet, must be smaller than or equal to 2.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/ProductSalesDelivery/{Product}/{ProductSalesOrg}/{ProductDistributionChnl}/_ProdSalesDeliverySalesTax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost
     *
     * Add new entity to related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'][0])
    {
        list($response) = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostWithHttpInfo
     *
     * Add new entity to related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'][0])
    {
        $request = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostRequest($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostAsync
     *
     * Add new entity to related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostAsync($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'][0])
    {
        return $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostAsyncWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProdSalesDeliverySalesTax
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostAsyncWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxType';
        $request = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostRequest($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProdSalesDeliverySalesTaxTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPostRequest($product, $product_sales_org, $product_distribution_chnl, $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductSalesDeliverySalesTaxApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProdSalesDeliverySalesTaxPost'
            );
        }


        $resourcePath = '/ProductSalesDelivery/{Product}/{ProductSalesOrg}/{ProductDistributionChnl}/_ProdSalesDeliverySalesTax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_prod_sales_delivery_sales_tax_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
