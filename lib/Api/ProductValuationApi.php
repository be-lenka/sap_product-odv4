<?php
/**
 * ProductValuationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\ProductODV4\ApiException;
use BeLenka\SAP\ProductODV4\Configuration;
use BeLenka\SAP\ProductODV4\HeaderSelector;
use BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ProductValuationApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductValuationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'productProductProductValuationGet' => [
            'application/json',
        ],
        'productProductProductValuationPost' => [
            'application/json',
        ],
        'productValuationAccountingProductValuationAreaValuationTypeProductValuationGet' => [
            'application/json',
        ],
        'productValuationCostingProductValuationAreaValuationTypeProductValuationGet' => [
            'application/json',
        ],
        'productValuationGet' => [
            'application/json',
        ],
        'productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet' => [
            'application/json',
        ],
        'productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypePatch' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductValuationAccountingGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductValuationCostingGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productProductProductValuationGet
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductValuationGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        list($response) = $this->productProductProductValuationGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductValuationGetWithHttpInfo
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductValuationGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        $request = $this->productProductProductValuationGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductValuationGetAsync
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        return $this->productProductProductValuationGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductValuationGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType';
        $request = $this->productProductProductValuationGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductValuationGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductValuationGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductValuationGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productProductProductValuationGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductValuationApi.productProductProductValuationGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductValuationApi.productProductProductValuationGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductValuationPost
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductValuationPost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        list($response) = $this->productProductProductValuationPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductValuationPostWithHttpInfo
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductValuationPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        $request = $this->productProductProductValuationPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductValuationPostAsync
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationPostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        return $this->productProductProductValuationPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductValuationPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
        $request = $this->productProductProductValuationPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductValuationPost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductValuationPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductValuationPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productProductProductValuationPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create when calling productProductProductValuationPost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductValuationGet
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductValuationGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        list($response) = $this->productValuationAccountingProductValuationAreaValuationTypeProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductValuationGetWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        $request = $this->productValuationAccountingProductValuationAreaValuationTypeProductValuationGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductValuationGetAsync
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductValuationGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        return $this->productValuationAccountingProductValuationAreaValuationTypeProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductValuationGetAsyncWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
        $request = $this->productValuationAccountingProductValuationAreaValuationTypeProductValuationGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductValuationGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationAccountingProductValuationAreaValuationTypeProductValuationGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationAccountingProductValuationAreaValuationTypeProductValuationGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationAccountingProductValuationAreaValuationTypeProductValuationGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationAccountingProductValuationAreaValuationTypeProductValuationGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuationAccounting/{Product}/{ValuationArea}/{ValuationType}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductValuationGet
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductValuationGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        list($response) = $this->productValuationCostingProductValuationAreaValuationTypeProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductValuationGetWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        $request = $this->productValuationCostingProductValuationAreaValuationTypeProductValuationGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductValuationGetAsync
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductValuationGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        return $this->productValuationCostingProductValuationAreaValuationTypeProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductValuationGetAsyncWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
        $request = $this->productValuationCostingProductValuationAreaValuationTypeProductValuationGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationCostingProductValuationAreaValuationTypeProductValuationGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductValuationGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductValuationGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationCostingProductValuationAreaValuationTypeProductValuationGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationCostingProductValuationAreaValuationTypeProductValuationGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationCostingProductValuationAreaValuationTypeProductValuationGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationCostingProductValuationAreaValuationTypeProductValuationGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationCostingProductValuationAreaValuationTypeProductValuationGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationCostingProductValuationAreaValuationTypeProductValuationGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuationCosting/{Product}/{ValuationArea}/{ValuationType}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationGet
     *
     * Get entities from ProductValuation
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationGet'][0])
    {
        list($response) = $this->productValuationGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationGetWithHttpInfo
     *
     * Get entities from ProductValuation
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationGet'][0])
    {
        $request = $this->productValuationGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationGetAsync
     *
     * Get entities from ProductValuation
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationGet'][0])
    {
        return $this->productValuationGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationGetAsyncWithHttpInfo
     *
     * Get entities from ProductValuation
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType';
        $request = $this->productValuationGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductValuationApi.productValuationGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductValuationApi.productValuationGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        list($response) = $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        $request = $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsync
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsync($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        return $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsyncWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
        $request = $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'currency_role' is set
        if ($currency_role === null || (is_array($currency_role) && count($currency_role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_role when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($currency_role) > 2) {
            throw new \InvalidArgumentException('invalid length for "$currency_role" when calling ProductValuationApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'ledger' is set
        if ($ledger === null || (is_array($ledger) && count($ledger) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ledger when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($ledger) > 2) {
            throw new \InvalidArgumentException('invalid length for "$ledger" when calling ProductValuationApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProductValuationLedgerAccount/{Product}/{ValuationArea}/{ValuationType}/{CurrencyRole}/{Ledger}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }
        // path params
        if ($currency_role !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyRole' . '}',
                ObjectSerializer::toPathValue($currency_role),
                $resourcePath
            );
        }
        // path params
        if ($ledger !== null) {
            $resourcePath = str_replace(
                '{' . 'Ledger' . '}',
                ObjectSerializer::toPathValue($ledger),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        list($response) = $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        $request = $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsync
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsync($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        return $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsyncWithHttpInfo
     *
     * Get related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
        $request = $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'currency_role' is set
        if ($currency_role === null || (is_array($currency_role) && count($currency_role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_role when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($currency_role) > 2) {
            throw new \InvalidArgumentException('invalid length for "$currency_role" when calling ProductValuationApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'ledger' is set
        if ($ledger === null || (is_array($ledger) && count($ledger) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ledger when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet'
            );
        }
        if (strlen($ledger) > 2) {
            throw new \InvalidArgumentException('invalid length for "$ledger" when calling ProductValuationApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductValuationGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProductValuationLedgerPrices/{Product}/{ValuationArea}/{ValuationType}/{CurrencyRole}/{Ledger}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }
        // path params
        if ($currency_role !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyRole' . '}',
                ObjectSerializer::toPathValue($currency_role),
                $resourcePath
            );
        }
        // path params
        if ($ledger !== null) {
            $resourcePath = str_replace(
                '{' . 'Ledger' . '}',
                ObjectSerializer::toPathValue($ledger),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeGet
     *
     * Get entity from ProductValuation by key
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeGet'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeGetWithHttpInfo
     *
     * Get entity from ProductValuation by key
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeGet'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeGetAsync
     *
     * Get entity from ProductValuation by key
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeGet'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeGetAsyncWithHttpInfo
     *
     * Get entity from ProductValuation by key
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
        $request = $this->productValuationProductValuationAreaValuationTypeGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypePatch
     *
     * Update entity in ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypePatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productValuationProductValuationAreaValuationTypePatch($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypePatch'][0])
    {
        $this->productValuationProductValuationAreaValuationTypePatchWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, $contentType);
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypePatchWithHttpInfo
     *
     * Update entity in ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypePatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypePatchWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypePatch'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypePatchRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypePatchAsync
     *
     * Update entity in ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypePatchAsync($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypePatch'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypePatchAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypePatchAsyncWithHttpInfo
     *
     * Update entity in ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypePatchAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypePatch'][0])
    {
        $returnType = '';
        $request = $this->productValuationProductValuationAreaValuationTypePatchRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypePatch'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypePatchRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypePatch'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypePatch'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypePatch, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypePatch'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypePatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypePatch'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypePatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update when calling productValuationProductValuationAreaValuationTypePatch'
            );
        }


        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationAccountingGet
     *
     * Get related _ProductValuationAccounting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationAccountingGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductValuationAccountingGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationAccountingGetWithHttpInfo
     *
     * Get related _ProductValuationAccounting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationAccountingGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationAccountingGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationAccountingGetAsync
     *
     * Get related _ProductValuationAccounting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationAccountingGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductValuationAccountingGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationAccountingGetAsyncWithHttpInfo
     *
     * Get related _ProductValuationAccounting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationAccountingGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationAccountingType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationAccountingGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationAccountingGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationAccountingGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationAccountingGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductValuationAccountingGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationAccountingGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_ProductValuationAccounting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationCostingGet
     *
     * Get related _ProductValuationCosting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationCostingGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductValuationCostingGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationCostingGetWithHttpInfo
     *
     * Get related _ProductValuationCosting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationCostingGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationCostingGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationCostingGetAsync
     *
     * Get related _ProductValuationCosting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationCostingGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductValuationCostingGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationCostingGetAsyncWithHttpInfo
     *
     * Get related _ProductValuationCosting
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationCostingGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationCostingType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationCostingGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductValuationCostingGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationCostingGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationCostingGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductValuationCostingGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationCostingGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductValuationCostingGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationCostingGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductValuationCostingGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationCostingGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_ProductValuationCosting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet
     *
     * Get entities from related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetWithHttpInfo($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetWithHttpInfo
     *
     * Get entities from related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetWithHttpInfo($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetRequest($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetAsync
     *
     * Get entities from related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetAsync($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerAccountType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetRequest($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGetRequest($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_ProductValuationLedgerAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost
     *
     * Add new entity to related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostWithHttpInfo
     *
     * Add new entity to related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostAsync
     *
     * Add new entity to related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostAsync($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductValuationLedgerAccount
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerAccountTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPostRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerAccountPost'
            );
        }


        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_ProductValuationLedgerAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_account_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet
     *
     * Get entities from related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetWithHttpInfo($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetWithHttpInfo
     *
     * Get entities from related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetWithHttpInfo($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetRequest($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetAsync
     *
     * Get entities from related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetAsync($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationLedgerPricesType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetRequest($product, $valuation_area, $valuation_type, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGetRequest($product, $valuation_area, $valuation_type, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_ProductValuationLedgerPrices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost
     *
     * Add new entity to related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostWithHttpInfo
     *
     * Add new entity to related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostAsync
     *
     * Add new entity to related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostAsync($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductValuationLedgerPrices
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationLedgerPricesTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPostRequest($product, $valuation_area, $valuation_type, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductValuationApi.productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create when calling productValuationProductValuationAreaValuationTypeProductValuationLedgerPricesPost'
            );
        }


        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_ProductValuationLedgerPrices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_ledger_prices_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
