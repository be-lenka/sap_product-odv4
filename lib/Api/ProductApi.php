<?php
/**
 * ProductApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\ProductODV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\ProductODV4\ApiException;
use BeLenka\SAP\ProductODV4\Configuration;
use BeLenka\SAP\ProductODV4\HeaderSelector;
use BeLenka\SAP\ProductODV4\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet' => [
            'application/json',
        ],
        'productChangeMasterProductChangeNumberProductGet' => [
            'application/json',
        ],
        'productDescriptionProductLanguageProductGet' => [
            'application/json',
        ],
        'productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet' => [
            'application/json',
        ],
        'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet' => [
            'application/json',
        ],
        'productGet' => [
            'application/json',
        ],
        'productPlantCostingProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantForecastProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantInternationalTradeProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantMRPProductMRPAreaPlantProductGet' => [
            'application/json',
        ],
        'productPlantPlanningProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantProcurementProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantPurchaseTaxProductPlantDepartureCountryProductGet' => [
            'application/json',
        ],
        'productPlantQualityManagementProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantSalesProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantStorageLocationProductPlantStorageLocationProductGet' => [
            'application/json',
        ],
        'productPlantStorageProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantSupplyPlanningProductPlantProductGet' => [
            'application/json',
        ],
        'productPlantWorkSchedulingProductPlantProductGet' => [
            'application/json',
        ],
        'productPost' => [
            'application/json',
        ],
        'productProcurementProductProductGet' => [
            'application/json',
        ],
        'productProductGet' => [
            'application/json',
        ],
        'productProductPatch' => [
            'application/json',
        ],
        'productProductProductChangeMasterGet' => [
            'application/json',
        ],
        'productProductProductChangeMasterPost' => [
            'application/json',
        ],
        'productProductProductDescriptionGet' => [
            'application/json',
        ],
        'productProductProductDescriptionPost' => [
            'application/json',
        ],
        'productProductProductEWMWarehouseGet' => [
            'application/json',
        ],
        'productProductProductEWMWarehousePost' => [
            'application/json',
        ],
        'productProductProductPlantGet' => [
            'application/json',
        ],
        'productProductProductPlantPost' => [
            'application/json',
        ],
        'productProductProductProcurementGet' => [
            'application/json',
        ],
        'productProductProductQualityManagementGet' => [
            'application/json',
        ],
        'productProductProductSalesDeliveryGet' => [
            'application/json',
        ],
        'productProductProductSalesDeliveryPost' => [
            'application/json',
        ],
        'productProductProductSalesGet' => [
            'application/json',
        ],
        'productProductProductStorageGet' => [
            'application/json',
        ],
        'productProductProductUnitOfMeasureGet' => [
            'application/json',
        ],
        'productProductProductUnitOfMeasurePost' => [
            'application/json',
        ],
        'productProductProductValuationGet' => [
            'application/json',
        ],
        'productProductProductValuationPost' => [
            'application/json',
        ],
        'productQualityManagementProductProductGet' => [
            'application/json',
        ],
        'productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet' => [
            'application/json',
        ],
        'productSalesProductProductGet' => [
            'application/json',
        ],
        'productStorageProductProductGet' => [
            'application/json',
        ],
        'productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet' => [
            'application/json',
        ],
        'productUnitOfMeasureProductAlternativeUnitProductGet' => [
            'application/json',
        ],
        'productValuationAccountingProductValuationAreaValuationTypeProductGet' => [
            'application/json',
        ],
        'productValuationCostingProductValuationAreaValuationTypeProductGet' => [
            'application/json',
        ],
        'productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet' => [
            'application/json',
        ],
        'productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet' => [
            'application/json',
        ],
        'productValuationProductValuationAreaValuationTypeProductGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        list($response) = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsync($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        return $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $country Departure Country/Region (from which the goods are sent) (required)
     * @param  string $product_sales_tax_category Tax Condition Type (Sales Tax, Value-Added Tax,...) (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGetRequest($product, $country, $product_sales_tax_category, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($country) > 3) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling ProductApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'product_sales_tax_category' is set
        if ($product_sales_tax_category === null || (is_array($product_sales_tax_category) && count($product_sales_tax_category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_tax_category when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_sales_tax_category) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_tax_category" when calling ProductApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductApi.prodSalesDeliverySalesTaxProductCountryProductSalesTaxCategoryProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProdSalesDeliverySalesTax/{Product}/{Country}/{ProductSalesTaxCategory}/{ProductSalesOrg}/{ProductDistributionChnl}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($country !== null) {
            $resourcePath = str_replace(
                '{' . 'Country' . '}',
                ObjectSerializer::toPathValue($country),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_tax_category !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesTaxCategory' . '}',
                ObjectSerializer::toPathValue($product_sales_tax_category),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productChangeMasterProductChangeNumberProductGet
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $change_number Change Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productChangeMasterProductChangeNumberProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productChangeMasterProductChangeNumberProductGet($product, $change_number, $select = null, $expand = null, string $contentType = self::contentTypes['productChangeMasterProductChangeNumberProductGet'][0])
    {
        list($response) = $this->productChangeMasterProductChangeNumberProductGetWithHttpInfo($product, $change_number, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productChangeMasterProductChangeNumberProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $change_number Change Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productChangeMasterProductChangeNumberProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productChangeMasterProductChangeNumberProductGetWithHttpInfo($product, $change_number, $select = null, $expand = null, string $contentType = self::contentTypes['productChangeMasterProductChangeNumberProductGet'][0])
    {
        $request = $this->productChangeMasterProductChangeNumberProductGetRequest($product, $change_number, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productChangeMasterProductChangeNumberProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $change_number Change Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productChangeMasterProductChangeNumberProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productChangeMasterProductChangeNumberProductGetAsync($product, $change_number, $select = null, $expand = null, string $contentType = self::contentTypes['productChangeMasterProductChangeNumberProductGet'][0])
    {
        return $this->productChangeMasterProductChangeNumberProductGetAsyncWithHttpInfo($product, $change_number, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productChangeMasterProductChangeNumberProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $change_number Change Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productChangeMasterProductChangeNumberProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productChangeMasterProductChangeNumberProductGetAsyncWithHttpInfo($product, $change_number, $select = null, $expand = null, string $contentType = self::contentTypes['productChangeMasterProductChangeNumberProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productChangeMasterProductChangeNumberProductGetRequest($product, $change_number, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productChangeMasterProductChangeNumberProductGet'
     *
     * @param  string $product Material Number (required)
     * @param  string $change_number Change Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productChangeMasterProductChangeNumberProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productChangeMasterProductChangeNumberProductGetRequest($product, $change_number, $select = null, $expand = null, string $contentType = self::contentTypes['productChangeMasterProductChangeNumberProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productChangeMasterProductChangeNumberProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productChangeMasterProductChangeNumberProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'change_number' is set
        if ($change_number === null || (is_array($change_number) && count($change_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_number when calling productChangeMasterProductChangeNumberProductGet'
            );
        }
        if (strlen($change_number) > 12) {
            throw new \InvalidArgumentException('invalid length for "$change_number" when calling ProductApi.productChangeMasterProductChangeNumberProductGet, must be smaller than or equal to 12.');
        }
        
        
        

        $resourcePath = '/ProductChangeMaster/{Product}/{ChangeNumber}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($change_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ChangeNumber' . '}',
                ObjectSerializer::toPathValue($change_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productDescriptionProductLanguageProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDescriptionProductLanguageProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productDescriptionProductLanguageProductGet($product, $language, $select = null, $expand = null, string $contentType = self::contentTypes['productDescriptionProductLanguageProductGet'][0])
    {
        list($response) = $this->productDescriptionProductLanguageProductGetWithHttpInfo($product, $language, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productDescriptionProductLanguageProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDescriptionProductLanguageProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productDescriptionProductLanguageProductGetWithHttpInfo($product, $language, $select = null, $expand = null, string $contentType = self::contentTypes['productDescriptionProductLanguageProductGet'][0])
    {
        $request = $this->productDescriptionProductLanguageProductGetRequest($product, $language, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productDescriptionProductLanguageProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDescriptionProductLanguageProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDescriptionProductLanguageProductGetAsync($product, $language, $select = null, $expand = null, string $contentType = self::contentTypes['productDescriptionProductLanguageProductGet'][0])
    {
        return $this->productDescriptionProductLanguageProductGetAsyncWithHttpInfo($product, $language, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productDescriptionProductLanguageProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDescriptionProductLanguageProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDescriptionProductLanguageProductGetAsyncWithHttpInfo($product, $language, $select = null, $expand = null, string $contentType = self::contentTypes['productDescriptionProductLanguageProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productDescriptionProductLanguageProductGetRequest($product, $language, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productDescriptionProductLanguageProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDescriptionProductLanguageProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productDescriptionProductLanguageProductGetRequest($product, $language, $select = null, $expand = null, string $contentType = self::contentTypes['productDescriptionProductLanguageProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productDescriptionProductLanguageProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productDescriptionProductLanguageProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling productDescriptionProductLanguageProductGet'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ProductApi.productDescriptionProductLanguageProductGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProductDescription/{Product}/{Language}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'][0])
    {
        list($response) = $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'][0])
    {
        $request = $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'][0])
    {
        return $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string $ewm_storage_type Storage Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $ewm_storage_type, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'ewm_storage_type' is set
        if ($ewm_storage_type === null || (is_array($ewm_storage_type) && count($ewm_storage_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_storage_type when calling productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet'
            );
        }
        if (strlen($ewm_storage_type) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_storage_type" when calling ProductApi.productEWMStorageTypeProductEWMWarehouseEntitledToDisposePartyEWMStorageTypeProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductEWMStorageType/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}/{EWMStorageType}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }
        // path params
        if ($ewm_storage_type !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMStorageType' . '}',
                ObjectSerializer::toPathValue($ewm_storage_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        list($response) = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsync($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        return $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetAsyncWithHttpInfo($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $ewm_warehouse Warehouse Number/Warehouse Complex (required)
     * @param  string $entitled_to_dispose_party Business Partner Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGetRequest($product, $ewm_warehouse, $entitled_to_dispose_party, $select = null, $expand = null, string $contentType = self::contentTypes['productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'ewm_warehouse' is set
        if ($ewm_warehouse === null || (is_array($ewm_warehouse) && count($ewm_warehouse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ewm_warehouse when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
            );
        }
        if (strlen($ewm_warehouse) > 4) {
            throw new \InvalidArgumentException('invalid length for "$ewm_warehouse" when calling ProductApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'entitled_to_dispose_party' is set
        if ($entitled_to_dispose_party === null || (is_array($entitled_to_dispose_party) && count($entitled_to_dispose_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entitled_to_dispose_party when calling productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet'
            );
        }
        if (strlen($entitled_to_dispose_party) > 10) {
            throw new \InvalidArgumentException('invalid length for "$entitled_to_dispose_party" when calling ProductApi.productEWMWarehouseProductEWMWarehouseEntitledToDisposePartyProductGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductEWMWarehouse/{Product}/{EWMWarehouse}/{EntitledToDisposeParty}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($ewm_warehouse !== null) {
            $resourcePath = str_replace(
                '{' . 'EWMWarehouse' . '}',
                ObjectSerializer::toPathValue($ewm_warehouse),
                $resourcePath
            );
        }
        // path params
        if ($entitled_to_dispose_party !== null) {
            $resourcePath = str_replace(
                '{' . 'EntitledToDisposeParty' . '}',
                ObjectSerializer::toPathValue($entitled_to_dispose_party),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGet
     *
     * Get entities from Product
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productGet'][0])
    {
        list($response) = $this->productGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productGetWithHttpInfo
     *
     * Get entities from Product
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productGet'][0])
    {
        $request = $this->productGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productGetAsync
     *
     * Get entities from Product
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productGet'][0])
    {
        return $this->productGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetAsyncWithHttpInfo
     *
     * Get entities from Product
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductType';
        $request = $this->productGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantCostingProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantCostingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantCostingProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantCostingProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantCostingProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantCostingProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantCostingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantCostingProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantCostingProductPlantProductGet'][0])
    {
        $request = $this->productPlantCostingProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantCostingProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantCostingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantCostingProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantCostingProductPlantProductGet'][0])
    {
        return $this->productPlantCostingProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantCostingProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantCostingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantCostingProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantCostingProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantCostingProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantCostingProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantCostingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantCostingProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantCostingProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantCostingProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantCostingProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantCostingProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantCostingProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantCosting/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantForecastProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantForecastProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantForecastProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantForecastProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantForecastProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantForecastProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantForecastProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantForecastProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantForecastProductPlantProductGet'][0])
    {
        $request = $this->productPlantForecastProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantForecastProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantForecastProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantForecastProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantForecastProductPlantProductGet'][0])
    {
        return $this->productPlantForecastProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantForecastProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantForecastProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantForecastProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantForecastProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantForecastProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantForecastProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantForecastProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantForecastProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantForecastProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantForecastProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantForecastProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantForecastProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantForecastProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantForecast/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $inspection_lot_type Inspection Type (required)
     * @param  string $product Material Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet($inspection_lot_type, $product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetWithHttpInfo($inspection_lot_type, $product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $inspection_lot_type Inspection Type (required)
     * @param  string $product Material Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetWithHttpInfo($inspection_lot_type, $product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'][0])
    {
        $request = $this->productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetRequest($inspection_lot_type, $product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $inspection_lot_type Inspection Type (required)
     * @param  string $product Material Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetAsync($inspection_lot_type, $product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'][0])
    {
        return $this->productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetAsyncWithHttpInfo($inspection_lot_type, $product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $inspection_lot_type Inspection Type (required)
     * @param  string $product Material Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetAsyncWithHttpInfo($inspection_lot_type, $product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetRequest($inspection_lot_type, $product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'
     *
     * @param  string $inspection_lot_type Inspection Type (required)
     * @param  string $product Material Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantInspTypeSettingInspectionLotTypeProductPlantProductGetRequest($inspection_lot_type, $product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'][0])
    {

        // verify the required parameter 'inspection_lot_type' is set
        if ($inspection_lot_type === null || (is_array($inspection_lot_type) && count($inspection_lot_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inspection_lot_type when calling productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'
            );
        }
        if (strlen($inspection_lot_type) > 8) {
            throw new \InvalidArgumentException('invalid length for "$inspection_lot_type" when calling ProductApi.productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet, must be smaller than or equal to 8.');
        }
        
        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantInspTypeSettingInspectionLotTypeProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantInspTypeSetting/{InspectionLotType}/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($inspection_lot_type !== null) {
            $resourcePath = str_replace(
                '{' . 'InspectionLotType' . '}',
                ObjectSerializer::toPathValue($inspection_lot_type),
                $resourcePath
            );
        }
        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantInternationalTradeProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInternationalTradeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantInternationalTradeProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInternationalTradeProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantInternationalTradeProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantInternationalTradeProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInternationalTradeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantInternationalTradeProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInternationalTradeProductPlantProductGet'][0])
    {
        $request = $this->productPlantInternationalTradeProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantInternationalTradeProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInternationalTradeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantInternationalTradeProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInternationalTradeProductPlantProductGet'][0])
    {
        return $this->productPlantInternationalTradeProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantInternationalTradeProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInternationalTradeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantInternationalTradeProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInternationalTradeProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantInternationalTradeProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantInternationalTradeProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantInternationalTradeProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantInternationalTradeProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantInternationalTradeProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantInternationalTradeProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantInternationalTradeProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantInternationalTradeProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantInternationalTradeProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantInternationalTrade/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantMRPProductMRPAreaPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $mrp_area MRP Area (required)
     * @param  string $plant MRP Area: Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantMRPProductMRPAreaPlantProductGet($product, $mrp_area, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'][0])
    {
        list($response) = $this->productPlantMRPProductMRPAreaPlantProductGetWithHttpInfo($product, $mrp_area, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantMRPProductMRPAreaPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $mrp_area MRP Area (required)
     * @param  string $plant MRP Area: Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantMRPProductMRPAreaPlantProductGetWithHttpInfo($product, $mrp_area, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'][0])
    {
        $request = $this->productPlantMRPProductMRPAreaPlantProductGetRequest($product, $mrp_area, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantMRPProductMRPAreaPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $mrp_area MRP Area (required)
     * @param  string $plant MRP Area: Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantMRPProductMRPAreaPlantProductGetAsync($product, $mrp_area, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'][0])
    {
        return $this->productPlantMRPProductMRPAreaPlantProductGetAsyncWithHttpInfo($product, $mrp_area, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantMRPProductMRPAreaPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $mrp_area MRP Area (required)
     * @param  string $plant MRP Area: Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantMRPProductMRPAreaPlantProductGetAsyncWithHttpInfo($product, $mrp_area, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantMRPProductMRPAreaPlantProductGetRequest($product, $mrp_area, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantMRPProductMRPAreaPlantProductGet'
     *
     * @param  string $product Material Number (required)
     * @param  string $mrp_area MRP Area (required)
     * @param  string $plant MRP Area: Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantMRPProductMRPAreaPlantProductGetRequest($product, $mrp_area, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantMRPProductMRPAreaPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantMRPProductMRPAreaPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantMRPProductMRPAreaPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'mrp_area' is set
        if ($mrp_area === null || (is_array($mrp_area) && count($mrp_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mrp_area when calling productPlantMRPProductMRPAreaPlantProductGet'
            );
        }
        if (strlen($mrp_area) > 10) {
            throw new \InvalidArgumentException('invalid length for "$mrp_area" when calling ProductApi.productPlantMRPProductMRPAreaPlantProductGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantMRPProductMRPAreaPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantMRPProductMRPAreaPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantMRP/{Product}/{MRPArea}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($mrp_area !== null) {
            $resourcePath = str_replace(
                '{' . 'MRPArea' . '}',
                ObjectSerializer::toPathValue($mrp_area),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantPlanningProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantPlanningProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPlanningProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantPlanningProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantPlanningProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantPlanningProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPlanningProductPlantProductGet'][0])
    {
        $request = $this->productPlantPlanningProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantPlanningProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantPlanningProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPlanningProductPlantProductGet'][0])
    {
        return $this->productPlantPlanningProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantPlanningProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantPlanningProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPlanningProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantPlanningProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantPlanningProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantPlanningProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPlanningProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantPlanningProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantPlanningProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantPlanningProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantPlanningProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantPlanning/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantProcurementProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProcurementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantProcurementProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProcurementProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantProcurementProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantProcurementProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProcurementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantProcurementProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProcurementProductPlantProductGet'][0])
    {
        $request = $this->productPlantProcurementProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantProcurementProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProcurementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantProcurementProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProcurementProductPlantProductGet'][0])
    {
        return $this->productPlantProcurementProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantProcurementProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProcurementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantProcurementProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProcurementProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantProcurementProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantProcurementProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProcurementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantProcurementProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProcurementProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantProcurementProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantProcurementProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantProcurementProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantProcurementProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantProcurement/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProductPlantProductGet'][0])
    {
        $request = $this->productPlantProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProductPlantProductGet'][0])
    {
        return $this->productPlantProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlant/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantPurchaseTaxProductPlantDepartureCountryProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $departure_country Departure Country/Region (from which the goods are sent) (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantPurchaseTaxProductPlantDepartureCountryProductGet($product, $plant, $departure_country, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'][0])
    {
        list($response) = $this->productPlantPurchaseTaxProductPlantDepartureCountryProductGetWithHttpInfo($product, $plant, $departure_country, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantPurchaseTaxProductPlantDepartureCountryProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $departure_country Departure Country/Region (from which the goods are sent) (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantPurchaseTaxProductPlantDepartureCountryProductGetWithHttpInfo($product, $plant, $departure_country, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'][0])
    {
        $request = $this->productPlantPurchaseTaxProductPlantDepartureCountryProductGetRequest($product, $plant, $departure_country, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantPurchaseTaxProductPlantDepartureCountryProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $departure_country Departure Country/Region (from which the goods are sent) (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantPurchaseTaxProductPlantDepartureCountryProductGetAsync($product, $plant, $departure_country, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'][0])
    {
        return $this->productPlantPurchaseTaxProductPlantDepartureCountryProductGetAsyncWithHttpInfo($product, $plant, $departure_country, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantPurchaseTaxProductPlantDepartureCountryProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $departure_country Departure Country/Region (from which the goods are sent) (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantPurchaseTaxProductPlantDepartureCountryProductGetAsyncWithHttpInfo($product, $plant, $departure_country, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantPurchaseTaxProductPlantDepartureCountryProductGetRequest($product, $plant, $departure_country, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantPurchaseTaxProductPlantDepartureCountryProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $departure_country Departure Country/Region (from which the goods are sent) (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantPurchaseTaxProductPlantDepartureCountryProductGetRequest($product, $plant, $departure_country, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantPurchaseTaxProductPlantDepartureCountryProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantPurchaseTaxProductPlantDepartureCountryProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantPurchaseTaxProductPlantDepartureCountryProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantPurchaseTaxProductPlantDepartureCountryProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantPurchaseTaxProductPlantDepartureCountryProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'departure_country' is set
        if ($departure_country === null || (is_array($departure_country) && count($departure_country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departure_country when calling productPlantPurchaseTaxProductPlantDepartureCountryProductGet'
            );
        }
        if (strlen($departure_country) > 3) {
            throw new \InvalidArgumentException('invalid length for "$departure_country" when calling ProductApi.productPlantPurchaseTaxProductPlantDepartureCountryProductGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/ProductPlantPurchaseTax/{Product}/{Plant}/{DepartureCountry}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }
        // path params
        if ($departure_country !== null) {
            $resourcePath = str_replace(
                '{' . 'DepartureCountry' . '}',
                ObjectSerializer::toPathValue($departure_country),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantQualityManagementProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantQualityManagementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantQualityManagementProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantQualityManagementProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantQualityManagementProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantQualityManagementProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantQualityManagementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantQualityManagementProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantQualityManagementProductPlantProductGet'][0])
    {
        $request = $this->productPlantQualityManagementProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantQualityManagementProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantQualityManagementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantQualityManagementProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantQualityManagementProductPlantProductGet'][0])
    {
        return $this->productPlantQualityManagementProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantQualityManagementProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantQualityManagementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantQualityManagementProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantQualityManagementProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantQualityManagementProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantQualityManagementProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantQualityManagementProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantQualityManagementProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantQualityManagementProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantQualityManagementProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantQualityManagementProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantQualityManagementProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantQualityManagementProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantQualityManagement/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantSalesProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSalesProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantSalesProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSalesProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantSalesProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantSalesProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSalesProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantSalesProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSalesProductPlantProductGet'][0])
    {
        $request = $this->productPlantSalesProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantSalesProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSalesProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantSalesProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSalesProductPlantProductGet'][0])
    {
        return $this->productPlantSalesProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantSalesProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSalesProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantSalesProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSalesProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantSalesProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantSalesProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSalesProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantSalesProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSalesProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantSalesProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantSalesProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantSalesProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantSalesProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantSales/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantStorageLocationProductPlantStorageLocationProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $storage_location Storage Location (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantStorageLocationProductPlantStorageLocationProductGet($product, $plant, $storage_location, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'][0])
    {
        list($response) = $this->productPlantStorageLocationProductPlantStorageLocationProductGetWithHttpInfo($product, $plant, $storage_location, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantStorageLocationProductPlantStorageLocationProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $storage_location Storage Location (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantStorageLocationProductPlantStorageLocationProductGetWithHttpInfo($product, $plant, $storage_location, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'][0])
    {
        $request = $this->productPlantStorageLocationProductPlantStorageLocationProductGetRequest($product, $plant, $storage_location, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantStorageLocationProductPlantStorageLocationProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $storage_location Storage Location (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantStorageLocationProductPlantStorageLocationProductGetAsync($product, $plant, $storage_location, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'][0])
    {
        return $this->productPlantStorageLocationProductPlantStorageLocationProductGetAsyncWithHttpInfo($product, $plant, $storage_location, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantStorageLocationProductPlantStorageLocationProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $storage_location Storage Location (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantStorageLocationProductPlantStorageLocationProductGetAsyncWithHttpInfo($product, $plant, $storage_location, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantStorageLocationProductPlantStorageLocationProductGetRequest($product, $plant, $storage_location, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantStorageLocationProductPlantStorageLocationProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string $storage_location Storage Location (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantStorageLocationProductPlantStorageLocationProductGetRequest($product, $plant, $storage_location, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageLocationProductPlantStorageLocationProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantStorageLocationProductPlantStorageLocationProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantStorageLocationProductPlantStorageLocationProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantStorageLocationProductPlantStorageLocationProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantStorageLocationProductPlantStorageLocationProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'storage_location' is set
        if ($storage_location === null || (is_array($storage_location) && count($storage_location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storage_location when calling productPlantStorageLocationProductPlantStorageLocationProductGet'
            );
        }
        if (strlen($storage_location) > 4) {
            throw new \InvalidArgumentException('invalid length for "$storage_location" when calling ProductApi.productPlantStorageLocationProductPlantStorageLocationProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantStorageLocation/{Product}/{Plant}/{StorageLocation}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }
        // path params
        if ($storage_location !== null) {
            $resourcePath = str_replace(
                '{' . 'StorageLocation' . '}',
                ObjectSerializer::toPathValue($storage_location),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantStorageProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantStorageProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantStorageProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantStorageProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantStorageProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageProductPlantProductGet'][0])
    {
        $request = $this->productPlantStorageProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantStorageProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantStorageProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageProductPlantProductGet'][0])
    {
        return $this->productPlantStorageProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantStorageProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantStorageProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantStorageProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantStorageProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantStorageProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantStorageProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantStorageProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantStorageProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantStorageProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantStorageProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantStorageProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantStorage/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantSupplyPlanningProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantSupplyPlanningProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantSupplyPlanningProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantSupplyPlanningProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantSupplyPlanningProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'][0])
    {
        $request = $this->productPlantSupplyPlanningProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantSupplyPlanningProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantSupplyPlanningProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'][0])
    {
        return $this->productPlantSupplyPlanningProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantSupplyPlanningProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantSupplyPlanningProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantSupplyPlanningProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantSupplyPlanningProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantSupplyPlanningProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantSupplyPlanningProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantSupplyPlanningProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantSupplyPlanningProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantSupplyPlanningProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantSupplyPlanningProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantSupplyPlanning/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPlantWorkSchedulingProductPlantProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPlantWorkSchedulingProductPlantProductGet($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'][0])
    {
        list($response) = $this->productPlantWorkSchedulingProductPlantProductGetWithHttpInfo($product, $plant, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productPlantWorkSchedulingProductPlantProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPlantWorkSchedulingProductPlantProductGetWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'][0])
    {
        $request = $this->productPlantWorkSchedulingProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPlantWorkSchedulingProductPlantProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantWorkSchedulingProductPlantProductGetAsync($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'][0])
    {
        return $this->productPlantWorkSchedulingProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPlantWorkSchedulingProductPlantProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPlantWorkSchedulingProductPlantProductGetAsyncWithHttpInfo($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPlantWorkSchedulingProductPlantProductGetRequest($product, $plant, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPlantWorkSchedulingProductPlantProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $plant Plant (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPlantWorkSchedulingProductPlantProductGetRequest($product, $plant, $select = null, $expand = null, string $contentType = self::contentTypes['productPlantWorkSchedulingProductPlantProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productPlantWorkSchedulingProductPlantProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productPlantWorkSchedulingProductPlantProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'plant' is set
        if ($plant === null || (is_array($plant) && count($plant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant when calling productPlantWorkSchedulingProductPlantProductGet'
            );
        }
        if (strlen($plant) > 4) {
            throw new \InvalidArgumentException('invalid length for "$plant" when calling ProductApi.productPlantWorkSchedulingProductPlantProductGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/ProductPlantWorkScheduling/{Product}/{Plant}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($plant !== null) {
            $resourcePath = str_replace(
                '{' . 'Plant' . '}',
                ObjectSerializer::toPathValue($plant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPost
     *
     * Add new entity to Product
     *
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productPost($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, string $contentType = self::contentTypes['productPost'][0])
    {
        list($response) = $this->productPostWithHttpInfo($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productPostWithHttpInfo
     *
     * Add new entity to Product
     *
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPostWithHttpInfo($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, string $contentType = self::contentTypes['productPost'][0])
    {
        $request = $this->productPostRequest($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productPostAsync
     *
     * Add new entity to Product
     *
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPostAsync($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, string $contentType = self::contentTypes['productPost'][0])
    {
        return $this->productPostAsyncWithHttpInfo($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPostAsyncWithHttpInfo
     *
     * Add new entity to Product
     *
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPostAsyncWithHttpInfo($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, string $contentType = self::contentTypes['productPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productPostRequest($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPost'
     *
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPostRequest($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create, string $contentType = self::contentTypes['productPost'][0])
    {

        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create when calling productPost'
            );
        }


        $resourcePath = '/Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProcurementProductProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProcurementProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProcurementProductProductGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProcurementProductProductGet'][0])
    {
        list($response) = $this->productProcurementProductProductGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProcurementProductProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProcurementProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProcurementProductProductGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProcurementProductProductGet'][0])
    {
        $request = $this->productProcurementProductProductGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProcurementProductProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProcurementProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProcurementProductProductGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProcurementProductProductGet'][0])
    {
        return $this->productProcurementProductProductGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProcurementProductProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProcurementProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProcurementProductProductGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProcurementProductProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productProcurementProductProductGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProcurementProductProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProcurementProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProcurementProductProductGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProcurementProductProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProcurementProductProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProcurementProductProductGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/ProductProcurement/{Product}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductGet
     *
     * Get entity from Product by key
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductGet'][0])
    {
        list($response) = $this->productProductGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductGetWithHttpInfo
     *
     * Get entity from Product by key
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductGet'][0])
    {
        $request = $this->productProductGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductGetAsync
     *
     * Get entity from Product by key
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductGet'][0])
    {
        return $this->productProductGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductGetAsyncWithHttpInfo
     *
     * Get entity from Product by key
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productProductGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/Product/{Product}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductPatch
     *
     * Update entity in Product
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productProductPatch($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, string $contentType = self::contentTypes['productProductPatch'][0])
    {
        $this->productProductPatchWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, $contentType);
    }

    /**
     * Operation productProductPatchWithHttpInfo
     *
     * Update entity in Product
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductPatchWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, string $contentType = self::contentTypes['productProductPatch'][0])
    {
        $request = $this->productProductPatchRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductPatchAsync
     *
     * Update entity in Product
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductPatchAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, string $contentType = self::contentTypes['productProductPatch'][0])
    {
        return $this->productProductPatchAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductPatchAsyncWithHttpInfo
     *
     * Update entity in Product
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductPatchAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, string $contentType = self::contentTypes['productProductPatch'][0])
    {
        $returnType = '';
        $request = $this->productProductPatchRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductPatch'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductTypeUpdate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductPatchRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update, string $contentType = self::contentTypes['productProductPatch'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductPatch'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductPatch, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update when calling productProductPatch'
            );
        }


        $resourcePath = '/Product/{Product}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_type_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductChangeMasterGet
     *
     * Get entities from related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductChangeMasterGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductChangeMasterGet'][0])
    {
        list($response) = $this->productProductProductChangeMasterGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductChangeMasterGetWithHttpInfo
     *
     * Get entities from related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductChangeMasterGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductChangeMasterGet'][0])
    {
        $request = $this->productProductProductChangeMasterGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductChangeMasterGetAsync
     *
     * Get entities from related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductChangeMasterGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductChangeMasterGet'][0])
    {
        return $this->productProductProductChangeMasterGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductChangeMasterGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductChangeMasterGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductChangeMasterGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductChangeMasterType';
        $request = $this->productProductProductChangeMasterGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductChangeMasterGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductChangeMasterGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductChangeMasterGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductChangeMasterGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductChangeMasterGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productProductProductChangeMasterGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productProductProductChangeMasterGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductChangeMaster';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductChangeMasterPost
     *
     * Add new entity to related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductChangeMasterPost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, string $contentType = self::contentTypes['productProductProductChangeMasterPost'][0])
    {
        list($response) = $this->productProductProductChangeMasterPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductChangeMasterPostWithHttpInfo
     *
     * Add new entity to related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductChangeMasterPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, string $contentType = self::contentTypes['productProductProductChangeMasterPost'][0])
    {
        $request = $this->productProductProductChangeMasterPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductChangeMasterPostAsync
     *
     * Add new entity to related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductChangeMasterPostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, string $contentType = self::contentTypes['productProductProductChangeMasterPost'][0])
    {
        return $this->productProductProductChangeMasterPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductChangeMasterPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductChangeMaster
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductChangeMasterPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, string $contentType = self::contentTypes['productProductProductChangeMasterPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterType';
        $request = $this->productProductProductChangeMasterPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductChangeMasterPost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductChangeMasterTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductChangeMasterPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductChangeMasterPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create, string $contentType = self::contentTypes['productProductProductChangeMasterPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductChangeMasterPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductChangeMasterPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create when calling productProductProductChangeMasterPost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductChangeMaster';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_change_master_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductDescriptionGet
     *
     * Get entities from related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductDescriptionGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductDescriptionGet'][0])
    {
        list($response) = $this->productProductProductDescriptionGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductDescriptionGetWithHttpInfo
     *
     * Get entities from related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductDescriptionGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductDescriptionGet'][0])
    {
        $request = $this->productProductProductDescriptionGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductDescriptionGetAsync
     *
     * Get entities from related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductDescriptionGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductDescriptionGet'][0])
    {
        return $this->productProductProductDescriptionGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductDescriptionGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductDescriptionGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductDescriptionGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductDescriptionType';
        $request = $this->productProductProductDescriptionGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductDescriptionGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductDescriptionGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductDescriptionGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductDescriptionGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductDescriptionGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productProductProductDescriptionGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productProductProductDescriptionGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductDescriptionPost
     *
     * Add new entity to related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductDescriptionPost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, string $contentType = self::contentTypes['productProductProductDescriptionPost'][0])
    {
        list($response) = $this->productProductProductDescriptionPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductDescriptionPostWithHttpInfo
     *
     * Add new entity to related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductDescriptionPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, string $contentType = self::contentTypes['productProductProductDescriptionPost'][0])
    {
        $request = $this->productProductProductDescriptionPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductDescriptionPostAsync
     *
     * Add new entity to related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductDescriptionPostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, string $contentType = self::contentTypes['productProductProductDescriptionPost'][0])
    {
        return $this->productProductProductDescriptionPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductDescriptionPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductDescription
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductDescriptionPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, string $contentType = self::contentTypes['productProductProductDescriptionPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionType';
        $request = $this->productProductProductDescriptionPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductDescriptionPost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductDescriptionTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductDescriptionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductDescriptionPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create, string $contentType = self::contentTypes['productProductProductDescriptionPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductDescriptionPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductDescriptionPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create when calling productProductProductDescriptionPost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_description_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductEWMWarehouseGet
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductEWMWarehouseGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        list($response) = $this->productProductProductEWMWarehouseGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductEWMWarehouseGetWithHttpInfo
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductEWMWarehouseGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        $request = $this->productProductProductEWMWarehouseGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductEWMWarehouseGetAsync
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehouseGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        return $this->productProductProductEWMWarehouseGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductEWMWarehouseGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehouseGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductEWMWarehouseType';
        $request = $this->productProductProductEWMWarehouseGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductEWMWarehouseGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehouseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductEWMWarehouseGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductEWMWarehouseGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductEWMWarehouseGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductEWMWarehouseGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productProductProductEWMWarehouseGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productProductProductEWMWarehouseGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductEWMWarehouse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductEWMWarehousePost
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductEWMWarehousePost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        list($response) = $this->productProductProductEWMWarehousePostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductEWMWarehousePostWithHttpInfo
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductEWMWarehousePostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        $request = $this->productProductProductEWMWarehousePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductEWMWarehousePostAsync
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehousePostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        return $this->productProductProductEWMWarehousePostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductEWMWarehousePostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductEWMWarehouse
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductEWMWarehousePostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseType';
        $request = $this->productProductProductEWMWarehousePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductEWMWarehousePost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductEWMWarehouseTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductEWMWarehousePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductEWMWarehousePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create, string $contentType = self::contentTypes['productProductProductEWMWarehousePost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductEWMWarehousePost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductEWMWarehousePost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create when calling productProductProductEWMWarehousePost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductEWMWarehouse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_ewm_warehouse_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductPlantGet
     *
     * Get entities from related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductPlantGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductPlantGet'][0])
    {
        list($response) = $this->productProductProductPlantGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductPlantGetWithHttpInfo
     *
     * Get entities from related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductPlantGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductPlantGet'][0])
    {
        $request = $this->productProductProductPlantGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductPlantGetAsync
     *
     * Get entities from related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductPlantGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductPlantGet'][0])
    {
        return $this->productProductProductPlantGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductPlantGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductPlantGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductPlantGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductPlantType';
        $request = $this->productProductProductPlantGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductPlantGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductPlantGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductPlantGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductPlantGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductPlantGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productProductProductPlantGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productProductProductPlantGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductPlant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductPlantPost
     *
     * Add new entity to related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductPlantPost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, string $contentType = self::contentTypes['productProductProductPlantPost'][0])
    {
        list($response) = $this->productProductProductPlantPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductPlantPostWithHttpInfo
     *
     * Add new entity to related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductPlantPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, string $contentType = self::contentTypes['productProductProductPlantPost'][0])
    {
        $request = $this->productProductProductPlantPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductPlantPostAsync
     *
     * Add new entity to related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductPlantPostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, string $contentType = self::contentTypes['productProductProductPlantPost'][0])
    {
        return $this->productProductProductPlantPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductPlantPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductPlant
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductPlantPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, string $contentType = self::contentTypes['productProductProductPlantPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantType';
        $request = $this->productProductProductPlantPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductPlantPost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductPlantPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductPlantPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create, string $contentType = self::contentTypes['productProductProductPlantPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductPlantPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductPlantPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create when calling productProductProductPlantPost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductPlant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_plant_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductProcurementGet
     *
     * Get related _ProductProcurement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductProcurementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductProcurementGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductProcurementGet'][0])
    {
        list($response) = $this->productProductProductProcurementGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductProcurementGetWithHttpInfo
     *
     * Get related _ProductProcurement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductProcurementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductProcurementGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductProcurementGet'][0])
    {
        $request = $this->productProductProductProcurementGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductProcurementGetAsync
     *
     * Get related _ProductProcurement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductProcurementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductProcurementGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductProcurementGet'][0])
    {
        return $this->productProductProductProcurementGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductProcurementGetAsyncWithHttpInfo
     *
     * Get related _ProductProcurement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductProcurementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductProcurementGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductProcurementGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductProcurementType';
        $request = $this->productProductProductProcurementGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductProcurementGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductProcurementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductProcurementGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductProcurementGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductProcurementGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductProcurementGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/Product/{Product}/_ProductProcurement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductQualityManagementGet
     *
     * Get related _ProductQualityManagement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductQualityManagementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductQualityManagementGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductQualityManagementGet'][0])
    {
        list($response) = $this->productProductProductQualityManagementGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductQualityManagementGetWithHttpInfo
     *
     * Get related _ProductQualityManagement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductQualityManagementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductQualityManagementGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductQualityManagementGet'][0])
    {
        $request = $this->productProductProductQualityManagementGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductQualityManagementGetAsync
     *
     * Get related _ProductQualityManagement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductQualityManagementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductQualityManagementGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductQualityManagementGet'][0])
    {
        return $this->productProductProductQualityManagementGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductQualityManagementGetAsyncWithHttpInfo
     *
     * Get related _ProductQualityManagement
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductQualityManagementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductQualityManagementGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductQualityManagementGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductQualityManagementType';
        $request = $this->productProductProductQualityManagementGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductQualityManagementGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductQualityManagementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductQualityManagementGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductQualityManagementGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductQualityManagementGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductQualityManagementGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/Product/{Product}/_ProductQualityManagement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductSalesDeliveryGet
     *
     * Get entities from related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductSalesDeliveryGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesDeliveryGet'][0])
    {
        list($response) = $this->productProductProductSalesDeliveryGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductSalesDeliveryGetWithHttpInfo
     *
     * Get entities from related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductSalesDeliveryGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesDeliveryGet'][0])
    {
        $request = $this->productProductProductSalesDeliveryGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductSalesDeliveryGetAsync
     *
     * Get entities from related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductSalesDeliveryGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesDeliveryGet'][0])
    {
        return $this->productProductProductSalesDeliveryGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductSalesDeliveryGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductSalesDeliveryGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesDeliveryGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductSalesDeliveryType';
        $request = $this->productProductProductSalesDeliveryGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductSalesDeliveryGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductSalesDeliveryGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesDeliveryGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductSalesDeliveryGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductSalesDeliveryGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productProductProductSalesDeliveryGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productProductProductSalesDeliveryGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductSalesDelivery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductSalesDeliveryPost
     *
     * Add new entity to related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductSalesDeliveryPost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, string $contentType = self::contentTypes['productProductProductSalesDeliveryPost'][0])
    {
        list($response) = $this->productProductProductSalesDeliveryPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductSalesDeliveryPostWithHttpInfo
     *
     * Add new entity to related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductSalesDeliveryPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, string $contentType = self::contentTypes['productProductProductSalesDeliveryPost'][0])
    {
        $request = $this->productProductProductSalesDeliveryPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductSalesDeliveryPostAsync
     *
     * Add new entity to related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductSalesDeliveryPostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, string $contentType = self::contentTypes['productProductProductSalesDeliveryPost'][0])
    {
        return $this->productProductProductSalesDeliveryPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductSalesDeliveryPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductSalesDelivery
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductSalesDeliveryPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, string $contentType = self::contentTypes['productProductProductSalesDeliveryPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryType';
        $request = $this->productProductProductSalesDeliveryPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductSalesDeliveryPost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesDeliveryTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductSalesDeliveryPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create, string $contentType = self::contentTypes['productProductProductSalesDeliveryPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductSalesDeliveryPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductSalesDeliveryPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create when calling productProductProductSalesDeliveryPost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductSalesDelivery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_sales_delivery_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductSalesGet
     *
     * Get related _ProductSales
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductSalesGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesGet'][0])
    {
        list($response) = $this->productProductProductSalesGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductSalesGetWithHttpInfo
     *
     * Get related _ProductSales
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductSalesGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesGet'][0])
    {
        $request = $this->productProductProductSalesGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductSalesGetAsync
     *
     * Get related _ProductSales
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductSalesGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesGet'][0])
    {
        return $this->productProductProductSalesGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductSalesGetAsyncWithHttpInfo
     *
     * Get related _ProductSales
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductSalesGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductSalesType';
        $request = $this->productProductProductSalesGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductSalesGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductSalesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductSalesGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductSalesGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductSalesGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductSalesGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/Product/{Product}/_ProductSales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductStorageGet
     *
     * Get related _ProductStorage
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductStorageGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductStorageGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductStorageGet'][0])
    {
        list($response) = $this->productProductProductStorageGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductStorageGetWithHttpInfo
     *
     * Get related _ProductStorage
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductStorageGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductStorageGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductStorageGet'][0])
    {
        $request = $this->productProductProductStorageGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductStorageGetAsync
     *
     * Get related _ProductStorage
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductStorageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductStorageGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductStorageGet'][0])
    {
        return $this->productProductProductStorageGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductStorageGetAsyncWithHttpInfo
     *
     * Get related _ProductStorage
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductStorageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductStorageGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductStorageGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductStorageType';
        $request = $this->productProductProductStorageGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductStorageGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductStorageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductStorageGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductStorageGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductStorageGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductStorageGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/Product/{Product}/_ProductStorage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductUnitOfMeasureGet
     *
     * Get entities from related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasureGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductUnitOfMeasureGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductUnitOfMeasureGet'][0])
    {
        list($response) = $this->productProductProductUnitOfMeasureGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductUnitOfMeasureGetWithHttpInfo
     *
     * Get entities from related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasureGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductUnitOfMeasureGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductUnitOfMeasureGet'][0])
    {
        $request = $this->productProductProductUnitOfMeasureGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductUnitOfMeasureGetAsync
     *
     * Get entities from related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasureGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductUnitOfMeasureGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductUnitOfMeasureGet'][0])
    {
        return $this->productProductProductUnitOfMeasureGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductUnitOfMeasureGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasureGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductUnitOfMeasureGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductUnitOfMeasureGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductUnitOfMeasureType';
        $request = $this->productProductProductUnitOfMeasureGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductUnitOfMeasureGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasureGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductUnitOfMeasureGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductUnitOfMeasureGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductUnitOfMeasureGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductUnitOfMeasureGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productProductProductUnitOfMeasureGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productProductProductUnitOfMeasureGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductUnitOfMeasure';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductUnitOfMeasurePost
     *
     * Add new entity to related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasurePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductUnitOfMeasurePost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, string $contentType = self::contentTypes['productProductProductUnitOfMeasurePost'][0])
    {
        list($response) = $this->productProductProductUnitOfMeasurePostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductUnitOfMeasurePostWithHttpInfo
     *
     * Add new entity to related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasurePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductUnitOfMeasurePostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, string $contentType = self::contentTypes['productProductProductUnitOfMeasurePost'][0])
    {
        $request = $this->productProductProductUnitOfMeasurePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductUnitOfMeasurePostAsync
     *
     * Add new entity to related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasurePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductUnitOfMeasurePostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, string $contentType = self::contentTypes['productProductProductUnitOfMeasurePost'][0])
    {
        return $this->productProductProductUnitOfMeasurePostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductUnitOfMeasurePostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductUnitOfMeasure
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasurePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductUnitOfMeasurePostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, string $contentType = self::contentTypes['productProductProductUnitOfMeasurePost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureType';
        $request = $this->productProductProductUnitOfMeasurePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductUnitOfMeasurePost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductUnitOfMeasureTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductUnitOfMeasurePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductUnitOfMeasurePostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create, string $contentType = self::contentTypes['productProductProductUnitOfMeasurePost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductUnitOfMeasurePost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductUnitOfMeasurePost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create when calling productProductProductUnitOfMeasurePost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductUnitOfMeasure';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_unit_of_measure_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductValuationGet
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductValuationGet($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        list($response) = $this->productProductProductValuationGetWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductValuationGetWithHttpInfo
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductValuationGetWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        $request = $this->productProductProductValuationGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductValuationGetAsync
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationGetAsync($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        return $this->productProductProductValuationGetAsyncWithHttpInfo($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductValuationGetAsyncWithHttpInfo
     *
     * Get entities from related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationGetAsyncWithHttpInfo($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\CollectionOfProductValuationType';
        $request = $this->productProductProductValuationGetRequest($product, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductValuationGet'
     *
     * @param  string $product Product Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductValuationGetRequest($product, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['productProductProductValuationGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductValuationGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductValuationGet, must be smaller than or equal to 18.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ProductApi.productProductProductValuationGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ProductApi.productProductProductValuationGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/Product/{Product}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productProductProductValuationPost
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productProductProductValuationPost($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        list($response) = $this->productProductProductValuationPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType);
        return $response;
    }

    /**
     * Operation productProductProductValuationPostWithHttpInfo
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productProductProductValuationPostWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        $request = $this->productProductProductValuationPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productProductProductValuationPostAsync
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationPostAsync($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        return $this->productProductProductValuationPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productProductProductValuationPostAsyncWithHttpInfo
     *
     * Add new entity to related _ProductValuation
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productProductProductValuationPostAsyncWithHttpInfo($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationType';
        $request = $this->productProductProductValuationPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productProductProductValuationPost'
     *
     * @param  string $product Product Number (required)
     * @param  \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductValuationTypeCreate $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productProductProductValuationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productProductProductValuationPostRequest($product, $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create, string $contentType = self::contentTypes['productProductProductValuationPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productProductProductValuationPost'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productProductProductValuationPost, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create) && count($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create when calling productProductProductValuationPost'
            );
        }


        $resourcePath = '/Product/{Product}/_ProductValuation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_product2_v0001_product_valuation_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productQualityManagementProductProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productQualityManagementProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productQualityManagementProductProductGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productQualityManagementProductProductGet'][0])
    {
        list($response) = $this->productQualityManagementProductProductGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productQualityManagementProductProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productQualityManagementProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productQualityManagementProductProductGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productQualityManagementProductProductGet'][0])
    {
        $request = $this->productQualityManagementProductProductGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productQualityManagementProductProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productQualityManagementProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productQualityManagementProductProductGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productQualityManagementProductProductGet'][0])
    {
        return $this->productQualityManagementProductProductGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productQualityManagementProductProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productQualityManagementProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productQualityManagementProductProductGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productQualityManagementProductProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productQualityManagementProductProductGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productQualityManagementProductProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productQualityManagementProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productQualityManagementProductProductGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productQualityManagementProductProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productQualityManagementProductProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productQualityManagementProductProductGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/ProductQualityManagement/{Product}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet($product, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        list($response) = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        $request = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetRequest($product, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetAsync($product, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        return $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetAsyncWithHttpInfo($product, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetRequest($product, $product_sales_org, $product_distribution_chnl, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $product_sales_org Sales Organization (required)
     * @param  string $product_distribution_chnl Distribution Channel (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGetRequest($product, $product_sales_org, $product_distribution_chnl, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'product_sales_org' is set
        if ($product_sales_org === null || (is_array($product_sales_org) && count($product_sales_org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_sales_org when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_sales_org) > 4) {
            throw new \InvalidArgumentException('invalid length for "$product_sales_org" when calling ProductApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'product_distribution_chnl' is set
        if ($product_distribution_chnl === null || (is_array($product_distribution_chnl) && count($product_distribution_chnl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_distribution_chnl when calling productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet'
            );
        }
        if (strlen($product_distribution_chnl) > 2) {
            throw new \InvalidArgumentException('invalid length for "$product_distribution_chnl" when calling ProductApi.productSalesDeliveryProductProductSalesOrgProductDistributionChnlProductGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProductSalesDelivery/{Product}/{ProductSalesOrg}/{ProductDistributionChnl}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($product_sales_org !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductSalesOrg' . '}',
                ObjectSerializer::toPathValue($product_sales_org),
                $resourcePath
            );
        }
        // path params
        if ($product_distribution_chnl !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductDistributionChnl' . '}',
                ObjectSerializer::toPathValue($product_distribution_chnl),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productSalesProductProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productSalesProductProductGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesProductProductGet'][0])
    {
        list($response) = $this->productSalesProductProductGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productSalesProductProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productSalesProductProductGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesProductProductGet'][0])
    {
        $request = $this->productSalesProductProductGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productSalesProductProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesProductProductGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesProductProductGet'][0])
    {
        return $this->productSalesProductProductGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productSalesProductProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSalesProductProductGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesProductProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productSalesProductProductGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productSalesProductProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productSalesProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productSalesProductProductGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productSalesProductProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productSalesProductProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productSalesProductProductGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/ProductSales/{Product}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productStorageProductProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productStorageProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productStorageProductProductGet($product, $select = null, $expand = null, string $contentType = self::contentTypes['productStorageProductProductGet'][0])
    {
        list($response) = $this->productStorageProductProductGetWithHttpInfo($product, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productStorageProductProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productStorageProductProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productStorageProductProductGetWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productStorageProductProductGet'][0])
    {
        $request = $this->productStorageProductProductGetRequest($product, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productStorageProductProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productStorageProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productStorageProductProductGetAsync($product, $select = null, $expand = null, string $contentType = self::contentTypes['productStorageProductProductGet'][0])
    {
        return $this->productStorageProductProductGetAsyncWithHttpInfo($product, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productStorageProductProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productStorageProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productStorageProductProductGetAsyncWithHttpInfo($product, $select = null, $expand = null, string $contentType = self::contentTypes['productStorageProductProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productStorageProductProductGetRequest($product, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productStorageProductProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productStorageProductProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productStorageProductProductGetRequest($product, $select = null, $expand = null, string $contentType = self::contentTypes['productStorageProductProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productStorageProductProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productStorageProductProductGet, must be smaller than or equal to 18.');
        }
        
        
        

        $resourcePath = '/ProductStorage/{Product}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string $consecutive_number Consecutive Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet($product, $alternative_unit, $consecutive_number, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'][0])
    {
        list($response) = $this->productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetWithHttpInfo($product, $alternative_unit, $consecutive_number, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string $consecutive_number Consecutive Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetWithHttpInfo($product, $alternative_unit, $consecutive_number, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'][0])
    {
        $request = $this->productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetRequest($product, $alternative_unit, $consecutive_number, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string $consecutive_number Consecutive Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetAsync($product, $alternative_unit, $consecutive_number, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'][0])
    {
        return $this->productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetAsyncWithHttpInfo($product, $alternative_unit, $consecutive_number, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Material Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string $consecutive_number Consecutive Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetAsyncWithHttpInfo($product, $alternative_unit, $consecutive_number, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetRequest($product, $alternative_unit, $consecutive_number, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'
     *
     * @param  string $product Material Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string $consecutive_number Consecutive Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGetRequest($product, $alternative_unit, $consecutive_number, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'alternative_unit' is set
        if ($alternative_unit === null || (is_array($alternative_unit) && count($alternative_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alternative_unit when calling productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'
            );
        }
        if (strlen($alternative_unit) > 3) {
            throw new \InvalidArgumentException('invalid length for "$alternative_unit" when calling ProductApi.productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'consecutive_number' is set
        if ($consecutive_number === null || (is_array($consecutive_number) && count($consecutive_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consecutive_number when calling productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet'
            );
        }
        if (strlen($consecutive_number) > 5) {
            throw new \InvalidArgumentException('invalid length for "$consecutive_number" when calling ProductApi.productUnitOfMeasureEANProductAlternativeUnitConsecutiveNumberProductGet, must be smaller than or equal to 5.');
        }
        
        
        

        $resourcePath = '/ProductUnitOfMeasureEAN/{Product}/{AlternativeUnit}/{ConsecutiveNumber}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($alternative_unit !== null) {
            $resourcePath = str_replace(
                '{' . 'AlternativeUnit' . '}',
                ObjectSerializer::toPathValue($alternative_unit),
                $resourcePath
            );
        }
        // path params
        if ($consecutive_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ConsecutiveNumber' . '}',
                ObjectSerializer::toPathValue($consecutive_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productUnitOfMeasureProductAlternativeUnitProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productUnitOfMeasureProductAlternativeUnitProductGet($product, $alternative_unit, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'][0])
    {
        list($response) = $this->productUnitOfMeasureProductAlternativeUnitProductGetWithHttpInfo($product, $alternative_unit, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productUnitOfMeasureProductAlternativeUnitProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productUnitOfMeasureProductAlternativeUnitProductGetWithHttpInfo($product, $alternative_unit, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'][0])
    {
        $request = $this->productUnitOfMeasureProductAlternativeUnitProductGetRequest($product, $alternative_unit, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productUnitOfMeasureProductAlternativeUnitProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productUnitOfMeasureProductAlternativeUnitProductGetAsync($product, $alternative_unit, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'][0])
    {
        return $this->productUnitOfMeasureProductAlternativeUnitProductGetAsyncWithHttpInfo($product, $alternative_unit, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productUnitOfMeasureProductAlternativeUnitProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productUnitOfMeasureProductAlternativeUnitProductGetAsyncWithHttpInfo($product, $alternative_unit, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productUnitOfMeasureProductAlternativeUnitProductGetRequest($product, $alternative_unit, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productUnitOfMeasureProductAlternativeUnitProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $alternative_unit Base Unit of Measure - No Conversion Routine (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productUnitOfMeasureProductAlternativeUnitProductGetRequest($product, $alternative_unit, $select = null, $expand = null, string $contentType = self::contentTypes['productUnitOfMeasureProductAlternativeUnitProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productUnitOfMeasureProductAlternativeUnitProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productUnitOfMeasureProductAlternativeUnitProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'alternative_unit' is set
        if ($alternative_unit === null || (is_array($alternative_unit) && count($alternative_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alternative_unit when calling productUnitOfMeasureProductAlternativeUnitProductGet'
            );
        }
        if (strlen($alternative_unit) > 3) {
            throw new \InvalidArgumentException('invalid length for "$alternative_unit" when calling ProductApi.productUnitOfMeasureProductAlternativeUnitProductGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/ProductUnitOfMeasure/{Product}/{AlternativeUnit}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($alternative_unit !== null) {
            $resourcePath = str_replace(
                '{' . 'AlternativeUnit' . '}',
                ObjectSerializer::toPathValue($alternative_unit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'][0])
    {
        list($response) = $this->productValuationAccountingProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'][0])
    {
        $request = $this->productValuationAccountingProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'][0])
    {
        return $this->productValuationAccountingProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationAccountingProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productValuationAccountingProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationAccountingProductValuationAreaValuationTypeProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationAccountingProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationAccountingProductValuationAreaValuationTypeProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationAccountingProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productValuationAccountingProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationAccountingProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductApi.productValuationAccountingProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationAccountingProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductApi.productValuationAccountingProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuationAccounting/{Product}/{ValuationArea}/{ValuationType}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'][0])
    {
        list($response) = $this->productValuationCostingProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'][0])
    {
        $request = $this->productValuationCostingProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'][0])
    {
        return $this->productValuationCostingProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationCostingProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productValuationCostingProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationCostingProductValuationAreaValuationTypeProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationCostingProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationCostingProductValuationAreaValuationTypeProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationCostingProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productValuationCostingProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationCostingProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductApi.productValuationCostingProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationCostingProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductApi.productValuationCostingProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuationCosting/{Product}/{ValuationArea}/{ValuationType}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        list($response) = $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        $request = $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsync($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        return $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'currency_role' is set
        if ($currency_role === null || (is_array($currency_role) && count($currency_role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_role when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($currency_role) > 2) {
            throw new \InvalidArgumentException('invalid length for "$currency_role" when calling ProductApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'ledger' is set
        if ($ledger === null || (is_array($ledger) && count($ledger) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ledger when calling productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($ledger) > 2) {
            throw new \InvalidArgumentException('invalid length for "$ledger" when calling ProductApi.productValuationLedgerAccountProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProductValuationLedgerAccount/{Product}/{ValuationArea}/{ValuationType}/{CurrencyRole}/{Ledger}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }
        // path params
        if ($currency_role !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyRole' . '}',
                ObjectSerializer::toPathValue($currency_role),
                $resourcePath
            );
        }
        // path params
        if ($ledger !== null) {
            $resourcePath = str_replace(
                '{' . 'Ledger' . '}',
                ObjectSerializer::toPathValue($ledger),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        list($response) = $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        $request = $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsync($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        return $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string $currency_role External Currency Type and Valuation View (required)
     * @param  string $ledger Ledger in General Ledger Accounting (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGetRequest($product, $valuation_area, $valuation_type, $currency_role, $ledger, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'currency_role' is set
        if ($currency_role === null || (is_array($currency_role) && count($currency_role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_role when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($currency_role) > 2) {
            throw new \InvalidArgumentException('invalid length for "$currency_role" when calling ProductApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'ledger' is set
        if ($ledger === null || (is_array($ledger) && count($ledger) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ledger when calling productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet'
            );
        }
        if (strlen($ledger) > 2) {
            throw new \InvalidArgumentException('invalid length for "$ledger" when calling ProductApi.productValuationLedgerPricesProductValuationAreaValuationTypeCurrencyRoleLedgerProductGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/ProductValuationLedgerPrices/{Product}/{ValuationArea}/{ValuationType}/{CurrencyRole}/{Ledger}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }
        // path params
        if ($currency_role !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyRole' . '}',
                ObjectSerializer::toPathValue($currency_role),
                $resourcePath
            );
        }
        // path params
        if ($ledger !== null) {
            $resourcePath = str_replace(
                '{' . 'Ledger' . '}',
                ObjectSerializer::toPathValue($ledger),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGet
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error
     */
    public function productValuationProductValuationAreaValuationTypeProductGet($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        list($response) = $this->productValuationProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGetWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\ProductODV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType|\BeLenka\SAP\ProductODV4\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function productValuationProductValuationAreaValuationTypeProductGetWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        $request = $this->productValuationProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGetAsync
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductGetAsync($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        return $this->productValuationProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productValuationProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo
     *
     * Get related _Product
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productValuationProductValuationAreaValuationTypeProductGetAsyncWithHttpInfo($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {
        $returnType = '\BeLenka\SAP\ProductODV4\Model\ComSapGatewaySrvdA2xApiProduct2V0001ProductType';
        $request = $this->productValuationProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productValuationProductValuationAreaValuationTypeProductGet'
     *
     * @param  string $product Product Number (required)
     * @param  string $valuation_area Valuation Area (required)
     * @param  string $valuation_type Valuation Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productValuationProductValuationAreaValuationTypeProductGetRequest($product, $valuation_area, $valuation_type, $select = null, $expand = null, string $contentType = self::contentTypes['productValuationProductValuationAreaValuationTypeProductGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productValuationProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($product) > 18) {
            throw new \InvalidArgumentException('invalid length for "$product" when calling ProductApi.productValuationProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 18.');
        }
        
        // verify the required parameter 'valuation_area' is set
        if ($valuation_area === null || (is_array($valuation_area) && count($valuation_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_area when calling productValuationProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_area) > 4) {
            throw new \InvalidArgumentException('invalid length for "$valuation_area" when calling ProductApi.productValuationProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'valuation_type' is set
        if ($valuation_type === null || (is_array($valuation_type) && count($valuation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valuation_type when calling productValuationProductValuationAreaValuationTypeProductGet'
            );
        }
        if (strlen($valuation_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$valuation_type" when calling ProductApi.productValuationProductValuationAreaValuationTypeProductGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/ProductValuation/{Product}/{ValuationArea}/{ValuationType}/_Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'Product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($valuation_area !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationArea' . '}',
                ObjectSerializer::toPathValue($valuation_area),
                $resourcePath
            );
        }
        // path params
        if ($valuation_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ValuationType' . '}',
                ObjectSerializer::toPathValue($valuation_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
