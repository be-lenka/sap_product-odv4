<?php
/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingTypeUpdateTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\ProductODV4
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product
 *
 * The service supports following operations: GET, POST, PUT, PATCH, DELETE. You can create, read, update, and delete product master data at the entity level.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace BeLenka\SAP\ProductODV4\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingTypeUpdateTest Class Doc Comment
 *
 * @category    Class
 * @description ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingTypeUpdate
 * @package     BeLenka\SAP\ProductODV4
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingTypeUpdateTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "ComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingTypeUpdate"
     */
    public function testComSapGatewaySrvdA2xApiProduct2V0001ProductPlantInspTypSettingTypeUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_is_task_list_required"
     */
    public function testPropertyInspLotIsTaskListRequired()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_material_spec"
     */
    public function testPropertyInspLotHasMaterialSpec()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_confign_specification"
     */
    public function testPropertyInspLotHasConfignSpecification()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_batch_charc"
     */
    public function testPropertyInspLotHasBatchCharc()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_autom_spec_assgmt"
     */
    public function testPropertyInspLotHasAutomSpecAssgmt()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_charc"
     */
    public function testPropertyInspLotHasCharc()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "has_post_to_inspection_stock"
     */
    public function testPropertyHasPostToInspectionStock()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_is_autom_usge_dcsn_possible"
     */
    public function testPropertyInspLotIsAutomUsgeDcsnPossible()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sampling_procedure"
     */
    public function testPropertySamplingProcedure()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_dynamic_rule"
     */
    public function testPropertyInspLotDynamicRule()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_sample_quantity_in_percent"
     */
    public function testPropertyInspLotSampleQuantityInPercent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "inspection_lot_is_full_inspection"
     */
    public function testPropertyInspectionLotIsFullInspection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_skip_is_allowed"
     */
    public function testPropertyInspLotSkipIsAllowed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_manual_sample_size"
     */
    public function testPropertyInspLotHasManualSampleSize()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_is_smpl_calc_mnl_triggered"
     */
    public function testPropertyInspLotIsSmplCalcMnlTriggered()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_is_serial_nmbr_possible"
     */
    public function testPropertyInspLotIsSerialNmbrPossible()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_duration_in_days"
     */
    public function testPropertyInspLotDurationInDays()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_summary_control"
     */
    public function testPropertyInspLotSummaryControl()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_quality_score_procedure"
     */
    public function testPropertyInspQualityScoreProcedure()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_accepted_scrap_ratio_in_pct"
     */
    public function testPropertyInspLotAcceptedScrapRatioInPct()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "inspection_lot_has_appraisal_costs"
     */
    public function testPropertyInspectionLotHasAppraisalCosts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "quality_cost_collector"
     */
    public function testPropertyQualityCostCollector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "prod_insp_type_setting_is_active"
     */
    public function testPropertyProdInspTypeSettingIsActive()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_type_is_prfrd"
     */
    public function testPropertyInspTypeIsPrfrd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_handling_unit"
     */
    public function testPropertyInspLotHasHandlingUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_has_multiple_spec"
     */
    public function testPropertyInspLotHasMultipleSpec()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insp_lot_of_ewm_summary_control"
     */
    public function testPropertyInspLotOfEwmSummaryControl()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sap__messages"
     */
    public function testPropertySapMessages()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
